{
  "hash": "76623a9b9db6021c33e144ca120eedad",
  "result": {
    "markdown": "---\ntitle: \"R and Rstudio Install, setup and Package Management\"\ndescription: \"How to install and upgrade R and RStudio\"\nauthor: \"Marcelo Rosales\"\ndate: \"2023/03/24\"\ncategories:\n  - R\n  - RStudio\n  - Install\n  - Rpackages\nformat: \n  html: \n    code-fold: false\n    code-copy: true\n    code-overflow: wrap\nEditor: Source \n---\n\n\n## Installing/Upgrading R and RStudio\n\nReferences Pages to visit first:\\\n[Painless way to install a new version of R?](https://stackoverflow.com/questions/1401904/painless-way-to-install-a-new-version-of-r){target=\"_blank\"}\\\n[How to migrate Rstudio files and installed packages ( by version to a new computer )](https://stackoverflow.com/questions/67660414/how-to-migrate-rstudio-files-and-installed-packages-by-version-to-a-new-comput){target=\"_blank\"}\\\n[An efficient way to install and load R packages](https://statsandr.com/blog/an-efficient-way-to-install-and-load-r-packages/#most-efficient-way){target=\"_blank\"}\\\n[Loading packages: the difference between R's library() and require() functions](https://timfarewell.co.uk/loading-packages-the-difference-between-rs-library-and-require-functions/){target=\"_blank\"}\\\n[Bioconductor](https://www.bioconductor.org/install/){target=\"_blank\"}\\\n[Install/Update R and R packages](https://yiweiniu.github.io/blog/2019/07/Install-Update-R-and-R-packages/){target=\"_blank\"}\\\n[restore all R packages after installing a new version of R?](https://stackoverflow.com/questions/65817504/restore-all-r-packages-after-installing-a-new-version-of-r){target=\"_blank\"}\\\n[How to Upgrade R Without Losing Your Packages](https://www.r-bloggers.com/2015/06/how-to-upgrade-r-without-losing-your-packages/){target=\"_blank\"}\\\n[Upgrade R Without Losing Your Packages](https://www.r-bloggers.com/2017/05/upgrade-r-without-losing-your-packages/){target=\"_blank\"}\\\n[Update and migrate R](https://gist.github.com/arcaravaggi/20acc42e3e245cc268a95269de024b2d){target=\"_blank\"}\\\n[Profiles package](https://github.com/jmgirard/profiles){target=\"_blank\"}\\\n[Rprofile.site file example for Startup customization](https://www.statmethods.net/interface/customizing.html){target=\"_blank\"}\\\n[Managing R with .Rprofile, .Renviron, Rprofile.site, Renviron.site, rsession.conf, and repos.conf](https://support.posit.co/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf){target=\"_blank\"}\\\n[How to Create Directory and File If It doesn't Exist in R](https://r-lang.com/how-to-create-files-and-directories-in-r/){target=\"_blank\"}\\\n\nTrick for doing the upgrade, from installing the software to copying all the settings/packages over?First you install the new version, then run this in the old version:\n\n## Stack Overflow\n\n### Run in the old version of R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"C:/Temp/\")\npackages <- installed.packages()[,\"Package\"]\nsave(packages, file=\"Rpackages\")\n```\n:::\n\n\nFollowed by this in the new version:\n\n### Run in the new version\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"C:/Temp/\")\nload(\"Rpackages\")\nfor (p in setdiff(packages, installed.packages()[,\"Package\"]))\ninstall.packages(p)\n```\n:::\n\n\n### For windows\n\nUsing Installr\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#From https://stackoverflow.com/questions/1401904/painless-way-to-install-a-new-version-of-r\n\n# Run in the old version of R (or via RStudio)\nsetwd(\"C:/Temp/\") \npackages <- installed.packages()[,\"Package\"] \nsave(packages, file=\"Rpackages\") \n\n# INSTALL NEW R VERSION\nif(!require(installr)) { install.packages(\"installr\"); require(installr)} #load / install+load installr\n# See here for more on installr: https://www.r-statistics.com/2013/03/updating-r-from-r-on-windows-using-the-installr-package/  \n\n# step by step functions:\ncheck.for.updates.R() # tells you if there is a new version of R or not.\ninstall.R() # download and run the latest R installer... This install.R seems to be a windows only command. \n\n# Install library - run in the new version of R. This calls package names and installs them from repos, thus all packages should be correct to the most recent version\nsetwd(\"C:/Temp/\") \nload(\"Rpackages\") \nfor (p in setdiff(packages, installed.packages()[,\"Package\"])) \ninstall.packages(p) \n\n# Installr includes a package migration tool but this simply copies packages, it does not update them\ncopy.packages.between.libraries() # copy your packages to the newest R installation from the one version before it (if ask=T, it will ask you between which two versions to perform the copying)\n```\n:::\n\n\n## R-bloglers\n\n### How to Upgrade R Without Losing Your Packages\n\n1.  Before you upgrade, build a temp file with all of your old packages. **Files saved as .rda files.**\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp <- installed.packages()\ninstalledpkgs <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1])\nsave(installedpkgs, file=\"installed_old.rda\")\n```\n:::\n\n\n2.  Install the new version of R and let it do it's thing.\n\n3.  Once you've got the new version up and running, reload the saved packages and re-install them from CRAN.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"installed_old.rda\")\ntmp <- installed.packages()\ninstalledpkgs.new <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1])\nmissing <- setdiff(installedpkgs, installedpkgs.new)\ninstall.packages(missing)\nupdate.packages()\n```\n:::\n\n\nNote: If you had any packages from BioConductor, you can update those too!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Update: 'biocLite' is not available for new versions of R\n\nsource(\"http://bioconductor.org/biocLite.R\")\nchooseBioCmirror()\nbiocLite()\nload(\"installed_old.rda\")\ntmp <- installed.packages()\ninstalledpkgs.new <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1])\nmissing <- setdiff(installedpkgs, installedpkgs.new)\nfor (i in 1:length(missing)) biocLite(missing[i])\n```\n:::\n\n\n::: {.callout-caution collapse=\"false\"}\n### About `bioLite` package\n\nUpdate: 'biocLite' is not available for new versions of R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"biocLite\") # Warning in install.packages : package ‘biocLite’ is not available for this version of R\n```\n:::\n\n\nBiocLite is not a thing anymore, it was used in the old versions of Bioconductor to install packages, now you can directly use BiocManager::install().\n\nFor example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBiocManager::install(\"limma\")\n```\n:::\n\n:::\n\n### Save files as csv or excel .xlsx\n\n#### csv files\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(data_frame, 'path/to/forder/and/file_name.csv') # or set wd and just type file_name.csv\n```\n:::\n\n\n#### excel files\n\nConvert first to a data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"writexl\")\nlibrary(\"writexl\")\nthe_dataframe_name <- as.data.frame(data)\nwrite_xlsx(the_dataframe_name,\"path/to/folder/and/file_name.xlsx\")\n```\n:::\n\n\n## Upgrading R on Windows and Mac\n\nhttps://www.r-statistics.com/tag/installr/\n\n### Windows\n\nIf you are using **Windows** you can easily upgrade to the latest version of R using the installr package. Simply run the following code in Rgui:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"installr\") # install \nsetInternet2(TRUE) # only for R versions older than 3.3.0\ninstallr::updateR() # updating R.\n# If you wish it to go faster, run: installr::updateR(T)\n```\n:::\n\n\nRunning \"updateR()\" will detect if there is a new R version available, and if so it will download+install it (etc.). There is also a step by step tutorial (with screenshots) on how to upgrade R on Windows, using the installr package. If you only see the option to upgrade to an older version of R, then change your mirror or try again in a few hours (it usually take around 24 hours for all CRAN mirrors to get the latest version of R).\n\nAlso chekck the video:\\\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ZKBeV4BNeuk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\n\n</iframe>\n\n### Mac\n\nIf you are using **Mac** you can easily upgrade to the latest version of R using Andrea Cirillo's updateR package. The package is not on CRAN, so you'll need to run the following code in Rgui:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"devtools\")\ndevtools::install_github(\"AndreaCirilloAC/updateR\")\nupdateR(admin_password = \"PASSWORD\") # Where \"PASSWORD\" stands for your system password\n```\n:::\n\n\nMBP15 The downloaded source packages are in **\"/private/var/folders/xc/rxn5vywj3lvd_qt78ss92cc80000gn/T/Rtmp8TJvA5/downloaded_packages\"** MBP20 The downloaded binary packages are in ~~/var/folders/1v/nbx_5tgn553dq8s639lyln5c0000gn/T//Rtmp8AkWwy/downloaded_packages~~ **/private/var/folders/1v/nbx_5tgn553dq8s639lyln5c0000gn/T/RtmpP5nIXV/downloaded_packages**\n\nOption 1\n\n[Painless way to install a new version of R?](https://stackoverflow.com/questions/1401904/painless-way-to-install-a-new-version-of-r)\n\nFiles are `.rda`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#--run in the old version of R\nsetwd(\"C:/Temp/\")\npackages <- installed.packages()[,\"Package\"]\nsave(packages, file=\"Rpackages\")\n\n#--run in the new version\nsetwd(\"C:/Temp/\")\nload(\"Rpackages\")\nfor (p in setdiff(packages, installed.packages()[,\"Package\"]))\ninstall.packages(p)\n\n\n#-----\n\n# Just for completeness, you can save your packages in another directory on your computer.\ninstall.packages(\"thepackage\",lib=\"/path/to/directory/with/libraries\")\n#You can change the default .Library value using the function .libPaths too\n.libPaths(\"/path/to/directory/with/libraries\")\n\n# -----\n\n#Finally, You can also include a small code in my Rprofile.site allowing  to reinstall all packages when installing a new R version. You just have to list them up before you update to the new R version by using an .RData file containing an updated list with all packages.\n\nlibrary(utils)\n\n## Check necessary packages\nload(\"G:\\Setinfo\\R\\packagelist.RData\") # includes a vector \"pkgs\"\ninstalled <- pkgs %in% installed.packages()[, 'Package']\nif (length(pkgs[!installed]) >=1){\n  install.packages(pkgs[!installed])\n}\n# I make the packagelist.RData by specifying .Last() in my Rprofile.site. This updates the package list if I installed some :\n\n.Last <- function(){\n  pkgs <- installed.packages()[,1]\n  if (length(pkgs) > length(installed)){\n    save(pkgs,file=\"G:\\Setinfo\\R\\packagelist.RData\")\n  }\n}\n```\n:::\n\n\nOption 2:\\\n[How to migrate Rstudio files and installed packages ( by version to a new computer )](https://stackoverflow.com/questions/67660414/how-to-migrate-rstudio-files-and-installed-packages-by-version-to-a-new-comput)\\\n\nSave as `.csv files`.\\\nOr `.xlsx files`.\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\nsetwd()\n# /Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/file_name.csv  \n\ninstalled <- as.data.frame(installed.packages())\nwrite.csv(installed, 'installed_previously.csv') # Path/to/folder/installed_previously.csv \ninstalledPreviously <- read.csv('installed_previously.csv') # Path/to/folder/installed_previously.csv \nbaseR <- as.data.frame(installed.packages())\ntoInstall <- setdiff(installedPreviously, baseR)\n\n# the first thing to do would be to make sure that the set of currently installed packages is up-to-date. \n\nupdate.packages(checkBuilt=TRUE, ask=FALSE)  #check spelling of arguments\n  new_pacs <- paste( setdiff( installedPreviously$Package, baseR$Package), \n                       collapse=\",\")\n  install.packages( new_pacs, dependencies=TRUE)\n\n# For excel files, requires: \ninstall.packages(\"writexl\")\nlibrary(\"writexl\")\nwrite_xlsx(the_dataframe_name,\"path/to/folder/file_name.xlsx\")\n```\n:::\n\n\n## An efficient way to istall and load R packages\n\n[An efficient way to install and load R packages](https://statsandr.com/blog/an-efficient-way-to-install-and-load-r-packages/#most-efficient-way)\\\n\n### Inefficient way to install and load R packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Installation of required packages\ninstall.packages(\"tidyverse\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"readxl\")\ninstall.packages(\"dplyr\")\n\n# Load packages\nlibrary(\"tidyverse\")\nlibrary(\"ggplot2\")\nlibrary(\"readxl\")\nlibrary(\"dplyr\")\n```\n:::\n\n\n### More efficient way\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Package names\npackages <- c(\"ggplot2\", \"readxl\", \"dplyr\", \"tidyr\", ...)\n\n# Install packages not yet installed\ninstalled_packages <- packages %in% rownames(installed.packages())\nif (any(installed_packages == FALSE)) {\n  install.packages(packages[!installed_packages])\n}\n\n# Packages loading\ninvisible(lapply(packages, library, character.only = TRUE))\n```\n:::\n\n\n### Most efficient way\n\n`{pacman} package`\\\nAfter this article was published, a reader informed me about the {pacman} package. After having read the documentation and try it out myself, I learned that the function p_load() from {pacman} checks to see if a package is installed, if not it attempts to install the package and then loads it. It can also be applied to several packages at once, all this in a very condensed way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"pacman\")\n\npacman::p_load(ggplot2, tidyr, dplyr)\n\n## Make sure your current packages are up to date\nupdate.packages()\n## devtools is required\nlibrary(devtools)\ninstall_github(\"trinker/pacman\")\n```\n:::\n\n\nFind more about this package on [CRAN](https://github.com/trinker/pacman). [Introduction to the pacman Package in R (3 Examples)](https://statisticsglobe.com/pacman-r-package)\\\n\n`{librarian} package`\\\nLike `{pacman}`, the `shelf()` function from the `{librarian}` package automatically installs, updates, and loads R packages that are not yet installed in a single function. The function accepts packages from CRAN, GitHub, and Bioconductor (only if Bioconductor's Biobase package is installed). The function also accepts multiple package entries, provided as a comma-separated list of unquoted names (so no \"\" around package names).\\\n\n**Biobase: Base functions for Bioconductor** [DOI: 10.18129/B9.bioc.Biobase](https://bioconductor.org/packages/release/bioc/html/Biobase.html){target=\"_blank\"}\\\nInstallation:\\\nTo install this package, start R (version \"4.2\") and enter:\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"Biobase\")\n```\n:::\n\n\nLast but not least, the `{librarian}` package allows to load packages automatically at the start of every R session (thanks to the `lib_startup()` function) and search for new packages on CRAN by keywords or regular expressions (thanks to the `browse_cran()` function).\\\n\nHere is an example of how to install missing packages and load them with the `shelf()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# From CRAN:\ninstall.packages(\"librarian\")\n\nlibrarian::shelf(ggplot2, DesiQuintans / desiderata, pander)\n```\n:::\n\n\nFor CRAN packages, provide the package name as normal without \"\" and for GitHub packages, provide the username and package name separated by / (i.e., UserName/RepoName as shown for the desiderata package).\n\nFind more about this package on CRAN.\n\n## Stack Overflow 2\n\n[Every time I upgrade R using homebrew I need to install most packages again](https://stackoverflow.com/questions/27866834/everytime-i-upgrade-r-using-homebrew-i-need-to-install-most-packages-again)\n\n### Before install:\n\n#### 1. Update all R packages\n\nRef: <https://www.neonscience.org/resources/learning-hub/tutorials/packages-r>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# list all packages where an update is available\nold.packages()\n\n# update all available packages\nupdate.packages()\n\n# update, without prompts for permission/clarification\nupdate.packages(ask = FALSE)\n\n# update only a specific package use install.packages()\ninstall.packages(\"plotly\")\n```\n:::\n\n\n#### 2. Backup current package list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp <- installed.packages()\ninstalledpkgs <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1])\nsave(installedpkgs, file=\"installed_old.rda\")\n```\n:::\n\n\n#### 3. Backup your preferences file\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Copy a file\nsource_path <- \"/Users/marcelorosales/.config/rstudio/rstudio-prefs.json\"\ndestination_path <- \"/Users/marcelorosales/Box Sync/Github/RStudio_shared/RS_preferences/\"\n\nfile.copy(source_path, destination_path, overwrite = FALSE)\n\n# If: [1] TRUE, file was copied\n# If: [1] FALSE, file was not copied, error might be that the file already exists (change overwrite = TRUE, or paths not correct.)\n\n# Check if the copy was successful. This does not really work. \nif (file.exists(destination_path)) {\n  print(\"File copied successfully!\")\n} else {\n  print(\"File copy failed.\")\n}\n```\n:::\n\n\n#### Another way to do it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# identify the folders\nsource_path <- \"/Users/marcelorosales/.config/rstudio/\"\ndestination_path <- \"/Users/marcelorosales/Box Sync/Github/RStudio_shared/RS_preferences/\"\nfile <- \"rstudio-prefs.json\"\n\n# find the files that you want\n\nlist.files(source_path)\n\nlist.of.files <- list.files(source_path, file)\nlist.of.files\n\n# copy the files to the new folder\nfile.copy(list.of.files, destination_path)\n```\n:::\n\n\nRef:\\\n- <https://fs.r-lib.org/reference/copy.html>\\\n- <https://www.r-bloggers.com/2014/11/copying-files-with-r/>\\\n- <https://r-lang.com/how-to-copy-a-file-in-r/>\\*\\*\\*\\\n- <https://stat.ethz.ch/R-manual/R-devel/library/base/html/files.html>\n\n### Install new version of R\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbrew upgrade r\nbrew upgrade rstudio\n\n```\n:::\n\n\n### Reload packages from CRAN\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"installed_old.rda\")\ntmp <- installed.packages()\ninstalledpkgs.new <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1])\nmissing <- setdiff(installedpkgs, installedpkgs.new)\ninstall.packages(missing)\nupdate.packages()\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n### Reload packages from BioConductor\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Update2022: 'biocLite' is not available for new versions of R\n\nchooseBioCmirror()\nbiocLite()\nload(\"installed_old.rda\")\ntmp <- installed.packages()\ninstalledpkgs.new <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1])\nmissing <- setdiff(installedpkgs, installedpkgs.new)\nfor (i in 1:length(missing)) biocLite(missing[i])\n```\n:::\n\n\n## Location of the R packages\n\n``` {.bash filename=\"terminal\"}\n#| eval: false\n\n# MBP15: The downloaded source packages are in:\nopen /private/var/folders/xc/rxn5vywj3lvd_qt78ss92cc80000gn/T/Rtmp8TJvA5/downloaded_packages \n\n# MBP20: The downloaded binary packages are in:\n# old: open /private/var/folders/1v/nbx_5tgn553dq8s639lyln5c0000gn/T/Rtmp8AkWwy/downloaded_packages \nopen /private/var/folders/1v/nbx_5tgn553dq8s639lyln5c0000gn/T/RtmpP5nIXV/downloaded_packages\n```\n\n## Comparing files\n\nTo compare and find whether two files differ and where, there are a few packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tools)\nmd5sum(\"path/to/file1\") == md5sum(\"path/to/file2\")\n\nlibrary(diffobj)\ndiffFile(\"path/to/file1\", \"path/to/file2\")   # or `diffChr` if you data is in R already\n\nlibrary(diffr)\ndiffr(\"path/to/file1\", \"path/to/file2\")\n\nses(readLines(\"path/to/file1\"), readLines(\"path/to/file1\"))\n\npackages <- installed.packages()\nstructure(packages)\n```\n:::\n\n\n## Summary\n\nrecap core shell outline synopsis\n\nUpdate 20230522\n\n### Saved installed packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run in the old version of R\n\n# ------\n# 1. Before you upgrade, update all old packages.\n# ------\n\n# A. Update current packages.\nupdate.packages(checkBuilt=TRUE, ask=FALSE)  #check spelling of arguments\n\n# B. Upgrade packages of Bioconductor\n# Install packages from a newer version of Bioconductor.\n# https://www.bioconductor.org/install/ \n\nif (!require(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(version = \"3.16\") # Or the newest version\n\n# ------\n# 2. Before you upgrade: 1. build and save a file with all current packages (old packages) and 2. Backup your rstudio preferences files.  \n# ------\n\n# MBP15: setwd(\"/Users/Marcelo-Rosales/Box Sync/Github/RStudio_shared/R_packages/\")\n# MBP20: setwd(\"~/Box Sync/Github/RStudio_shared/R_packages/\")\n\ngetwd()\n\n# Variables for generic code:\n\n## Create a new folder for packages files\nnew_folder <- \"Rpkgs230522/\" # <----------------change folder name here, don't forget the \"/\".\nfolder <- \"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/\"\ndir.create(paste0(folder,new_folder)) #use paste0(), paste() inserts a space between obj.\n\n## Create the packages list files\nfile_name <- \"Rpkgs_MBP20_230522\" # <------------change file name here.\nrda <- \".rda\"\ncsv <- \".csv\"\ndf <- \"_df\"\nxlsx <- \".xlsx\"\n\nfile1 <- paste0(folder,new_folder,file_name) \nfile2 <- paste0(folder,new_folder,file_name,rda)\nfile3 <- paste0(folder,new_folder,file_name,csv)\nfile4 <- paste0(folder,new_folder,file_name,df,csv)\nfile5 <- paste0(folder,new_folder,file_name,xlsx)\n\nfile1\nfile2\nfile3\nfile4\nfile5\n\n# Generic code: I use this method because it is easy to change the names of the variables in one place once.\n\n## No extension\nRpkgs <- installed.packages()[,\"Package\"] # This is a temp file. \nsave(Rpkgs, file= file1) \nload(file1) # load as values (vector?)\n\n## As .rda file\ntmp <- installed.packages() # save in environment as data (dataframe?)\nRpkgs_rda<- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1]) # save as vector package names.\nsave(Rpkgs_rda, file= file2)\nload(file2)\n\n## As .csv file requires a dataframe.  \n### 1. Only the Package column variable (as vector?), or 2. as full csv data frame.  \nRpkgs_csv <- installed.packages()[,\"Package\"] \nRpkgs_df <- as.data.frame(installed.packages()) \nwrite.csv(Rpkgs_csv, file= file3)\nwrite.csv(Rpkgs_df, file= file4)\n\n## As as excel files also requires a dataframe (df)\n### install.packages(\"writexl\")\nlibrary(\"writexl\")\nRpkgs_df <- as.data.frame(installed.packages()) # same as in df_csv\nwrite_xlsx(Rpkgs_df, file5)\n\n\n\n# Specific code: I do not use this method because requires changing the name of the folder and file in each instance, and paths are also troublesome.\n\nRpkgs_MBP20_230329 <- installed.packages()[,\"Package\"] # save as vector values?\nsave(Rpkgs_MBP20_230329, file=\"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230329/Rpkgs_MBP20_230329\") # Or Rpkgs_MBP20_230329.rda\nload(\"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230329/Rpkgs_MBP20_230329.rda\") # load as values (vector?)\n\n## As .rda file\nRpkgs_MBP20_230329 <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1]) # save as vector package names.\nsave(Rpkgs_MBP20_230329, file=\"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230329/Rpkgs_MBP20_230329.rda\") # save as vector .rda; names... environment: installedpkgs, file: installed_old.rda, but when loaded in environment is back to installedpkgs.  \nload(\"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230329/installed_old.rda\") # In environment is back to installedpkgs.  \n\n## Save as csv requires a dataframe (df)\nRpkgs_MBP20_230329 <- installed.packages()[,\"Package\"] # save only the Package (name) variable as vector values?, still can be save as csv\nwrite.csv(Rpkgs_MBP20_230329, '/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230329/Rpkgs_MBP20_230329.csv')\n\n## Or df with all the info of packages\nRpkgs_MBP20_230329df1 <- as.data.frame(installed.packages())\nwrite.csv(Rpkgs_MBP20_230329df1, '/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230329/Rpkgs_MBP20_230329df1.csv')\n\n# As excel file also requires a dataframe (df)\n# install.packages(\"writexl\")\nlibrary(\"writexl\")\nwrite_xlsx(Rpkgs_MBP20_230329df1,\"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230329/Rpkgs_MBP20_230329df1.xlsx\")\n\n\n# Copy/Paste Rstudio global settings and preferences (~/.config/rstudio/rstudio-prefs.json)\n\n## Open folder \nfolder_path <- \"~/.config/rstudio/\"  # seems like \"~/path\" does not work on rstudio. \nfolder_path <- \"/Users/marcelorosales/.config/rstudio/\"\n\nsystem(paste(\"open\", shQuote(folder_path)))\n\n## Copy a file (direct).\nsource_path <- \"/Users/marcelorosales/.config/rstudio/rstudio-prefs.json\"\ndestination_path <- \"/Users/marcelorosales/Box Sync/Github/RStudio_shared/RS_preferences/\"\n\nfile.copy(source_path, destination_path, overwrite = FALSE)\n\n## Copy a file (indirect). Find the file(s) first.\nfile <- \"rstudio-prefs.json\"\n\nlist.files(folder_path) # list all files in folder\nfind.files <- list.files(folder_path, file) # select a specific file\nfind.files\n\n## copy the files to the new folder\nfile.copy(find.files, destination_path, overwrite = FALSE)\n\n# If: [1] TRUE, file was copied\n# If: [1] FALSE, file was not copied, error might be that the file already exists (change overwrite = TRUE, or paths not correct.)\n# Another way to do it, see Stack overflow 2 section. \n\n# Check if the copy was successful (THis code does not work properly, is )\n\nif (file.exists(paste0(destination_path, file))) {\n  print(\"File copied successfully!\")\n} else {\n  print(\"File copy failed.\")\n}\n\n\n# ------\n# 3. Install the new version of R (use homebrew). See Brew cask upgrade below.\n# ------\n\n#　4. Once the new version up and running, reload the saved packages and re-install them from CRAN.\n\n# run in the new version\n# MBP20: setwd(\"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/\")\n\nload(\"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230329/Rpkgs_MBP20_230329.rda\")  \n\nfor (p in setdiff(RSpacks230324MBP15, installed.packages()[,\"Package\"]))\n  install.packages(p)\n```\n:::\n\n\n### Copy/Paste Rstudio global settings and preferences if necessary.\n\n``` {.bash filename=\"Terminal\"}\n#| eval: false\n\n# Copy/Paste Rstudio global settings and preferences.. \nopen ~/.config/rstudio\n\n# Search and Copy file to same place as packages files. \nrstudio-prefs.json\n```\n\n``` bash\nopen ~/.config/rstudio\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Open folder \nfolder_path <- \"~/.config/rstudio/\"  # seems like \"~/path\" does not work on rstudio. \nfolder_path <- \"/Users/marcelorosales/.config/rstudio/\"  \n\nsystem(paste(\"open\", shQuote(folder_path)))\n\n# Copy a file\nsource_path <- \"/Users/marcelorosales/.config/rstudio/rstudio-prefs.json\"\ndestination_path <- \"/Users/marcelorosales/Box Sync/Github/RStudio_shared/RS_preferences/\"\n\nfile.copy(source_path, destination_path)\n\n\n# Check if the copy was successful\nif (file.exists(destination_path)) {\n  print(\"File copied successfully!\")\n} else {\n  print(\"File copy failed.\")\n}\n```\n:::\n\n\n### Brew cask upgrade R and Rstudio.\n\n\n::: {.cell filename='Terminal'}\n\n```{.bash .cell-code}\n# Upgrade R and rstudio\nbrew update\nbrew upgrade --cask r\n# password\n#`brew cleanup` has not been run in the last 30 days, running now...\n\n# Upgrade RStudio\nbrew upgrade --cask rstudio\n\n# Copy paste the `rstudio-prefs.json` if needed, usually it still remains after upgrade. \nrstudio-prefs.json\n```\n:::\n\n\n## Errors and trouble shooting.\n\n### non-UTF8 locale error in R\n\n**WARNING: You're using a non-UTF8 locale**\\\n\nWhen opening R new version... an error message is displayed.\n\n``` {.bash filename=\"error message\"}\n#| code-block-bg: false\n#| code-block-border-left: \"#31BAE9\"\n#| eval: false\n\nDuring startup - Warning messages:\n1: Setting LC_CTYPE failed, using \"C\" \n2: Setting LC_COLLATE failed, using \"C\" \n3: Setting LC_TIME failed, using \"C\" \n4: Setting LC_MESSAGES failed, using \"C\" \n5: Setting LC_MONETARY failed, using \"C\" \n[R.app GUI 1.79 (8198) x86_64-apple-darwin17.0]\n\nWARNING: You're using a non-UTF8 locale, therefore only ASCII characters will work.\nPlease read R for Mac OS X FAQ (see Help) section 9 and adjust your system preferences accordingly.\n```\n\nA solution: For english:\\\n- [Installing R on Mac - Warning messages: Setting LC_CTYPE failed, using \"C\"](https://stackoverflow.com/questions/9689104/installing-r-on-mac-warning-messages-setting-lc-ctype-failed-using-c){target=\"_blank\"}\\\n- [For Japanese:](https://maku77.github.io/r/basic/locale.html){target=\"_blank\"}.\\\n\n``` {.bash filename=\"Terminal\"}\ndefaults write org.R-project.R force.LANG en_US.UTF-8  # 英語表示\ndefaults write org.R-project.R force.LANG ja_JP.UTF-8  # 日本語表示\n```\n\n### There is already an App... (legacy)\n\n**Error: It seems there is already an App at '/Applications/Rstudio'**\\\n[is it possible to override the legacy app when install using brew](https://apple.stackexchange.com/questions/435745/is-it-possible-to-override-the-legacy-app-when-install-using-brew){targe=\"_blank\"}\n\nSome times is not possible to install, re-intall or upgrade a program via brew because first installation was made manually (downloaded zip or tar files).\\\nThis leaves a \"legacy\" app. To fix it use the **`--force`** attribute while installing\n\n``` bash\nbrew install --cask rstudio --force\n```\n\n## Other relevant files\n\n\n::: {.cell}\n\n:::\n\n\n### how to find out R library location in Mac OSX?\n\nWith .Library you get your default library location With .libPaths(\"your/path\") you can also get/set you library trees (see ?.libPaths) and with getwd() resp. setwd(\"your/path\") you get/set your working-directory\n\n\n::: {.cell}\n\n```{.r .cell-code}\n.Library  \n.libPaths()  \n```\n:::\n\n\n[Loading packages: the difference between R's library() and require() functions](https://timfarewell.co.uk/loading-packages-the-difference-between-rs-library-and-require-functions/){target= \"\\_blank\"}\n\n## Shell\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run in the old version of \n\n# ===== Before upgrade =====\n\n# ------1. Update all old packages ----------\n\n# Check R version or session info.\nR.Version()  \nsessionInfo()\n\n# A. Update current packages.\nupdate.packages(checkBuilt=TRUE, ask=FALSE)  #check spelling of arguments\n## 20230608: The downloaded binary packages are in:  /var/folders/1v/nbx_5tgn553dq8s639lyln5c0000gn/T//Rtmpt7WwKz/downloaded_packages\n\n# B. Upgrade packages of Bioconductor\n# Install packages from a newer version of Bioconductor https://www.bioconductor.org/install/ \nif (!require(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\n# BiocManager::install(version = \"3.17\") # Or the newest version\nBiocManager::install(\"Biobase\")\nBiocManager::install(\"BiocGenerics\")\n\n# if error,  re-install: 'Biobase'Old packages: 'learnr'\ninstall.packages(\"learnr\")\n\n# ------ 2. Save backup of old packages and preferences ----\n# 2. Before you upgrade: 1. build and save a file with all current packages (old packages) and 2. Backup your rstudio preferences files.  \n\n# ---- 2.1 Variables / info ----\n# Run paths and pc`s info\n# ~/path/to/folder \"~\" doesn't work?\n\npdir <- \"/Box Sync/Github/RStudio_shared/R_packages/\" # Path to directory\npth15 <- \"/Users/Marcelo-Rosales\" # MBP15\npth20 <- \"/Users/marcelorosales\"  # MBP20\npc15 <- \"MBP15\"\npc20 <- \"MBP20\"\n\np15 <- paste0(pth15,pdir)  # MBP15 destination folder\np20 <- paste0(pth20,pdir)  # MBP20 destination folder\n\nrpref <- \"/.config/rstudio/rstudio-prefs.json\" # ~ Location of preferences.json\n# rprefd <- \"/Box Sync/Github/RStudio_shared/RS_preferences/\" # destination folder\npref15 <- paste0(pth15,rpref)\npref20 <- paste0(pth20,rpref)\n\n# Run paths and pc`s info\n#--- 2.2 Variables manual imput ----\nlibrary(stringr)\nSys.Date()\nSys.time()\ngsub(\"-\",\"\",Sys.Date())\nstr_sub(gsub(\"-\",\"\",Sys.Date()), 3, -1) # https://youtu.be/343VCX3ynOA\n\ndate <- \"230608\"   # <--------------------- change date (file name) here (manual).\ndate <- str_sub(gsub(\"-\",\"\",Sys.Date()), 3, -1)   # date auto.\nfolder <- p20      # <--------------------- change destination folder (path) here.\npc <- pc20         # <--------------------- change PC (device name) here.\nrs_pref <- pref20  # <--------------------- change r prefs location here.\n\nnew_folder <- paste0(\"Rpkgs\",date,\"/\")   \nfile_name <- paste0(\"Rpkgs_\",pc,\"_\",date)   \nrda <- \".rda\"\ncsv <- \".csv\"\ndf <- \"_df\"\nxlsx <- \".xlsx\"\n\nrpref.json <- paste0(\"rstudio-prefs_\", pc,\"_\", date, \".json\") # .json file name\nsource_path <- paste0(rs_pref)\ndestination_path <- paste0(folder,new_folder,rpref.json)  # Place after the creation of the folder var.\n\n\nsystem(paste(\"open\", shQuote(folder)))\n\n\n## Check Destination folder\ndate\nfolder\nnew_folder\nfile_name\npc\nrs_pref\n\n## Create a new folder for packages files... use paste0(), paste() inserts a space between obj.\ndir.create(paste0(folder,new_folder)) \n\n## Create file names (only), extensions and path to folder. \nfile1 <- paste0(folder,new_folder,file_name) \nfile.rda <- paste0(folder,new_folder,file_name,rda)\nfile.csv <- paste0(folder,new_folder,file_name,csv)\nfile.csv2 <- paste0(folder,new_folder,file_name,df,csv)\nfile.xlsx <- paste0(folder,new_folder,file_name,xlsx)\n\nfile1\nfile.rda\nfile.csv\nfile.csv2\nfile.xlsx\n\n#--------- 2.3 Create files ----------\n\n# Ways to create and save Packages (old Rpkgs)\ntmp <- installed.packages()                         # <--- Matrix\ntemp2 <- installed.packages()[,\"Package\"]           # <--- Vector\ntemp3 <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1]) # <--- Vector\ntemp4 <- as.data.frame(installed.packages())        # <--- Dataframe\ntemp5 <- as.data.frame(installed.packages()[,\"Package\"])\n\n# Which script to use?...\n# 1.  \nas.vector(tmp[is.na(tmp[,\"Priority\"]), 1]) # Is currently the most common script.\n# a) is.na(tmp[,\"Priority\"]) checks for missing or NA (Not Available) values in the \"Priority\" column. Returns a logical \"vector\" where TRUE = NA values and FALSE = non-NA values.\n# b) It will return only NA rows. \n# b) Non-NA rows are the default installed packages at clean/new start of program. \n# c) Is NOT very good for comparing files good.\n\n# 2. \nas.data.frame(installed.packages()[,\"Package\"]) # Vector of only the packages column\n# a) It will return a df of only the packages column, but will include all packages\n# b) DF can be saved as csv files, very easy to compare with VS code \"File: Compare...\"\n\n\n#=====2.3.1 PASTE FILE NAME!!! to each file type.====\nprint(file_name)\n# [1] \"Rpkgs_MBP15_230612\" <-----------------------------Copy/Paste from console.\n\n## No extension\nRpkgs_MBP20_230612 <- installed.packages()[,\"Package\"] # This is a temp file. \nsave(Rpkgs_MBP20_230612, file= file1) \n\n## As .rda file\ntmp <- installed.packages() # save in environment as data (dataframe?)\nRpkgs_MBP20_230612_rda<- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1]) # save as vector package names.\nsave(Rpkgs_MBP20_230612_rda, file= file.rda)\n\ntmp2 <- as.vector(installed.packages()[,\"Package\"])\ntmp3 <- as.data.frame(installed.packages()[,\"Package\"])\n\n\n## As .csv file requires a dataframe.  \n### 1. Only the Package column variable (as vector?), or 2. as full csv data frame.  \nRpkgs_MBP20_230612_csv <- installed.packages()[,\"Package\"] \nRpkgs_MBP20_230612_df <- as.data.frame(installed.packages()) \nwrite.csv(Rpkgs_MBP20_230612_csv, file= file.csv)\nwrite.csv(Rpkgs_MBP20_230612_df, file= file.csv2)\n\n## As as excel files also requires a dataframe (df)\n### install.packages(\"writexl\")\nlibrary(\"writexl\")\nRpkgs_MBP20_230612_df <- as.data.frame(installed.packages()) # same as in df_csv\nwrite_xlsx(Rpkgs_MBP20_230612_df, file.xlsx)\n\n# Copy/Paste Rstudio global settings and preferences (~/.config/rstudio/rstudio-prefs.json)\n\n## Open folder \nfolder\nnew_folder\nsystem(paste(\"open\", shQuote(folder))) # seems like \"~/path\" does not work on rstudio. \nsystem(paste(\"open\", shQuote(paste0(folder, new_folder))))\n\n## Copy a file (direct).\n\nfile.copy(source_path, destination_path, overwrite = FALSE) # overwrites old file.\n\n# If: [1] TRUE, file was copied\n# If: [1] FALSE, file was not copied, error might be that the file already exists (change overwrite = TRUE, or paths not correct.)\n# Another way to do it, see Stack overflow 2 section. \n\n# ------ 3. Install the new version of R (use homebrew).------\n\n# Close R and Rstudio!! RUN in terminal better.\n\n# {bash filename=\"Terminal\"}\n#| eval: false \n\n# Upgrade R and rstudio\nbrew update\nbrew upgrade --cask r\nbrew reinstall --cask r  \n\nsystem(\"brew update\")\nsystem(\"brew update\", intern = TRUE) # Setting intern = TRUE captures the output of the command and returns it as a character vector in R. \n# password\n#`brew cleanup` has not been run in the last 30 days, running now...\n\n# Upgrade RStudio\nbrew upgrade --cask rstudio\n\n# ------ After upgrade -----\n\n# 4. Once the new version up and running, reload the saved packages and re-install them from CRAN\n\n# run in the new version/device\n\n#--- 4. Reload Variables and files ------\n\npdir <- \"/Box Sync/Github/RStudio_shared/R_packages/\" # Path to directory\npth15 <- \"/Users/Marcelo-Rosales\" # MBP15\npth20 <- \"/Users/marcelorosales\"  # MBP20\npc15 <- \"MBP15\"\npc20 <- \"MBP20\"\n\np15 <- paste0(pth15,pdir)  # MBP15 destination folder\np20 <- paste0(pth20,pdir)  # MBP20 destination folder\n\nrpref <- \"/.config/rstudio/rstudio-prefs.json\" # ~ Location of preferences.json\n# rprefd <- \"/Box Sync/Github/RStudio_shared/RS_preferences/\" # destination folder\npref15 <- paste0(pth15,rpref)\npref20 <- paste0(pth20,rpref)\n\n# Run paths and pc`s info\n## Variables:\ndate <- \"230609\"   # <--------------------- change date (file name) here.\ndate <- str_sub(gsub(\"-\",\"\",Sys.Date()), 3, -1)   # date auto.\nfolder <- p20      # <--------------------- change destination folder (path) here.\npc <- pc20         # <--------------------- change PC (device name) here.\nrs_pref <- pref20  # <--------------------- change r prefs location here.\n\nnew_folder <- paste0(\"Rpkgs\",date,\"/\")   \nfile_name <- paste0(\"Rpkgs_\",pc,\"_\",date)   \nrda <- \".rda\"\ncsv <- \".csv\"\ndf <- \"_df\"\nxlsx <- \".xlsx\"\n\nrpref.json <- paste0(\"rstudio-prefs_\", pc,\"_\", date, \".json\") # .json file name\nsource_path <- paste0(rs_pref)\ndestination_path <- paste0(folder,new_folder,rpref.json)  # Place after the creation of the folder var.\n\n# file1 <- paste0(folder,new_folder,file_name) \nfile.rda <- paste0(folder,new_folder,file_name,rda)\n# file.csv <- paste0(folder,new_folder,file_name,csv)\n# file.csv2 <- paste0(folder,new_folder,file_name,df,csv)\n# file.xlsx <- paste0(folder,new_folder,file_name,xlsx)\n\n# file1\nfile.rda\n# file.csv\n# file.csv2\n# file.xlsx\n\n#---- 5. Load old packages list ------\n\nsystem(paste(\"open\", shQuote(folder)))\n\n#---- 5.1 \"new\" (base) vs \"old\" (backup) pkgs differences installation----\n\n#load(installedpkgs_old)\n\nfile.rda\nfile_name_rda <- paste0(file_name,\"_rda\")\nfile_name_rda\n\nload(file.rda) # will load as Rpkgs_MBP20_230612_rda\n\ninstalledpkgs_old <- Rpkgs_MBP20_230612_rda # .rda\n\ntmp <- installed.packages()\ninstalledpkgs_new <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1])\nmissing <- setdiff(installedpkgs_old, installedpkgs_new)\nmissing\ninstall.packages(missing)\nupdate.packages()\n\n\n#------ 5.2 \"pc1\" vs \"pc2\" pkgs differences install ----\n\nfile.rda　# pc1.\nload(file.rda) # will load as Rpkgs_MBP20_230612_rda\n\npc2 <- \"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230612/Rpkgs_MBP15_230612.rda\"\nload(pc2) # will load as Rpkgs_MBP15_230612_rda\n\nmissing2 <- setdiff(Rpkgs_MBP20_230612_rda, Rpkgs_MBP15_230612_rda)\nmissing2\n# [1] \"Biobase\"      \"BiocGenerics\"\n\nrm(Rpkgs_MBP15_230612_rda)\nrm(Rpkgs_MBP20_230612_rda)\n\n\n#----- 5.3 Install \"Bioconductor\" packages -----\n\n## Packages from Bioconductor (before or after Rpackages install?)\n## Install packages from a newer version of Bioconductor https://www.bioconductor.org/install/\nif (!require(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\n# BiocManager::install(version = \"3.17\") # Or the newest version\nBiocManager::install(\"Biobase\")\nBiocManager::install(\"BiocGenerics\")\n\n# if error,  re-install: 'Biobase'Old packages: 'learnr'\ninstall.packages(\"learnr\")\n\n\n#----- 5.4 Install packages short code\n\n# for (p in setdiff(installedpkgs_old, installed.packages()[,\"Package\"]))\n#   install.packages(p)\n\n\n\n\n#-----6. Compare csv files -----\n\n# 6.1 Open csv files in VS code\npath_csv <- paste0(p20, new_folder)\nsystem(paste(\"open\", shQuote(path_csv)))\n\n# Select csv for pc1 and pc2 > drag to VS code icon > ....[]... will open in VS code\n# In VS code: Select pc1 > cmd + p ...[]... > File: Compare Active File With...\n\n\n# ------ 7. copy paste preferences. -------\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}