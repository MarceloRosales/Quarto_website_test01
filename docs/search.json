[
  {
    "objectID": "posts/quarto_start.html",
    "href": "posts/quarto_start.html",
    "title": "Starting with quarto",
    "section": "",
    "text": "Since the appearance of quarto, perhaps it would be more effective to write all in .qmd files cos of its advantages,\n\nimages can be added easily and automatically\nimg captions\ncode writing and\ncompatible with Zotero bibliography (for word, Rstudio and quarto)\nAlmost same code/outcome flexibility as Mkdocs code package.\nQmd files can be opened in vs code directly and updates instantaneously as I write for color copy/paste code.\nVisual mode is very convenient, as I can copy paste format directly to word (no need to convert/apply format code to word format)."
  },
  {
    "objectID": "posts/quarto_start.html#quarto-install-or-upgrade",
    "href": "posts/quarto_start.html#quarto-install-or-upgrade",
    "title": "Starting with quarto",
    "section": "Quarto install or upgrade",
    "text": "Quarto install or upgrade\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org .\n\n\nterminal-brew\n\nbrew install --cask quarto \nbrew upgrade --cask quarto\n\n\n\n\n\n\n\nNote\n\n\n\n20230330 upgrade: quarto –version: 1.2.475 (Release Candidate — v1.3.296 available as CLI, but not as brew cask)"
  },
  {
    "objectID": "posts/quarto_start.html#running-code",
    "href": "posts/quarto_start.html#running-code",
    "title": "Starting with quarto",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).\nyou can write chunk options in the body of a code chunk after #|, e.g.,\n\n\n\n\n\nThis is a long long long long caption.\n\n\n\n\nfor more info see here.\nSeattle Precipitation by Day (2012 to 2016)\nFor ojs and pkp (public knowledge project) install packages first. follow this pkp installation guide.\n\nhttps://pkp.sfu.ca/software/ojs/download/\n\ndata = FileAttachment(\"../data/seattle-weather.csv\")\n  .csv({typed: true})\n  \nPlot.plot({\n  width: 800, height: 500, padding: 0,\n  color: { scheme: \"blues\", type: \"sqrt\"},\n  y: { tickFormat: i => \"JFMAMJJASOND\"[i] },\n  marks: [\n    Plot.cell(data, Plot.group({fill: \"mean\"}, {\n      x: d => d.date.getUTCDate(),\n      y: d => d.date.getUTCMonth(),\n      fill: \"precipitation\", \n      inset: 0.5\n    }))\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAir Quality\nFigure 1 further explores the impact of temperature on ozone level.\n\nlibrary(ggplot2)\n\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\"\n)\n\n\n\n\nFigure 1: Temperature and ozone level.\n\n\n\n\nFor a demonstration of a line plot on a polar axis, see Figure 2.\n\nMake sure that the console in the r and not in Python. In the top label you will see either the R logo with > or the python logo with >>>, to exit python console press esc and you will go back to the R console.\n\n\nlibrary(reticulate)\n\n# install python see Python\n\npip3 install numpy\npip3 install matplotlib\npython3 -m pip install numpy\npython3.11 -m pip install --upgrade pip\npip3.10 install numpy\npython3.10 -m pip install --upgrade pip\n\n# Pre-intallation required through terminal:\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\nFigure 2: A line plot on a polar axis\n\n\n\n\nIf error: ModuleNotFoundError: No module named ‘numpy’ in Python\nSee here\nPython test.\n\n\nimport numpy as np\n\n\nlibrary(reticulate)\n\n\nRunning Code summary\nRelated to code and code chunks.\nIn yml sections:\n---\nformat: \n  html: \n    code-fold: show\n    code-copy: true\n    code-overflow: wrap\n---\nIn chuncks:\n#| eval: false\n#| echo: false\n#| my-chunk, echo = FALSE, fig.width = 10,\n#| label: fig-airquality\n#| fig.cap = \"This is a long long long long caption.\"\n#| fig-cap: Temperature and ozone level.\n#| warning: false\n# For python, pre-intallation required through terminal:\n# pip install numpy\n# pip install matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n1 + 1"
  },
  {
    "objectID": "posts/quarto_start.html#nav-and-sidebar",
    "href": "posts/quarto_start.html#nav-and-sidebar",
    "title": "Starting with quarto",
    "section": "Nav and sidebar",
    "text": "Nav and sidebar\nNav bar example use in this page\n\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"MySite\"\n  image: \"images/img01.png\" # where this images goes?. only works with specifit themes?...\n  favicon: \"images/favicon.png\" # Small icon in the bewbrowser tab (ex. uni logo)\n  open-graph: true #https://quarto.org/docs/websites/website-tools.html, https://www.youtube.com/watch?v=QwEQKM4YRnU&t=2s\n  #twitter-card: true #https://quarto.org/docs/websites/website-tools.html#twitter-cards\n  search: true \n  navbar:\n    background: light # this is the color option of the nav bg, but I set color in format: with theme.scss. # Options:`primary`, `secondary`, `success`, `danger`, `warning`, `info`, `light`, `dark`\n    logo: \"images/nav_img.png\" # logo in nav bar.\n    logo-alt: \"link to Mkdocs\"\n    logo-href: \"https://marcelorosales.github.io/MkDocsTest1/MkDocs/\"\n    collapse-below: lg\n    \n    left:\n      - href: index.qmd\n        text: Home\n      - href: about.qmd\n        text: \"About\"\n      - text: \"Software\"\n        menu: \n          - href: files/Software/RStudio/index.qmd # when inputing index.qmd doesnt work. Try other file and retry.\n            text: \"RStudio\"\n          - href: files/Software/ImageJ/index.qmd\n            text: \"ImageJ\"\n          - href: files/Software/Analyze12/index.qmd\n            text: \"Analyze12\"\n      - text: \"Blog\"\n        href: blog.qmd\n      - text: \"NavSubmenu\"\n        menu:\n          - text: \"Report a Bug\"\n            icon: \"bug\"\n            href: \"https://github.com/quarto-dev/quarto-cli/issues\"\n          - text: \"Ask a Question\"\n            icon: \"chat-right-text\"\n            href: \"https://github.com/quarto-dev/quarto-cli/discussions\"\n          - text: \"FAQ\"\n            icon: \"question-circle\"\n#            href: docs/faq/index.qmd\n    right: \n      - icon: github\n        href: https://github.com/quarto-dev/quarto-cli\n#        text: Quarto GitHub\n      - icon: rss\n        href: https://quarto.org/docs/blog/index.xml\n        \n  sidebar:\n    - id: RStudio \n      title: \"Get Started with the RStudio\"\n      style: \"floating\"\n      collapse-level: 2\n      align: left\n      contents:  \n        - files/Software/RStudio/index.qmd  \n        - text: \"Install\"\n          href: files/Software/RStudio/R_install.qmd  \n        - text: \"R Packages\"\n          href: files/Software/RStudio/R_Packages.qmd\n\n    - id: ImageJ \n      title: \"Get Started with ImageJ\"\n      style: \"floating\"\n      collapse-level: 2\n      align: left\n      contents:  \n        - files/Software/ImageJ/index.qmd  \n        - text: \"Install\"\n          href: files/Software/ImageJ/ImgJ_install.qmd  \n        - text: \"R Packages\"\n          href: files/Software/ImageJ/ImgJ_Packages.qmd\n\nformat:\n  html:\n    toc: true\n    theme:\n      light: [cosmo, theme.scss]\n      dark: [cosmo, theme-dark.scss] # change theme (cosmo) colors and formats in the scss files\n    code-copy: true\n    code-overflow: wrap\n    css: styles.css\n    include-after-body: js.html\n    grid:\n      sidebar-width: 250px\n      body-width: 900px\n      margin-width: 300px\n\n\neditor: visual"
  },
  {
    "objectID": "posts/Python.html",
    "href": "posts/Python.html",
    "title": "Python",
    "section": "",
    "text": "I first try:\npip install --upgrade\n\nERROR: You must give at least one requirement to install (see \"pip help install\")\n\n[notice] A new release of pip available: 22.2.1 -> 23.0.1\n[notice] To update, run: python3.9 -m pip install --upgrade pip\n\n# Then I tried\nbrew install python3\nDisplayed: Warning: No available formula with the name “python3.”.\nDid you mean python@3.9, python@3.8, python@3.7, python@3.11 or python@3.10?\n==> Searching for similarly named formulae and casks…\n==> Formulae boost-python3 python@3.10 ✔ python@3.11 python@3.7 python@3.8 python@3.9 ✔\n\n\nbrew install python@3.8 \n# Or version needed\nHowever, this install all version of python.\n==> python@3.10 Python has been installed as /usr/local/bin/python3.10\nUnversioned and major-versioned symlinks python, python3, python-config, python3-config, pip, pip3, etc. pointing to python3.10, python3.10-config, pip3.10 etc., respectively, have been installed into:\n/usr/local/opt/python@3.10/libexec/bin\nYou can install Python packages with\npip3.10 install <package>\nThey will install into the site-package directory:\n/usr/local/lib/python3.10/site-packages\ntkinter is no longer included with this formula, but it is available separately:\nbrew install python-tk\\@3.10\nIf you do not need a specific version of Python, and always want Homebrew’s python3 in your PATH:\n  brew install python3\nSee: https://docs.brew.sh/Homebrew-and-Python\nWarning: python@3.11 3.11.2_1 is already installed and up-to-date.\npython3.9 -m pip install –upgrade pip\npip install –upgrade pip\npython –version\n>_Python 3.8.10\npip3 --vesrion\n\n\nFor some of you reading this, this command may be enough. You can run Python 3 using this command (with the 3 at the end).\n\npython3\nTo exit python help window press ++Cnt+z++\nTo print, press . To open an existing new project, press .\n\n\n\n\nlink\nPip is a package management system used for installing and managing Python software packages and libraries. The software and libraries are stored in a repository called the Python Package Index (PyPI).\nPrerequisites:\n\nA system running macOS\nPython installed\nA user account with administrator-level privileges\n\n\n\nTo install pip on macOS through Homebrew. Make sure you have Homebrew installed by running the following command:\nbrew install python\nThe command installs the latest Python, pip, and setuptools.\n\n\n\nFollow the steps below to install Pip:\n1. Press Command + Space Bar and type in Terminal. Click the app icon to open a new terminal window.\n2. Check your Python version to make sure Python3 is installed: python3 --version\n3. Download pip by running the following command: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\nThe curl command allows you to specify a direct download link. Use the -o option to set the name of the downloaded file.\n4. Install the downloaded package by running: python3 get-pip.py\n5. Verify Pip Installation: pip --version\npython3 --version\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npython3 get-pip.py\npip --version\n\n\n\n\nlink\nRun this command:\nbrew install pyenv\n\n\nNow you just need to run the following command: pyenv install {# of the py version to install}\npyenv install 3.9.2\n\n\n\n\nlink\nIf you only want to use Python 3.x for a specific project, then cd to your specific directory and type:\npyenv local 3.x.x\nIf you’d prefer to just have Python 3.x installed globally throughout your operating system, then type:\npyenv global 3.x.x\n\n\n\nbrew install jupyter\n# Start Jupyter\njupyter notebook"
  },
  {
    "objectID": "posts/Python.html#summary",
    "href": "posts/Python.html#summary",
    "title": "Python",
    "section": "Summary",
    "text": "Summary\n\n\nTerminal\n\n\npip3 --version\nbrew install python3 \nbrew install python #same as above\nbrew install pyenv\nbrew install jupyter\npip install --upgrade pip\npython3.11 -m pip install --upgrade pip\n\npip install numpy\npip install matplotlib   #Still asking for numpy\n\n# This code made it work...\npip3 install numpy\npip3 install matplotlib\n\n# Optional commands to make python run in RStudio:\npython3 -m pip install numpy\npython3.11 -m pip install --upgrade pip\npip3.10 install numpy\npython3.10 -m pip install --upgrade pip"
  },
  {
    "objectID": "posts/Python.html#errors-and-troubleshooting",
    "href": "posts/Python.html#errors-and-troubleshooting",
    "title": "Python",
    "section": "Errors and Troubleshooting",
    "text": "Errors and Troubleshooting\n\n\n\n\n\n\nWarning\n\n\n\nIn background Jobs:\nError: ModuleNotFoundError: No module named ‘numpy’ Execution halted\n\n\n\n\n\n\nSolution\n\n\n\npip3 install numpy\npip3 install matplotlib"
  },
  {
    "objectID": "posts/Git.html",
    "href": "posts/Git.html",
    "title": "GIT Management",
    "section": "",
    "text": "brew install git   \nIn windows, git provides the Git BASH app, a BASH emulation used to run Git form the command line."
  },
  {
    "objectID": "posts/Git.html#git-config",
    "href": "posts/Git.html#git-config",
    "title": "GIT Management",
    "section": "Git Config",
    "text": "Git Config\ngit config --global user.name \"{your name}\" # Quotes if there is a space between the names\ngit config --global user.email your_email@service.com\n\n# Specify default editor\ngit config --global core.editor \"code --wait\"  # VScode as default editor\ngit config --global -e  # Opens defautl editor # Opens default editor to edit all the global settings. \n\n# How to handle end of lines. In windows: \\r, \\n; on mac: \\n. May provoke conflicts, cofig property \"core.autocrlf\" (11:41)\n# Windows:\ngit config --global core.autocrlf true\n# Mac:\ngit config --global core.autocrlf input\nTo have a colorfull terminal window like in the video install\nOn Mac: Zsh with git plugin\nWindows: posh-git\nvideo1\nvideo2\nUsing zsh on Windows\nGit cheat sheet\nGit cheat sheet2\nGit cheat sheet3\nGit cheat sheet4\nGit cheat sheet3\n\n\nTerminal\n\n# Start control version\ngit init\nls -a # To see hidden files\nopen .git\ngit clone [url]\n\n# Stage & Snapshot\ngit pull\ngit status\ngit add .\ngit checkout\ngit commit -m \"[message]\"\ngit push\ngit pull\n\nrm [file_name]  # removes/delete file\nmv [old_filename] [new_filename]"
  },
  {
    "objectID": "posts/Git.html#video-tutorials",
    "href": "posts/Git.html#video-tutorials",
    "title": "GIT Management",
    "section": "Video Tutorials",
    "text": "Video Tutorials\n\n\n\n\n\n\n\n\nterminal\n\nbrew install git\ngit --version\ngit init\ngit init --bare # Repository for only push and pull, not changes possible  \ngit status\ngit add {filename}\ngit add .   \ngit commit -m \"{message}\" # If forgot -m (1:06:40), press i, --INSERT-- type message\ngit commit -am \"{message}\" # If modify file already added to git you can use \"-a\" flag, for new files use the \"add\" flag. \ngit diff # to see the differences and modifications on the files.\ngit diff --color-words # color code for added and deleted portions of each file.\ngit log\ngit log --pertty=oneline #Log as one line, not showing all the changes.\ngit diff {commit log#} {commit log#}\n# 1:24:00\ngit branch\ngit branch --all\ngit branch {branch name1} # To create a new branch\ngit branch checkout {branch name1} #To change/jump branches\ngit status\ngit commit -am \"Changes in the new branch\"\ngit log #Check HEAD -> {branch name1}\ngit log --pretty=oneline #To see all commits log\ngit checkout -b {branch name2} #Jump to branch2 and if it doesn't exist create it. \ngit diff {branch name1}...{branch name2} #To see differences between branches.  \n\n## Mergin braches to master.  Go to master first.\ngit checkout master\ngit branch\ngit merge {branch name}\n\n## To push a branch from local to github\ngit push --set-upstream origin {branch name}\n\n## To delete a branch. Caution!! Can not delete if you are in branch\ngit branch -d {branch name}\n\n## Discard/Unstage ex .DS_Store file from git panel. Find all \".DS_Store\" files in all folders and delete.  \nfind . -name \".DS_Store\" -delete    \nfind . -name '.DS_Store' -type f -delete\ngit restore .DS_Store \ngit restore ."
  },
  {
    "objectID": "posts/Git.html#trouble-shooting.",
    "href": "posts/Git.html#trouble-shooting.",
    "title": "GIT Management",
    "section": "Trouble shooting.",
    "text": "Trouble shooting.\n\nBranch is ahead error\n\n\nterminal\n\ngit add .\ngit commit -m \"python install\"\n\n\n\nerror message\n\nremote: fatal error in commit_refs To https://github.com/MarceloRosales/Quarto_website_test01.git ! \\[remote rejected\\] master -> master (failure) **error: failed to push some refs to 'https://github.com/MarceloRosales/Quarto_website_test01.git'**\n\nSolution:\n\n\n\n\n\n\nImportant\n\n\n\nALL SOLUTIONS REVERT TO LAST COMMIT AND DELETE ALL CONTENT EVEN IF SAVED!! SAVE CONTENT IN A DIFFERENT FILE BEFORE MERGING, AFTER MERGING (REVERT TO LAST COMMIT) COPY PASTE CONTENT AGAIN.\n\n\ngit - Your branch is ahead of ‘origin/master’ by 1 commit\ngit reset HEAD^ --soft (Save your changes, back to last commit)\ngit reset HEAD^ --hard (Discard changes, back to last commit)\nThis one worked!!\n\n\nterminal\n\ngit pull origin {branch name}\ngit reset --hard origin/{branch name}\ngit branch\n\ngit pull     \ngit merge \ngit pull origin\ngit reset --hard origin/master\n# HEAD is now at 4fd3039 R, RStudio and packages upgrade\ngit pull\ngit push\ngit add .\ngit commit -m \"message\"\ngit push\n\n\nGit Stash Changes\nLearn Git Stash Apply, Pop, Clear, Show, Drop\nAnother alternative for the Branch ahead error, you can use:\n\n\nTerminal\n\ngit stash\ngit pull\ngit stash show\n# To exit git stash ++Cnt+z++.  \ngit stash list\ngit stash clear # Warning!! all changes make in the stash will be lost and revert to last saved version. \ngit status\n\nhow to git stash changes\n\n\n\n\nDelete .DS_Store\nDelete .DS_Store recursively from all directories and sub-directories.\nHow to Recursively Remove .DS_Store\nOn a Mac, it is common to run into an issue when committing files to a git repo, where a file named .DS_Store appears in every folder. This file, although it contains useful information for the directory, is usually not something you want to commit to your repo. Similar problems exist on linux as well.\nSolution:\n\nAdd the .DS_Store to the .gitignore file > save > commit.\n\nCheck if file still recurs.\n\n\ngit status\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   .DS_Store\nSometimes, despite adding this to your .gitignore file, it still somehow ends up in your git repo.\nTo remove all instances of a particular file, such as .DS_Store, on your computer, you can run the following command:\nfind . -name \".DS_Store\" -delete\nSteps: 1. Uncommit/Discard/Unstage the .DS_Store file from git panel\ngit restore .DS_Store  # If it is the only file on stage\ngit restore .  \nls -a  #find if still present\nfind . -name \".DS_Store\" -delete  #Find all \".DS_Store\" files in all folders and delete\n\ngit status\ngit add . \ngit commit -m \"delete all DS_Store files\"\ngit push\ngit pull \n\nRender > commit > push > pull.\n.DS_Store file will be automatically created by Mac in the folder, but it won’t appear on the stageing steps anymore."
  },
  {
    "objectID": "posts/2adPost.html",
    "href": "posts/2adPost.html",
    "title": "This is the title of the post",
    "section": "",
    "text": "this the second post."
  },
  {
    "objectID": "posts/RStudio_install.html",
    "href": "posts/RStudio_install.html",
    "title": "R and Rstudio Install, setup and Package Management",
    "section": "",
    "text": "References Pages to visit first:\nPainless way to install a new version of R?\nHow to migrate Rstudio files and installed packages ( by version to a new computer )\nAn efficient way to install and load R packages\nLoading packages: the difference between R’s library() and require() functions\nBioconductor\nInstall/Update R and R packages\nrestore all R packages after installing a new version of R?\nHow to Upgrade R Without Losing Your Packages\nUpgrade R Without Losing Your Packages\nUpdate and migrate R\nProfiles package\nRprofile.site file example for Startup customization\nManaging R with .Rprofile, .Renviron, Rprofile.site, Renviron.site, rsession.conf, and repos.conf\nHow to Create Directory and File If It doesn’t Exist in R\n\nTrick for doing the upgrade, from installing the software to copying all the settings/packages over?First you install the new version, then run this in the old version:"
  },
  {
    "objectID": "posts/RStudio_install.html#stack-overflow",
    "href": "posts/RStudio_install.html#stack-overflow",
    "title": "R and Rstudio Install, setup and Package Management",
    "section": "Stack Overflow",
    "text": "Stack Overflow\n\nRun in the old version of R\n\nsetwd(\"C:/Temp/\")\npackages <- installed.packages()[,\"Package\"]\nsave(packages, file=\"Rpackages\")\n\nFollowed by this in the new version:\n\n\nRun in the new version\n\nsetwd(\"C:/Temp/\")\nload(\"Rpackages\")\nfor (p in setdiff(packages, installed.packages()[,\"Package\"]))\ninstall.packages(p)\n\n\n\nFor windows\nUsing Installr\n\n#From https://stackoverflow.com/questions/1401904/painless-way-to-install-a-new-version-of-r\n\n# Run in the old version of R (or via RStudio)\nsetwd(\"C:/Temp/\") \npackages <- installed.packages()[,\"Package\"] \nsave(packages, file=\"Rpackages\") \n\n# INSTALL NEW R VERSION\nif(!require(installr)) { install.packages(\"installr\"); require(installr)} #load / install+load installr\n# See here for more on installr: https://www.r-statistics.com/2013/03/updating-r-from-r-on-windows-using-the-installr-package/  \n\n# step by step functions:\ncheck.for.updates.R() # tells you if there is a new version of R or not.\ninstall.R() # download and run the latest R installer... This install.R seems to be a windows only command. \n\n# Install library - run in the new version of R. This calls package names and installs them from repos, thus all packages should be correct to the most recent version\nsetwd(\"C:/Temp/\") \nload(\"Rpackages\") \nfor (p in setdiff(packages, installed.packages()[,\"Package\"])) \ninstall.packages(p) \n\n# Installr includes a package migration tool but this simply copies packages, it does not update them\ncopy.packages.between.libraries() # copy your packages to the newest R installation from the one version before it (if ask=T, it will ask you between which two versions to perform the copying)"
  },
  {
    "objectID": "posts/RStudio_install.html#r-bloglers",
    "href": "posts/RStudio_install.html#r-bloglers",
    "title": "R and Rstudio Install, setup and Package Management",
    "section": "R-bloglers",
    "text": "R-bloglers\n\nHow to Upgrade R Without Losing Your Packages\n\nBefore you upgrade, build a temp file with all of your old packages. Files saved as .rda files.\n\n\n\ntmp <- installed.packages()\ninstalledpkgs <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1])\nsave(installedpkgs, file=\"installed_old.rda\")\n\n\nInstall the new version of R and let it do it’s thing.\nOnce you’ve got the new version up and running, reload the saved packages and re-install them from CRAN.\n\n\nload(\"installed_old.rda\")\ntmp <- installed.packages()\ninstalledpkgs.new <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1])\nmissing <- setdiff(installedpkgs, installedpkgs.new)\ninstall.packages(missing)\nupdate.packages()\n\nNote: If you had any packages from BioConductor, you can update those too!\n\n#Update: 'biocLite' is not available for new versions of R\n\nsource(\"http://bioconductor.org/biocLite.R\")\nchooseBioCmirror()\nbiocLite()\nload(\"installed_old.rda\")\ntmp <- installed.packages()\ninstalledpkgs.new <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1])\nmissing <- setdiff(installedpkgs, installedpkgs.new)\nfor (i in 1:length(missing)) biocLite(missing[i])\n\n\n\n\n\n\n\nAbout bioLite package\n\n\n\n\n\nUpdate: ‘biocLite’ is not available for new versions of R\n\ninstall.packages(\"biocLite\") # Warning in install.packages : package ‘biocLite’ is not available for this version of R\n\nBiocLite is not a thing anymore, it was used in the old versions of Bioconductor to install packages, now you can directly use BiocManager::install().\nFor example:\n\nBiocManager::install(\"limma\")\n\n\n\n\n\n\nSave files as csv or excel .xlsx\n\ncsv files\n\nwrite.csv(data_frame, 'path/to/forder/and/file_name.csv') # or set wd and just type file_name.csv\n\n\n\nexcel files\nConvert first to a data frame.\n\ninstall.packages(\"writexl\")\nlibrary(\"writexl\")\nthe_dataframe_name <- as.data.frame(data)\nwrite_xlsx(the_dataframe_name,\"path/to/folder/and/file_name.xlsx\")"
  },
  {
    "objectID": "posts/RStudio_install.html#upgrading-r-on-windows-and-mac",
    "href": "posts/RStudio_install.html#upgrading-r-on-windows-and-mac",
    "title": "R and Rstudio Install, setup and Package Management",
    "section": "Upgrading R on Windows and Mac",
    "text": "Upgrading R on Windows and Mac\nhttps://www.r-statistics.com/tag/installr/\n\nWindows\nIf you are using Windows you can easily upgrade to the latest version of R using the installr package. Simply run the following code in Rgui:\n\ninstall.packages(\"installr\") # install \nsetInternet2(TRUE) # only for R versions older than 3.3.0\ninstallr::updateR() # updating R.\n# If you wish it to go faster, run: installr::updateR(T)\n\nRunning “updateR()” will detect if there is a new R version available, and if so it will download+install it (etc.). There is also a step by step tutorial (with screenshots) on how to upgrade R on Windows, using the installr package. If you only see the option to upgrade to an older version of R, then change your mirror or try again in a few hours (it usually take around 24 hours for all CRAN mirrors to get the latest version of R).\nAlso chekck the video:\n\n\n\n\n\nMac\nIf you are using Mac you can easily upgrade to the latest version of R using Andrea Cirillo’s updateR package. The package is not on CRAN, so you’ll need to run the following code in Rgui:\n\ninstall.packages(\"devtools\")\ndevtools::install_github(\"AndreaCirilloAC/updateR\")\nupdateR(admin_password = \"PASSWORD\") # Where \"PASSWORD\" stands for your system password\n\nMBP15 The downloaded source packages are in “/private/var/folders/xc/rxn5vywj3lvd_qt78ss92cc80000gn/T/Rtmp8TJvA5/downloaded_packages” MBP20 The downloaded binary packages are in /var/folders/1v/nbx_5tgn553dq8s639lyln5c0000gn/T//Rtmp8AkWwy/downloaded_packages /private/var/folders/1v/nbx_5tgn553dq8s639lyln5c0000gn/T/RtmpP5nIXV/downloaded_packages\nOption 1\nPainless way to install a new version of R?\nFiles are .rda\n\n#--run in the old version of R\nsetwd(\"C:/Temp/\")\npackages <- installed.packages()[,\"Package\"]\nsave(packages, file=\"Rpackages\")\n\n#--run in the new version\nsetwd(\"C:/Temp/\")\nload(\"Rpackages\")\nfor (p in setdiff(packages, installed.packages()[,\"Package\"]))\ninstall.packages(p)\n\n\n#-----\n\n# Just for completeness, you can save your packages in another directory on your computer.\ninstall.packages(\"thepackage\",lib=\"/path/to/directory/with/libraries\")\n#You can change the default .Library value using the function .libPaths too\n.libPaths(\"/path/to/directory/with/libraries\")\n\n# -----\n\n#Finally, You can also include a small code in my Rprofile.site allowing  to reinstall all packages when installing a new R version. You just have to list them up before you update to the new R version by using an .RData file containing an updated list with all packages.\n\nlibrary(utils)\n\n## Check necessary packages\nload(\"G:\\Setinfo\\R\\packagelist.RData\") # includes a vector \"pkgs\"\ninstalled <- pkgs %in% installed.packages()[, 'Package']\nif (length(pkgs[!installed]) >=1){\n  install.packages(pkgs[!installed])\n}\n# I make the packagelist.RData by specifying .Last() in my Rprofile.site. This updates the package list if I installed some :\n\n.Last <- function(){\n  pkgs <- installed.packages()[,1]\n  if (length(pkgs) > length(installed)){\n    save(pkgs,file=\"G:\\Setinfo\\R\\packagelist.RData\")\n  }\n}\n\nOption 2:\nHow to migrate Rstudio files and installed packages ( by version to a new computer )\n\nSave as .csv files.\nOr .xlsx files.\n\n\ngetwd()\nsetwd()\n# /Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/file_name.csv  \n\ninstalled <- as.data.frame(installed.packages())\nwrite.csv(installed, 'installed_previously.csv') # Path/to/folder/installed_previously.csv \ninstalledPreviously <- read.csv('installed_previously.csv') # Path/to/folder/installed_previously.csv \nbaseR <- as.data.frame(installed.packages())\ntoInstall <- setdiff(installedPreviously, baseR)\n\n# the first thing to do would be to make sure that the set of currently installed packages is up-to-date. \n\nupdate.packages(checkBuilt=TRUE, ask=FALSE)  #check spelling of arguments\n  new_pacs <- paste( setdiff( installedPreviously$Package, baseR$Package), \n                       collapse=\",\")\n  install.packages( new_pacs, dependencies=TRUE)\n\n# For excel files, requires: \ninstall.packages(\"writexl\")\nlibrary(\"writexl\")\nwrite_xlsx(the_dataframe_name,\"path/to/folder/file_name.xlsx\")"
  },
  {
    "objectID": "posts/RStudio_install.html#an-efficient-way-to-istall-and-load-r-packages",
    "href": "posts/RStudio_install.html#an-efficient-way-to-istall-and-load-r-packages",
    "title": "R and Rstudio Install, setup and Package Management",
    "section": "An efficient way to istall and load R packages",
    "text": "An efficient way to istall and load R packages\nAn efficient way to install and load R packages\n\n\nInefficient way to install and load R packages:\n\n# Installation of required packages\ninstall.packages(\"tidyverse\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"readxl\")\ninstall.packages(\"dplyr\")\n\n# Load packages\nlibrary(\"tidyverse\")\nlibrary(\"ggplot2\")\nlibrary(\"readxl\")\nlibrary(\"dplyr\")\n\n\n\nMore efficient way\n\n# Package names\npackages <- c(\"ggplot2\", \"readxl\", \"dplyr\", \"tidyr\", ...)\n\n# Install packages not yet installed\ninstalled_packages <- packages %in% rownames(installed.packages())\nif (any(installed_packages == FALSE)) {\n  install.packages(packages[!installed_packages])\n}\n\n# Packages loading\ninvisible(lapply(packages, library, character.only = TRUE))\n\n\n\nMost efficient way\n{pacman} package\nAfter this article was published, a reader informed me about the {pacman} package. After having read the documentation and try it out myself, I learned that the function p_load() from {pacman} checks to see if a package is installed, if not it attempts to install the package and then loads it. It can also be applied to several packages at once, all this in a very condensed way:\n\ninstall.packages(\"pacman\")\n\npacman::p_load(ggplot2, tidyr, dplyr)\n\n## Make sure your current packages are up to date\nupdate.packages()\n## devtools is required\nlibrary(devtools)\ninstall_github(\"trinker/pacman\")\n\nFind more about this package on CRAN. Introduction to the pacman Package in R (3 Examples)\n\n{librarian} package\nLike {pacman}, the shelf() function from the {librarian} package automatically installs, updates, and loads R packages that are not yet installed in a single function. The function accepts packages from CRAN, GitHub, and Bioconductor (only if Bioconductor’s Biobase package is installed). The function also accepts multiple package entries, provided as a comma-separated list of unquoted names (so no “” around package names).\n\nBiobase: Base functions for Bioconductor DOI: 10.18129/B9.bioc.Biobase\nInstallation:\nTo install this package, start R (version “4.2”) and enter:\n\n\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"Biobase\")\n\nLast but not least, the {librarian} package allows to load packages automatically at the start of every R session (thanks to the lib_startup() function) and search for new packages on CRAN by keywords or regular expressions (thanks to the browse_cran() function).\n\nHere is an example of how to install missing packages and load them with the shelf() function:\n\n# From CRAN:\ninstall.packages(\"librarian\")\n\nlibrarian::shelf(ggplot2, DesiQuintans / desiderata, pander)\n\nFor CRAN packages, provide the package name as normal without “” and for GitHub packages, provide the username and package name separated by / (i.e., UserName/RepoName as shown for the desiderata package).\nFind more about this package on CRAN."
  },
  {
    "objectID": "posts/RStudio_install.html#location-of-the-r-packages",
    "href": "posts/RStudio_install.html#location-of-the-r-packages",
    "title": "R and Rstudio Install, setup and Package Management",
    "section": "Location of the R packages",
    "text": "Location of the R packages\n\n\nterminal\n\n#| eval: false\n\n# MBP15: The downloaded source packages are in:\nopen /private/var/folders/xc/rxn5vywj3lvd_qt78ss92cc80000gn/T/Rtmp8TJvA5/downloaded_packages \n\n# MBP20: The downloaded binary packages are in:\n# old: open /private/var/folders/1v/nbx_5tgn553dq8s639lyln5c0000gn/T/Rtmp8AkWwy/downloaded_packages \nopen /private/var/folders/1v/nbx_5tgn553dq8s639lyln5c0000gn/T/RtmpP5nIXV/downloaded_packages"
  },
  {
    "objectID": "posts/RStudio_install.html#comparing-files",
    "href": "posts/RStudio_install.html#comparing-files",
    "title": "R and Rstudio Install, setup and Package Management",
    "section": "Comparing files",
    "text": "Comparing files\nTo compare and find whether two files differ and where, there are a few packages.\n\nlibrary(tools)\nmd5sum(\"path/to/file1\") == md5sum(\"path/to/file2\")\n\nlibrary(diffobj)\ndiffFile(\"path/to/file1\", \"path/to/file2\")   # or `diffChr` if you data is in R already\n\nlibrary(diffr)\ndiffr(\"path/to/file1\", \"path/to/file2\")\n\nses(readLines(\"path/to/file1\"), readLines(\"path/to/file1\"))\n\npackages <- installed.packages()\nstructure(packages)"
  },
  {
    "objectID": "posts/RStudio_install.html#summary",
    "href": "posts/RStudio_install.html#summary",
    "title": "R and Rstudio Install, setup and Package Management",
    "section": "Summary",
    "text": "Summary\nrecap core shell outline synopsis\nUpdate 20230522\n\nSaved installed packages\n\n# Run in the old version of R\n\n# ------\n# 1. Before you upgrade, update all old packages.\n# ------\n\n# A. Update current packages.\nupdate.packages(checkBuilt=TRUE, ask=FALSE)  #check spelling of arguments\n\n# B. Upgrade packages of Bioconductor\n# Install packages from a newer version of Bioconductor.\n# https://www.bioconductor.org/install/ \n\nif (!require(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(version = \"3.16\") # Or the newest version\n\n# ------\n# 2. Before you upgrade: 1. build and save a file with all current packages (old packages) and 2. Backup your rstudio preferences files.  \n# ------\n\n# MBP15: setwd(\"/Users/Marcelo-Rosales/Box Sync/Github/RStudio_shared/R_packages/\")\n# MBP20: setwd(\"~/Box Sync/Github/RStudio_shared/R_packages/\")\n\ngetwd()\n\n# Variables for generic code:\n\n## Create a new folder for packages files\nnew_folder <- \"Rpkgs230522/\" # <----------------change folder name here, don't forget the \"/\".\nfolder <- \"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/\"\ndir.create(paste0(folder,new_folder)) #use paste0(), paste() inserts a space between obj.\n\n## Create the packages list files\nfile_name <- \"Rpkgs_MBP20_230522\" # <------------change file name here.\nrda <- \".rda\"\ncsv <- \".csv\"\ndf <- \"_df\"\nxlsx <- \".xlsx\"\n\nfile1 <- paste0(folder,new_folder,file_name) \nfile2 <- paste0(folder,new_folder,file_name,rda)\nfile3 <- paste0(folder,new_folder,file_name,csv)\nfile4 <- paste0(folder,new_folder,file_name,df,csv)\nfile5 <- paste0(folder,new_folder,file_name,xlsx)\n\nfile1\nfile2\nfile3\nfile4\nfile5\n\n# Generic code: I use this method because it is easy to change the names of the variables in one place once.\n\n## No extension\nRpkgs <- installed.packages()[,\"Package\"] # This is a temp file. \nsave(Rpkgs, file= file1) \nload(file1) # load as values (vector?)\n\n## As .rda file\ntmp <- installed.packages() # save in environment as data (dataframe?)\nRpkgs_rda<- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1]) # save as vector package names.\nsave(Rpkgs_rda, file= file2)\nload(file2)\n\n## As .csv file requires a dataframe.  \n### 1. Only the Package column variable (as vector?), or 2. as full csv data frame.  \nRpkgs_csv <- installed.packages()[,\"Package\"] \nRpkgs_df <- as.data.frame(installed.packages()) \nwrite.csv(Rpkgs_csv, file= file3)\nwrite.csv(Rpkgs_df, file= file4)\n\n## As as excel files also requires a dataframe (df)\n### install.packages(\"writexl\")\nlibrary(\"writexl\")\nRpkgs_df <- as.data.frame(installed.packages()) # same as in df_csv\nwrite_xlsx(Rpkgs_df, file5)\n\n\n\n# Specific code: I do not use this method because requires changing the name of the folder and file in each instance, and paths are also troublesome.\n\nRpkgs_MBP20_230329 <- installed.packages()[,\"Package\"] # save as vector values?\nsave(Rpkgs_MBP20_230329, file=\"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230329/Rpkgs_MBP20_230329\") # Or Rpkgs_MBP20_230329.rda\nload(\"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230329/Rpkgs_MBP20_230329.rda\") # load as values (vector?)\n\n## As .rda file\nRpkgs_MBP20_230329 <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1]) # save as vector package names.\nsave(Rpkgs_MBP20_230329, file=\"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230329/Rpkgs_MBP20_230329.rda\") # save as vector .rda; names... environment: installedpkgs, file: installed_old.rda, but when loaded in environment is back to installedpkgs.  \nload(\"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230329/installed_old.rda\") # In environment is back to installedpkgs.  \n\n## Save as csv requires a dataframe (df)\nRpkgs_MBP20_230329 <- installed.packages()[,\"Package\"] # save only the Package (name) variable as vector values?, still can be save as csv\nwrite.csv(Rpkgs_MBP20_230329, '/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230329/Rpkgs_MBP20_230329.csv')\n\n## Or df with all the info of packages\nRpkgs_MBP20_230329df1 <- as.data.frame(installed.packages())\nwrite.csv(Rpkgs_MBP20_230329df1, '/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230329/Rpkgs_MBP20_230329df1.csv')\n\n# As excel file also requires a dataframe (df)\n# install.packages(\"writexl\")\nlibrary(\"writexl\")\nwrite_xlsx(Rpkgs_MBP20_230329df1,\"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230329/Rpkgs_MBP20_230329df1.xlsx\")\n\n\n# Copy/Paste Rstudio global settings and preferences (~/.config/rstudio/rstudio-prefs.json)\n\n## Open folder \nfolder_path <- \"~/.config/rstudio/\"  # seems like \"~/path\" does not work on rstudio. \nfolder_path <- \"/Users/marcelorosales/.config/rstudio/\"\n\nsystem(paste(\"open\", shQuote(folder_path)))\n\n## Copy a file (direct).\nsource_path <- \"/Users/marcelorosales/.config/rstudio/rstudio-prefs.json\"\ndestination_path <- \"/Users/marcelorosales/Box Sync/Github/RStudio_shared/RS_preferences/\"\n\nfile.copy(source_path, destination_path, overwrite = FALSE)\n\n## Copy a file (indirect). Find the file(s) first.\nfile <- \"rstudio-prefs.json\"\n\nlist.files(folder_path) # list all files in folder\nfind.files <- list.files(folder_path, file) # select a specific file\nfind.files\n\n## copy the files to the new folder\nfile.copy(find.files, destination_path, overwrite = FALSE)\n\n# If: [1] TRUE, file was copied\n# If: [1] FALSE, file was not copied, error might be that the file already exists (change overwrite = TRUE, or paths not correct.)\n# Another way to do it, see Stack overflow 2 section. \n\n# Check if the copy was successful (THis code does not work properly, is )\n\nif (file.exists(paste0(destination_path, file))) {\n  print(\"File copied successfully!\")\n} else {\n  print(\"File copy failed.\")\n}\n\n\n# ------\n# 3. Install the new version of R (use homebrew). See Brew cask upgrade below.\n# ------\n\n#　4. Once the new version up and running, reload the saved packages and re-install them from CRAN.\n\n# run in the new version\n# MBP20: setwd(\"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/\")\n\nload(\"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230329/Rpkgs_MBP20_230329.rda\")  \n\nfor (p in setdiff(RSpacks230324MBP15, installed.packages()[,\"Package\"]))\n  install.packages(p)\n\n\n\nCopy/Paste Rstudio global settings and preferences if necessary.\n\n\nTerminal\n\n#| eval: false\n\n# Copy/Paste Rstudio global settings and preferences.. \nopen ~/.config/rstudio\n\n# Search and Copy file to same place as packages files. \nrstudio-prefs.json\n\nopen ~/.config/rstudio\n\n# Open folder \nfolder_path <- \"~/.config/rstudio/\"  # seems like \"~/path\" does not work on rstudio. \nfolder_path <- \"/Users/marcelorosales/.config/rstudio/\"  \n\nsystem(paste(\"open\", shQuote(folder_path)))\n\n# Copy a file\nsource_path <- \"/Users/marcelorosales/.config/rstudio/rstudio-prefs.json\"\ndestination_path <- \"/Users/marcelorosales/Box Sync/Github/RStudio_shared/RS_preferences/\"\n\nfile.copy(source_path, destination_path)\n\n\n# Check if the copy was successful\nif (file.exists(destination_path)) {\n  print(\"File copied successfully!\")\n} else {\n  print(\"File copy failed.\")\n}\n\n\n\nBrew cask upgrade R and Rstudio.\n\n\n\nTerminal\n\n# Upgrade R and rstudio\nbrew update\nbrew upgrade --cask r\n# password\n#`brew cleanup` has not been run in the last 30 days, running now...\n\n# Upgrade RStudio\nbrew upgrade --cask rstudio\n\n# Copy paste the `rstudio-prefs.json` if needed, usually it still remains after upgrade. \nrstudio-prefs.json"
  },
  {
    "objectID": "posts/RStudio_install.html#errors-and-trouble-shooting.",
    "href": "posts/RStudio_install.html#errors-and-trouble-shooting.",
    "title": "R and Rstudio Install, setup and Package Management",
    "section": "Errors and trouble shooting.",
    "text": "Errors and trouble shooting.\n\nnon-UTF8 locale error in R\nWARNING: You’re using a non-UTF8 locale\n\nWhen opening R new version… an error message is displayed.\n\n\nerror message\n\n#| code-block-bg: false\n#| code-block-border-left: \"#31BAE9\"\n#| eval: false\n\nDuring startup - Warning messages:\n1: Setting LC_CTYPE failed, using \"C\" \n2: Setting LC_COLLATE failed, using \"C\" \n3: Setting LC_TIME failed, using \"C\" \n4: Setting LC_MESSAGES failed, using \"C\" \n5: Setting LC_MONETARY failed, using \"C\" \n[R.app GUI 1.79 (8198) x86_64-apple-darwin17.0]\n\nWARNING: You're using a non-UTF8 locale, therefore only ASCII characters will work.\nPlease read R for Mac OS X FAQ (see Help) section 9 and adjust your system preferences accordingly.\n\nA solution: For english:\n- Installing R on Mac - Warning messages: Setting LC_CTYPE failed, using “C”\n- For Japanese:.\n\n\n\nTerminal\n\ndefaults write org.R-project.R force.LANG en_US.UTF-8  # 英語表示\ndefaults write org.R-project.R force.LANG ja_JP.UTF-8  # 日本語表示\n\n\n\nThere is already an App… (legacy)\nError: It seems there is already an App at ‘/Applications/Rstudio’\nis it possible to override the legacy app when install using brew\nSome times is not possible to install, re-intall or upgrade a program via brew because first installation was made manually (downloaded zip or tar files).\nThis leaves a “legacy” app. To fix it use the --force attribute while installing\nbrew install --cask rstudio --force"
  },
  {
    "objectID": "posts/Quarto_templates.html",
    "href": "posts/Quarto_templates.html",
    "title": "Jolla template",
    "section": "",
    "text": "What do I have to add here?.\n\n  \n \nFinley Malloc is the Chief Data Scientist at Wengo Analytics. When not innovating on data platforms, Finley enjoys spending time unicycling and playing with her pet iguana.\n\n\nUniversity of California, San Diego | San Diego, CA PhD in Mathematics | Sept 2011 - June 2015\nMacalester College | St. Paul MA B.A in Economics | Sept 2007 - June 2011\n\n\n\nWengo Analytics | Head Data Scientist | April 2018 - present\nGeoScynce | Chief Analyst | Sept 2012 - April 2018\n\n \n  \n   \n  \n    \n     twitter\n  \n  \n    \n     Github"
  },
  {
    "objectID": "posts/1stPost.html",
    "href": "posts/1stPost.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is my first post in a trial."
  },
  {
    "objectID": "Lightbox_Example.html",
    "href": "Lightbox_Example.html",
    "title": "Complete Lightbox Example",
    "section": "",
    "text": "An extension that uses the GLightbox javascript library to add lightbox styling and behavior to images in your HTML documents.\nSee quarto-ext/lightbox or the web example at Example lightbox Document at the bottom of this page."
  },
  {
    "objectID": "Lightbox_Example.html#installation",
    "href": "Lightbox_Example.html#installation",
    "title": "Complete Lightbox Example",
    "section": "Installation",
    "text": "Installation\nTo install this extension in your current directory (or into the Quarto project that you’re currently working in), use the following command:\nquarto add quarto-ext/lightbox"
  },
  {
    "objectID": "Lightbox_Example.html#usage",
    "href": "Lightbox_Example.html#usage",
    "title": "Complete Lightbox Example",
    "section": "Usage",
    "text": "Usage\nThe Lightbox extension is implemented as a filter in Quarto. Once installed, using the extension is easy.\n\nApply To Images Automatically\nThe Lightbox extension can automatically give images in your web page a lightbox treatment. You can enable this like:\n---\ntitle: Simple Lightbox Example\nfilters:\n   - lightbox\nlightbox: auto\n---\n\n![A Lovely Image](mv-1.jpg)\nYou can exclude an image from receiving this automatic treatment by giving it a nolightbox class, like so:\n![Don't lightbox me!](mv-1.jpg){.nolightbox}\n\n\nChoose Specific Images\n\nAdd lightbox to the list of filters in your _quarto.yml file or your document front matter. For example:\n\n---\ntitle: Simple Lightbox Example\nfilters:\n   - lightbox\n---\n\nAdd the class lightbox to any images that you’d like to have the lightbox treatment. For example:\n\n---\ntitle: Simple Lightbox Example\nfilters:\n   - lightbox\n---\n\n![A Lovely Image](mv-1.jpg){.lightbox}"
  },
  {
    "objectID": "Lightbox_Example.html#galleries",
    "href": "Lightbox_Example.html#galleries",
    "title": "Complete Lightbox Example",
    "section": "Galleries",
    "text": "Galleries\nIn addition to simply providing a lightbox treatment for individual images, you can also group images into a ‘gallery’. When the user activates the lightbox, they will be able to page through the images in the gallery without returning to the main document. To create galleries of images, apply a group attribute (with a name) to the images that you’d like to gather into a gallery. Images with the same group name will be placed together in a gallery when given a lightbox treatment.\nFor example, the following three images will be treated as a gallery:\n![A Lovely Image](mv-1.jpg){group=\"my-gallery\"}\n\n![Another Lovely Image](mv-2.jpg){group=\"my-gallery\"}\n\n![The Last Lovely Image](mv-3.jpg){group=\"my-gallery\"}"
  },
  {
    "objectID": "Lightbox_Example.html#global-options",
    "href": "Lightbox_Example.html#global-options",
    "title": "Complete Lightbox Example",
    "section": "Global Options",
    "text": "Global Options\nThe following options may be specified in the front matter for lightbox:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nmatch\nSet this to auto if you’d like any image to be given lightbox treatment. If you omit this, only images with the class lightbox will be given the lightbox treatment.\n\n\neffect\nThe effect that should be used when opening and closing the lightbox. One of fade, zoom, none. Defaults to zoom.\n\n\ndesc-position\nThe position of the title and description when displaying a lightbox. One of top, bottom, left, right. Defaults to bottom.\n\n\nloop\nWhether galleries should ‘loop’ to first image in the gallery if the user continues past the last image of the gallery. Boolean that defaults to true.\n\n\ncss-class\nA class name to apply to the lightbox to allow css targeting. This will replace the lightbox class with your custom class name.\n\n\n\nA complete example:\n---\ntitle: Complete Lightbox Example\nfilters:\n  - lightbox\nlightbox:\n  match: auto\n  effect: fade\n  desc-position: right\n  loop: false\n  css-class: \"my-css-class\" #only if custom css file exists.\n---"
  },
  {
    "objectID": "Lightbox_Example.html#per-image-attributes",
    "href": "Lightbox_Example.html#per-image-attributes",
    "title": "Complete Lightbox Example",
    "section": "Per Image Attributes",
    "text": "Per Image Attributes\nThe following options may be specified as attributes on individual images to control the lightbox behavior:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\ndesc-position\nThe position of the title and description when displaying a lightbox. One of top, bottom, left, right. Defaults to bottom"
  },
  {
    "objectID": "Lightbox_Example.html#using-lightbox-with-computation-cells",
    "href": "Lightbox_Example.html#using-lightbox-with-computation-cells",
    "title": "Complete Lightbox Example",
    "section": "Using lightbox with computation cells",
    "text": "Using lightbox with computation cells\nOptions for lightbox can be passed using chunk option lightbox like the following:\n#| fig-cap: Simple demo R plot \n#| lightbox:\n#|   group: r-graph\n#|   description: This is 1 to 10 plot\nplot(1:10, rnorm(10))\nIt is possible to create several plots, and group them in a lightbox gallery. Use list in YAML for options when you have several plots, on per plot.\n::: {.cell lightbox='{\"group\":\"cars\",\"description\":[\"This is the decription for first graph\",\"This is the decription for second graph\"]}'}\n\n```{.r .cell-code}\nplot(mtcars)\n```\n\n::: {.cell-output-display}\n![Caption for first plot](Lightbox_Example_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(cars)\n```\n\n::: {.cell-output-display}\n![Caption for second plot](Lightbox_Example_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n:::\nWhen lightbox: auto is in main YAML config, you can opt-out lightbox on a plot by setting lightbox: false When lightbox: auto is not set, you can opt-in for lightbox on a specific plot by setting lightbox: true or by setting lightbox with some options."
  },
  {
    "objectID": "Lightbox_Example.html#example",
    "href": "Lightbox_Example.html#example",
    "title": "Complete Lightbox Example",
    "section": "Example",
    "text": "Example\nHere is the source code for a minimal example: example.qmd\nThis is the output of example.qmd."
  },
  {
    "objectID": "Lightbox_Example.html#chilmark",
    "href": "Lightbox_Example.html#chilmark",
    "title": "Complete Lightbox Example",
    "section": "Chilmark",
    "text": "Chilmark\nHere is a simple image with a description. This also overrides the description position and places it to the left of the image.\n\n\n\nBeach in Chilmark"
  },
  {
    "objectID": "Lightbox_Example.html#elsewhere",
    "href": "Lightbox_Example.html#elsewhere",
    "title": "Complete Lightbox Example",
    "section": "Elsewhere",
    "text": "Elsewhere\nThe below demonstrates placing more than one image in a gallery. Note the usage of the layout-ncol which arranges the images on the page side by date. Adding the group attribute to the markdown images places the images in a gallery grouped together based upon the group name provided.\n\n\n\n\n\nAquinnah\n\n\n\n\n\nOak Bluffs\n\n\n\n\n\n\n\nVineyard lighthouse"
  },
  {
    "objectID": "Lightbox_Example.html#with-computation-code-chunks",
    "href": "Lightbox_Example.html#with-computation-code-chunks",
    "title": "Complete Lightbox Example",
    "section": "With computation code chunks",
    "text": "With computation code chunks\nOptions for lightbox can be passed using chunk options.\n\n\nCode\nplot(1:10, rnorm(10))\n\n\n\n\n\nSimple demo R plot\n\n\n\n\n\n\nCode\nplot(cars)\n\n\n\n\n\nPlot about cars data\n\n\n\n\nIt is possible to create several plots, and group them in a lightbox gallery. Use list in YAML for options when you have several plots, on per plot.\n\n\nCode\nplot(mtcars)\n\n\n\n\n\nCaption for first plot\n\n\n\n\nCode\nplot(cars)\n\n\n\n\n\nCaption for second plot\n\n\n\n\nWhen lightbox: auto in main YAML config, you can opt-out lightbox on a plot by setting lightbox: false\n\n\nCode\nplot(mtcars)\n\n\n\n\n\nmtcars"
  },
  {
    "objectID": "Lightbox_Example.html#credits",
    "href": "Lightbox_Example.html#credits",
    "title": "Complete Lightbox Example",
    "section": "Credits",
    "text": "Credits\nThe images in this example were used under the Unsplash license, view originals below:\n\nChilmark Beach\nAquinnah\nGingerbread House\nEdgartown Light\nEdgartown Sailboat"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R&D Notation",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\nThe choice between using Quarto and simple R Markdown depends on the specific needs and requirements of your project. Here are a few reasons why you might consider using Quarto:\n\nEnhanced functionality: Quarto offers additional features and functionality compared to simple R Markdown. It provides support for literate programming, version control, customizable templates, and more. If you require advanced capabilities for your project, such as generating reports with complex formatting, incorporating interactive elements, or integrating code and documentation seamlessly, Quarto can be a powerful tool.\nDocument generation and collaboration: Quarto is designed for collaborative document generation, making it easier for teams to work together on projects. It provides features like automated rendering, document caching, and document diffing, which can facilitate collaboration and streamline the document development process.\nExtensibility: Quarto allows for extensibility through custom engines, allowing you to integrate additional programming languages or document formats into your project. This flexibility can be beneficial if you need to incorporate non-R code or work with specific document formats beyond what simple R Markdown offers.\nCommunity and support: Quarto has an active community of users and developers who contribute to its development and provide support. If you encounter any issues or have questions, you can rely on community resources to find assistance and guidance.\n\nHowever, it’s important to note that simple R Markdown is still a powerful and widely used tool for generating documents with R. If your project requirements are straightforward and don’t require the additional features provided by Quarto, using simple R Markdown may be sufficient and more straightforward. Ultimately, the choice between Quarto and simple R Markdown should be based on your specific project needs, preferences, and the complexity of the document you aim to generate.\n\n\nProblem 1: Notebook keeping.\nExperimental notes are distributed in many different folders and files; sometimes even in different drives and it is difficult to keep track of all information. A centralized direct access to information at any time is required.\nThe standard way to do it is by using Microsoft Office programs\nWord:\nPros:\n\nBest way to manage “tables” within text editor.\n\nInter-compatibility with word, excel, ppt and other programs.\n\nEasy to send and collaborate with others.\n\nThe Standard for all purposes.\n\nCons:\n\nFile size gets too big very fast.\n\nimages and links slows down computer.\n\nFiles are scatter all around different folders, hard to manage.\n\nNo easy way to compile information across projects and experiments.\n\nProblem 2: Software and code management.\n\nCode management is a serious problem, word cannot manage it at all.\n\n\nSoftware:\n\nbrew to install all research software.\n\nMS Office\n\nR and RStudio\n\nVS Code\n\nQuarto\n\nZotero\n\nAnaconda\n\nGit\n\nGitHub\n\nGit Kraken\n\nImageJ\n\nCalibre\n\nDigiKam\n\nDocker?\n\nSyncthing\n\nFreeCad\n\nBlender\n\n\nSmall digression: Think on the possibility of a centrilized Folder for all notes, word, r, qmd, pyton, bash, and using symlinks to move and compile projects (like a puzzle) to create new content.\n\n\nWhy I am changeing to quarto?"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Marcelo",
    "section": "",
    "text": "1 + 1\n\nHere I use the quarto template trestles and place the yaml label in this files yml.\nInterestingly, if in the _quarto.yml nav code is like\n\nnavbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd # No href not text, directly the file name. \n      - href: Lightbox_Example.qmd\n        text: Lightbox\n\nThe title will change the name of nav tab, even if in the _quarto.yml is label “About”, but only while in this page. The tab will display the title of this file’s yml, but when not in this file, the nav tab label will revert to the label from the _quarto.yml file.\nI found usefull information in this pages:\n- Creating your personal website using quarto\ntype / to add content.\nonce I save the content then it will appear on page.\nNo!, it will appear when I saved and reload page."
  },
  {
    "objectID": "about.html#other-comments",
    "href": "about.html#other-comments",
    "title": "Marcelo",
    "section": "## Other comments",
    "text": "## Other comments"
  },
  {
    "objectID": "files/Software/RStudio/R_install.html",
    "href": "files/Software/RStudio/R_install.html",
    "title": "RStudio Install",
    "section": "",
    "text": "install"
  },
  {
    "objectID": "files/Software/RStudio/R_install.html#another-subtitle.",
    "href": "files/Software/RStudio/R_install.html#another-subtitle.",
    "title": "RStudio Install",
    "section": "Another subtitle.",
    "text": "Another subtitle."
  },
  {
    "objectID": "files/Software/RStudio/R_Packages.html",
    "href": "files/Software/RStudio/R_Packages.html",
    "title": "R Packages",
    "section": "",
    "text": "How to manage Packes."
  },
  {
    "objectID": "files/Software/RStudio/R_Packages.html#another-subtitle.",
    "href": "files/Software/RStudio/R_Packages.html#another-subtitle.",
    "title": "R Packages",
    "section": "Another subtitle.",
    "text": "Another subtitle.\nText"
  },
  {
    "objectID": "files/Software/index.html",
    "href": "files/Software/index.html",
    "title": "Software",
    "section": "",
    "text": "All related to Software\nSoftware used:\n\nRStudio\nGit\nImageJ\nAnalyze12\n\nInfo and How to’s.\nplot(pressure)\nsystem(paste(\"open\", shQuote(Markdown02)))"
  },
  {
    "objectID": "files/Software/Analyze12/index.html",
    "href": "files/Software/Analyze12/index.html",
    "title": "Analyze12",
    "section": "",
    "text": "Landing…"
  },
  {
    "objectID": "files/Software/Analyze12/index.html#another-subtitle.",
    "href": "files/Software/Analyze12/index.html#another-subtitle.",
    "title": "Analyze12",
    "section": "Another subtitle.",
    "text": "Another subtitle."
  },
  {
    "objectID": "files/Software/Analyze12/Analyze12_install.html",
    "href": "files/Software/Analyze12/Analyze12_install.html",
    "title": "Analyze12 Install",
    "section": "",
    "text": "install"
  },
  {
    "objectID": "files/Software/Analyze12/Analyze12_install.html#another-subtitle.",
    "href": "files/Software/Analyze12/Analyze12_install.html#another-subtitle.",
    "title": "Analyze12 Install",
    "section": "Another subtitle.",
    "text": "Another subtitle."
  },
  {
    "objectID": "files/Software/Analyze12/Analyze12_Packages.html",
    "href": "files/Software/Analyze12/Analyze12_Packages.html",
    "title": "Analyze12 Packages",
    "section": "",
    "text": "How to manage Packes."
  },
  {
    "objectID": "files/Software/Analyze12/Analyze12_Packages.html#another-subtitle.",
    "href": "files/Software/Analyze12/Analyze12_Packages.html#another-subtitle.",
    "title": "Analyze12 Packages",
    "section": "Another subtitle.",
    "text": "Another subtitle.\nText"
  },
  {
    "objectID": "files/Software/ImageJ/ImgJ_Packages.html",
    "href": "files/Software/ImageJ/ImgJ_Packages.html",
    "title": "ImageJ_Package",
    "section": "",
    "text": "How to manage Packes."
  },
  {
    "objectID": "files/Software/ImageJ/ImgJ_Packages.html#another-subtitle.",
    "href": "files/Software/ImageJ/ImgJ_Packages.html#another-subtitle.",
    "title": "ImageJ_Package",
    "section": "Another subtitle.",
    "text": "Another subtitle.\nText"
  },
  {
    "objectID": "files/Software/ImageJ/ImgJ_install.html",
    "href": "files/Software/ImageJ/ImgJ_install.html",
    "title": "ImageJ Install",
    "section": "",
    "text": "install"
  },
  {
    "objectID": "files/Software/ImageJ/ImgJ_install.html#another-subtitle.",
    "href": "files/Software/ImageJ/ImgJ_install.html#another-subtitle.",
    "title": "ImageJ Install",
    "section": "Another subtitle.",
    "text": "Another subtitle."
  },
  {
    "objectID": "posts/Lightbox_Example.html",
    "href": "posts/Lightbox_Example.html",
    "title": "Complete Lightbox Example",
    "section": "",
    "text": "An extension that uses the GLightbox javascript library to add lightbox styling and behavior to images in your HTML documents.\nSee quarto-ext/lightbox or the web example at Example lightbox Document at the bottom of this page."
  },
  {
    "objectID": "posts/Lightbox_Example.html#installation",
    "href": "posts/Lightbox_Example.html#installation",
    "title": "Complete Lightbox Example",
    "section": "Installation",
    "text": "Installation\nTo install this extension in your current directory (or into the Quarto project that you’re currently working in), use the following command:\n# Run this command in terminal, will install the extension inside the project folder itself. It is required for function of lightbox.\n\nquarto add quarto-ext/lightbox"
  },
  {
    "objectID": "posts/Lightbox_Example.html#usage",
    "href": "posts/Lightbox_Example.html#usage",
    "title": "Complete Lightbox Example",
    "section": "Usage",
    "text": "Usage\nThe Lightbox extension is implemented as a filter in Quarto. Once installed, using the extension is easy.\n\nApply To Images Automatically\nThe Lightbox extension can automatically give images in your web page a lightbox treatment. You can enable this like:\n---\ntitle: Simple Lightbox Example\nfilters:\n   - lightbox\nlightbox: auto\n---\n\n![A Lovely Image](mv-1.jpg)\nYou can exclude an image from receiving this automatic treatment by giving it a nolightbox class, like so:\n![Don't lightbox me!](mv-1.jpg){.nolightbox}\n\n\nChoose Specific Images\n\nAdd lightbox to the list of filters in your _quarto.yml file or your document front matter. For example:\n\n---\ntitle: Simple Lightbox Example\nfilters:\n   - lightbox\n---\n\nAdd the class lightbox to any images that you’d like to have the lightbox treatment. For example:\n\n---\ntitle: Simple Lightbox Example\nfilters:\n   - lightbox\n---\n\n![A Lovely Image](mv-1.jpg){.lightbox}"
  },
  {
    "objectID": "posts/Lightbox_Example.html#galleries",
    "href": "posts/Lightbox_Example.html#galleries",
    "title": "Complete Lightbox Example",
    "section": "Galleries",
    "text": "Galleries\nIn addition to simply providing a lightbox treatment for individual images, you can also group images into a ‘gallery’. When the user activates the lightbox, they will be able to page through the images in the gallery without returning to the main document. To create galleries of images, apply a group attribute (with a name) to the images that you’d like to gather into a gallery. Images with the same group name will be placed together in a gallery when given a lightbox treatment.\nFor example, the following three images will be treated as a gallery:\n![A Lovely Image](mv-1.jpg){group=\"my-gallery\"}\n\n![Another Lovely Image](mv-2.jpg){group=\"my-gallery\"}\n\n![The Last Lovely Image](mv-3.jpg){group=\"my-gallery\"}"
  },
  {
    "objectID": "posts/Lightbox_Example.html#global-options",
    "href": "posts/Lightbox_Example.html#global-options",
    "title": "Complete Lightbox Example",
    "section": "Global Options",
    "text": "Global Options\nThe following options may be specified in the front matter for lightbox:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nmatch\nSet this to auto if you’d like any image to be given lightbox treatment. If you omit this, only images with the class lightbox will be given the lightbox treatment.\n\n\neffect\nThe effect that should be used when opening and closing the lightbox. One of fade, zoom, none. Defaults to zoom.\n\n\ndesc-position\nThe position of the title and description when displaying a lightbox. One of top, bottom, left, right. Defaults to bottom.\n\n\nloop\nWhether galleries should ‘loop’ to first image in the gallery if the user continues past the last image of the gallery. Boolean that defaults to true.\n\n\ncss-class\nA class name to apply to the lightbox to allow css targeting. This will replace the lightbox class with your custom class name.\n\n\n\nA complete example:\n---\ntitle: Complete Lightbox Example\nfilters:\n  - lightbox\nlightbox:\n  match: auto\n  effect: fade\n  desc-position: right\n  loop: false\n  css-class: \"my-css-class\" #only if custom css file exists.\n---"
  },
  {
    "objectID": "posts/Lightbox_Example.html#per-image-attributes",
    "href": "posts/Lightbox_Example.html#per-image-attributes",
    "title": "Complete Lightbox Example",
    "section": "Per Image Attributes",
    "text": "Per Image Attributes\nThe following options may be specified as attributes on individual images to control the lightbox behavior:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\ndesc-position\nThe position of the title and description when displaying a lightbox. One of top, bottom, left, right. Defaults to bottom"
  },
  {
    "objectID": "posts/Lightbox_Example.html#using-lightbox-with-computation-cells",
    "href": "posts/Lightbox_Example.html#using-lightbox-with-computation-cells",
    "title": "Complete Lightbox Example",
    "section": "Using lightbox with computation cells",
    "text": "Using lightbox with computation cells\nOptions for lightbox can be passed using chunk option lightbox like the following:\n#| fig-cap: Simple demo R plot \n#| lightbox:\n#|   group: r-graph\n#|   description: This is 1 to 10 plot\nplot(1:10, rnorm(10))\nIt is possible to create several plots, and group them in a lightbox gallery. Use list in YAML for options when you have several plots, on per plot.\n#| fig-cap: \n#|   - Caption for first plot\n#|   - Caption for second plot\n#| lightbox: \n#|   group: cars\n#|   description: \n#|     - This is the decription for first graph\n#|     - This is the decription for second graph\nplot(mtcars)\nplot(cars)\nWhen lightbox: auto is in main YAML config, you can opt-out lightbox on a plot by setting lightbox: false When lightbox: auto is not set, you can opt-in for lightbox on a specific plot by setting lightbox: true or by setting lightbox with some options."
  },
  {
    "objectID": "posts/Lightbox_Example.html#example",
    "href": "posts/Lightbox_Example.html#example",
    "title": "Complete Lightbox Example",
    "section": "Example",
    "text": "Example\nHere is the source code for a minimal example: example.qmd\nThis is the output of example.qmd."
  },
  {
    "objectID": "posts/Lightbox_Example.html#chilmark",
    "href": "posts/Lightbox_Example.html#chilmark",
    "title": "Complete Lightbox Example",
    "section": "Chilmark",
    "text": "Chilmark\nHere is a simple image with a description. This also overrides the description position and places it to the left of the image.\n\n\n\nBeach in Chilmark"
  },
  {
    "objectID": "posts/Lightbox_Example.html#elsewhere",
    "href": "posts/Lightbox_Example.html#elsewhere",
    "title": "Complete Lightbox Example",
    "section": "Elsewhere",
    "text": "Elsewhere\nThe below demonstrates placing more than one image in a gallery. Note the usage of the layout-ncol which arranges the images on the page side by date. Adding the group attribute to the markdown images places the images in a gallery grouped together based upon the group name provided.\n\n\n\n\n\nAquinnah\n\n\n\n\n\nOak Bluffs\n\n\n\n\n\n\n\nVineyard lighthouse"
  },
  {
    "objectID": "posts/Lightbox_Example.html#with-computation-code-chunks",
    "href": "posts/Lightbox_Example.html#with-computation-code-chunks",
    "title": "Complete Lightbox Example",
    "section": "With computation code chunks",
    "text": "With computation code chunks\nOptions for lightbox can be passed using chunk options.\n\n\nCode\nplot(1:10, rnorm(10))\n\n\n\n\n\nSimple demo R plot\n\n\n\n\n\n\nCode\nplot(cars)\n\n\n\n\n\nPlot about cars data\n\n\n\n\nIt is possible to create several plots, and group them in a lightbox gallery. Use list in YAML for options when you have several plots, on per plot.\n\n\nCode\nplot(mtcars)\n\n\n\n\n\nCaption for first plot\n\n\n\n\nCode\nplot(cars)\n\n\n\n\n\nCaption for second plot\n\n\n\n\nWhen lightbox: auto in main YAML config, you can opt-out lightbox on a plot by setting lightbox: false\n\n\nCode\nplot(mtcars)\n\n\n\n\n\nmtcars"
  },
  {
    "objectID": "posts/Lightbox_Example.html#credits",
    "href": "posts/Lightbox_Example.html#credits",
    "title": "Complete Lightbox Example",
    "section": "Credits",
    "text": "Credits\nThe images in this example were used under the Unsplash license, view originals below:\n\nChilmark Beach\nAquinnah\nGingerbread House\nEdgartown Light\nEdgartown Sailboat"
  },
  {
    "objectID": "posts/Lightbox_Example.html#lightbox",
    "href": "posts/Lightbox_Example.html#lightbox",
    "title": "Complete Lightbox Example",
    "section": "Lightbox",
    "text": "Lightbox\nAn extension that uses the GLightbox javascript library to add lightbox styling and behavior to images in your HTML documents.\nSee quarto-ext/lightbox or the web example at Example lightbox Document at the bottom of this page."
  },
  {
    "objectID": "files/Notes_2do/index.html#to-do",
    "href": "files/Notes_2do/index.html#to-do",
    "title": "Notes&2do",
    "section": "To do:",
    "text": "To do:\n\nCode Notation\nDifferent ways for code notation in code block. describe how to correctly use it in qmd and vscode\n---\nformat: \n  html: \n    code-fold: true\n    code-copy: true\n    code-overflow: wrap\n\n---\n---\ntitle: Simple Lightbox Example\nfilters:\n   - lightbox\nlightbox: auto\n---\n\n![A Lovely Image](mv-1.jpg)\n![A Lovely Image](mv-1.jpg){group=\"my-gallery\"}\n\n![Another Lovely Image](mv-2.jpg){group=\"my-gallery\"}\n\n![The Last Lovely Image](mv-3.jpg){group=\"my-gallery\"}\n``` markdown\n```{.r}\n#| fig-cap: \n#|   - Caption for first plot\n#|   - Caption for second plot\n#| lightbox: \n#|   group: cars\n#|   description: \n#|     - This is the decription for first graph\n#|     - This is the decription for second graph\nplot(mtcars)\nplot(cars)\n`\n\n\nSymlinks in Git\nWant to make simlinks to the blog files so I do not repeat files (copy/paste, etc)\n~/.dotfiles in 100 Seconds\n\n\nGit Bare Repository - A Better Way To Manage Dotfiles\n\nGit-Bash Windows and Symlinks [OLD]"
  },
  {
    "objectID": "files/Notes_2do/index.html#code-notation",
    "href": "files/Notes_2do/index.html#code-notation",
    "title": "Notes&2do",
    "section": "Code Notation",
    "text": "Code Notation\n---\nformat: \n  html: \n    code-fold: true\n    code-copy: true\n    code-overflow: wrap\n\n---\n---\ntitle: Simple Lightbox Example\nfilters:\n   - lightbox\nlightbox: auto\n---\n\n![A Lovely Image](mv-1.jpg)\n![A Lovely Image](mv-1.jpg){group=\"my-gallery\"}\n\n![Another Lovely Image](mv-2.jpg){group=\"my-gallery\"}\n\n![The Last Lovely Image](mv-3.jpg){group=\"my-gallery\"}\n::: {.cell lightbox='{\"group\":\"cars\",\"description\":[\"This is the decription for first graph\",\"This is the decription for second graph\"]}'}\n\n```{.r .cell-code}\nplot(mtcars)\n```\n\n::: {.cell-output-display}\n![Caption for first plot](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(cars)\n```\n\n::: {.cell-output-display}\n![Caption for second plot](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n:::"
  },
  {
    "objectID": "files/Notes_2do/index.html#temp",
    "href": "files/Notes_2do/index.html#temp",
    "title": "Notes&2do",
    "section": "Temp:",
    "text": "Temp:"
  },
  {
    "objectID": "index.html#intent",
    "href": "index.html#intent",
    "title": "R&D Notation",
    "section": "Intent",
    "text": "Intent\nProblem 1: Notebook keeping.\nExperimental notes are distributed in many different folders and files; sometimes even in different drives and it is difficult to keep track of all information. A centralized direct access to information at any time is required.\nThe standard way to do it is by using Microsoft Office programs\nWord:\nPros:\n\nBest way to manage “tables” within text editor.\n\nInter-compatibility with word, excel, ppt and other programs.\n\nEasy to send and collaborate with others.\n\nThe Standard for all purposes.\n\nCons:\n\nFile size gets too big very fast.\n\nimages and links slows down computer.\n\nFiles are scatter all around different folders, hard to manage.\n\nNo easy way to compile information across projects and experiments.\n\nProblem 2: Software and code management.\n\nCode management is a serious problem, word cannot manage it at all.\n\n\nSoftware:\n\nbrew to install all research software.\n\nMS Office\n\nR and RStudio\n\nVS Code\n\nQuarto\n\nZotero\n\nAnaconda\n\nGit\n\nGitHub\n\nGit Kraken\n\nImageJ\n\nCalibre\n\nDigiKam\n\nDocker?\n\nSyncthing\n\nFreeCad\n\nBlender\n\n\nSmall digression: Think on the possibility of a centrilized Folder for all notes, word, r, qmd, pyton, bash, and using symlinks to move and compile projects (like a puzzle) to create new content.\n\n\nWhy I am changeing to quarto?"
  },
  {
    "objectID": "index.html#quarto",
    "href": "index.html#quarto",
    "title": "quarto_website",
    "section": "Quarto",
    "text": "Quarto\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\nThe choice between using Quarto and simple R Markdown depends on the specific needs and requirements of your project. Here are a few reasons why you might consider using Quarto:\n\nEnhanced functionality: Quarto offers additional features and functionality compared to simple R Markdown. It provides support for literate programming, version control, customizable templates, and more. If you require advanced capabilities for your project, such as generating reports with complex formatting, incorporating interactive elements, or integrating code and documentation seamlessly, Quarto can be a powerful tool.\nDocument generation and collaboration: Quarto is designed for collaborative document generation, making it easier for teams to work together on projects. It provides features like automated rendering, document caching, and document diffing, which can facilitate collaboration and streamline the document development process.\nExtensibility: Quarto allows for extensibility through custom engines, allowing you to integrate additional programming languages or document formats into your project. This flexibility can be beneficial if you need to incorporate non-R code or work with specific document formats beyond what simple R Markdown offers.\nCommunity and support: Quarto has an active community of users and developers who contribute to its development and provide support. If you encounter any issues or have questions, you can rely on community resources to find assistance and guidance.\n\nHowever, it’s important to note that simple R Markdown is still a powerful and widely used tool for generating documents with R. If your project requirements are straightforward and don’t require the additional features provided by Quarto, using simple R Markdown may be sufficient and more straightforward. Ultimately, the choice between Quarto and simple R Markdown should be based on your specific project needs, preferences, and the complexity of the document you aim to generate."
  },
  {
    "objectID": "index.html#solutions",
    "href": "index.html#solutions",
    "title": "R&D Notation",
    "section": "Solutions:",
    "text": "Solutions:\nkey Shortcuts: Files: Excel best tricks.xlsx; Markdown02.docx\n\nNotekeeping:\n1. Save all notes in one place.\n/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes, then symlik to other projects.\n\nDoes symlinks work with github, syncthing, synology, host (hostinger), etc?\nWhich type of symlik is best? soft or hard?\n\n2. Files and folders:\n/Users/marcelorosales/Box Sync/Github\n\nDotFiles: What are dotfiles? To create executable file to install all programs ex. brew.sh and settings at once with one executable command.\n\nconda shells\niTerm: Fonts\n\nGitBooks: What are Gitbooks?\nmkdocs\nNiigataU-Carving: html\nQuarto (VS and R)\nRstudio: Shared files among devices\nVisual Studio Code\n\n/Users/marcelorosales/Box Sync/Documents/R\n\nCourse01-R Programming A-Z\n\nCourse02- R Programing - Advanced Analitics\n\nR Bookdown\n\nR Example scripts\n\nR exmple df\n\nR external sources\n\nR package files\n\nR Preferences and packages\n\nRmarkdown\n\nTests forlder\n\nWorking Directory\n\nMBP20 files: /Users/marcelorosales/Documents/GitHub:\n\nBioinformatics_RNA-seq (Gitbook)**\n\nCarving (HTML web page made entirely manually)\n\nDotFiles (Empty) x\n\nExample (Hugo Site trial01, empty) x\n\nImg (RNA analysis image samples)\n\nMkdocs_books (Trial site with 1 symlink file from /Box Sync/Github/mkdocs/bs4_LabNotes/ _book/08-Preparation.md) *\n\nmkdocs_Tests (Trial of submenus in mkdocs) x\n\nMkDocsTest1 (Trial of mkdocs multilingual feature, VS_code,md, MkDocs,md) *\n\nQuarto:\n\nquarto-tip-a-day (webpage downloaded from quarto site)\n\nquarto-trials:\n\nquarto_blog\n\nquarto_book\n\nquarto_project\n\nquarto_website (Quarto page test01, https://marcelorosales.github.io/Quarto_website_test01/) +++\n\n\nquarto-web (Downloaded entire quarto web site)\n\nResearch_Experiments:\n\nPhotoConvertibleCells (Example only, no content)\n\n\nResearch_Notebook: (Experiment Notebooks, All reseach Notes, https://marcelorosales.github.io/Research_Notebook/ )\n\nRetrolog (Hugo lithium) x\n\nTemptests (RNA Seq for STAT3 example of RNA sequencing) **\n\nVS Code (VS code cheat sheets) *\n\nZdocTest1 (Zdoc-blogdown test) x\n\nzipfiles\n\nHugotree.docx\n\nResearch_Notebook.Rmd (Research Notes, Research Notebook) **\n\nMBP15 files:\nSynology files:\nGithub pages:\nMarceloRosales/MkDocsTest1\nMarceloRosales/Research_Notebook\nMarceloRosales/mkd_LabNotes\nMarceloRosales/Bioinformatics_RNA-seq\nMarceloRosales/NiigataU-SV\nMarceloRosales/Carving\nMarceloRosales/MarceloRosales ¿???\nMarceloRosales/PCC-Experiment\nMarceloRosales/RBD02\nMarceloRosales/NiigataU-Carving\nMarceloRosales/RBlogdowntest01\nMarceloRosales/WebDev-01\nMarceloRosales/BootstrapCarrousel\nMarceloRosales/staticrypt\nMkDocsTest1 https://marcelorosales.github.io/MkDocsTest1/MkDocs/\nResearch_Notebook https://marcelorosales.github.io/Research_Notebook/\nmkd_LabNotes https://marcelorosales.github.io/mkd_LabNotes/\nBioinformatics_RNA-seq https://marcelorosales.github.io/Bioinformatics_RNA-seq/\nNiigataU-SV https://marcelorosales.github.io/NiigataU-SV/\nCarving https://marcelorosales.github.io/Carving/\nMarceloRosales ¿?? PCC-Experiment https://marcelorosales.github.io/PCC-Experiment/\nRBD02 https://marcelorosales.github.io/RBD02/ A minimal book ex.\nNiigataU-Carving https://marcelorosales.github.io/NiigataU-Carving/\nRBlogdowntest01 (not live) WebDev-01 https://marcelorosales.github.io/WebDev-01/\nBootstrapCarrousel https://marcelorosales.github.io/BootstrapCarrousel/\nStaticrypt (exec only)\n\n\n\nMarceloRosales/MkDocsTest1\n>\nMkDocsTest1 https://marcelorosales.github.io/MkDocsTest1/MkDocs/\n\n\nMarceloRosales/Research_Notebook\n>\nResearch_Notebook https://marcelorosales.github.io/Research_Notebook/\n\n\nMarceloRosales/mkd_LabNotes\n>\nmkd_LabNotes https://marcelorosales.github.io/mkd_LabNotes/\n\n\nMarceloRosales/Bioinformatics_RNA-seq\n>\nBioinformatics_RNA-seq https://marcelorosales.github.io/Bioinformatics_RNA-seq/\n\n\nMarceloRosales/NiigataU-SV\n>\nNiigataU-SV https://marcelorosales.github.io/NiigataU-SV/\n\n\nMarceloRosales/Carving\n>\nCarving https://marcelorosales.github.io/Carving/\n\n\nMarceloRosales/MarceloRosales ¿???\n>\n<MarceloRosales ¿??>\n\n\nMarceloRosales/PCC-Experiment\n>\nPCC-Experiment https://marcelorosales.github.io/PCC-Experiment/\n\n\nMarceloRosales/RBD02\n>\nRBD02 <https://marcelorosales.github.io/RBD02/ A minimal book ex.>\n\n\nMarceloRosales/NiigataU-Carving\n>\nNiigataU-Carving https://marcelorosales.github.io/NiigataU-Carving/\n\n\nMarceloRosales/RBlogdowntest01\n>\n<RBlogdowntest01 (not live)>\n\n\nMarceloRosales/WebDev-01\n>\nWebDev-01 https://marcelorosales.github.io/WebDev-01/\n\n\nMarceloRosales/BootstrapCarrousel\n>\nBootstrapCarrousel https://marcelorosales.github.io/BootstrapCarrousel/\n\n\nMarceloRosales/staticrypt\n>\n<Staticrypt (exec only)>\n\n\n\n\nHow to use:\nWhere do I write the text first? word, Rstudio .qmd, VS code?\n\nI am thinking I will I will use the 3 of them (word, RStudio (RS).qmd, VS code (VSC)) at the same time.\n\nSeems like VC code is the middle ground between word and Rstudio. 20230502 test: Use VS code as the main text/code editor, then copy paste to word.\n\nCreate a qmd file/project in RS, git init, save project.\n\nOpen RS qmd file in VS code and use as main text editor.\n\nChange/add content, save in VS code > will auto update in RS (no need to do anything except to reload/open file).\n\nCheck if render is correct.\n\nCopy/paste to word and save in word. Currently it is not possible to open a word file directly in VSC.\n\n\nUse word and .qmd (in source mode only) at the same time and indistinctively…\n\nDO NOT SWITCH TO VISUAL MODE. Changing to visual mode will modify text in the source code format. Space between lines is doble and there is no way to change it in the ui of rstudio, only in the render output. It makes it difficult to read and orginize.\n\nThus, keep all records in the word file at all times. Make de word file the default saving format.\nOpen Untitled .qmd files to try and test code chunks or formats.\nOpen an Image .qmd file in visual mode to store all image code and links for a fast gallery, then easy to copy/paste images to other places.\n\nIf large code needs to be quickly formated for word (coz copy/paste from rstudio to word directly does not copy code highlight formats), use VS code, copy/paste Rstudio > VS Code > word. Then adjust line spacing.\n\n\n\nOpen Word file\n(See Markdown02.docx > Word and Rstudio for detail info on the code)\nfiles:\nMac:\n\nMarkdown02 <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/Markdown02.docx\"  \n\nResearch_map <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/Research_map and guide.docx\"  \n\nMarkdown01 <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/Markdown01.docx\"\n\nNotes <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/\"\n\nexcel <- \"/Users/marcelorosales/Documents/GitHub/Quarto/quarto-trials/quarto_website/test.xlsx\"\n\n#open in mac OS\nsystem(paste(\"open\", shQuote(Markdown02)))\nsystem(paste(\"open\", shQuote(Research_map)))\nsystem(paste(\"open\", shQuote(Notes)))\nsystem(paste(\"open\", shQuote(excel)))\n\nexcel file test\nWindows:\n\nfile_path <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/Markdown01.docx\"\nshell(paste(\"start\", shQuote(file_path)))\n# or \nsystem(paste(\"start\", shQuote(file_path)))\n\n\n\n\nRmd\n\nexcel <- \"/Users/marcelorosales/Documents/GitHub/Quarto/quarto-trials/quarto_website/test.xlsx\"\nsystem(paste(\"open\", shQuote(excel)))"
  },
  {
    "objectID": "All_notes.html",
    "href": "All_notes.html",
    "title": "All_notes",
    "section": "",
    "text": "Mac:\n\nMarkdown02.docx <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/Markdown02.docx\"  \nResearch_map.docx <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/Research_map and guide.docx\"  \nMarkdown01.docx <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/Markdown01.docx\"\nNotes <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/\"\nAll_notes_draft.qmd <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/All_notes_draft.qmd\"\nAll_notes.qmd <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/All_notes.qmd\"\nAll.md <- \"/Users/marcelorosales/Box Sync/Github/mkdocs/MBA03/docs/All.md\"\nquarto_All.xlsx <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/quarto_All.xlsx\"\nExcel_best_tricks.xlsx <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Excel best tricks.xlsx\"\n\n#open in mac OS\nsystem(paste(\"open\", shQuote(Markdown02.docx)))\nsystem(paste(\"open\", shQuote(Research_map.docx)))\nsystem(paste(\"open\", shQuote(Notes)))\nsystem(paste(\"open\", shQuote(All_notes_draft.qmd)))\nsystem(paste(\"open\", shQuote(All_notes.qmd)))\nsystem(paste(\"open\", shQuote(All.md)))\nsystem(paste(\"open\", shQuote(quarto_All.xlsx)))\nsystem(paste(\"open\", shQuote(Excel_best_tricks.xlsx)))\n\nWindows:\n\nfile_path <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/Markdown01.docx\"\nshell(paste(\"start\", shQuote(file_path)))\n# or \nsystem(paste(\"start\", shQuote(file_path)))\n\nIt is possible to sync files with in sys with the rsync command (no external apps needed)\n\nsource <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/All_notes_draft.qmd\"\ndestination <- \"\"\n\nsystem(paste(\"rsync -avh --progress\", shQuote(source), shQuote(destination)))\n\nsync # 33\n\n/Users/marcelorosales/Documents/GitHub/Quarto/quarto-trials/quarto_website/qt01.csv\n\nAll Notes\ndocx2md_test.docx\nDoes Decalcification speed.docx\nGeneExpression analysis.docx\nR Graph Notes.docx\nR Graph Notes.docx\nR Markdown notes.docx\nR Markdown notes.docx\nrmarkdown-brew.docx\nrmarkdown-brew.docx\nUntitled2.docx\nUntitled03.docx\nUntitled04.docx\nreference-keys.txt\nmkdocs.yml\ndeforges.pdf\nIntroductory R example chapters.pdf\nIntroductory R example chapters.pdf rmarkdown-2.0.pdf\nrmarkdown-2.0.pdf\nrmarkdown-cheatsheet.pdf\nrmarkdown-cheatsheet.pdf\nteachR.pdf\nteachR.pdf\nUntitled.pdf\ntop ## Files related to markdown. :\nSpotlight search: Markdow\nPackages installed in R?.\ninstalled_previously.csv\ninstalled_Rpackages20201004.csv.\ninstalled_Rpackages20201004.csv.\ninstalled_Rpackages20210108.csv.\ninstalled_Rpackages20210108.csv.\noldRpks.csv.\noldRpks.csv.\nNotes\ndocx2md_test.docx\nDoes Decalcification speed.docx\nGeneExpression analysis.docx\nR Graph Notes.docx\nR Graph Notes.docx\nR Markdown notes.docx\nR Markdown notes.docx\nrmarkdown-brew.docx\nrmarkdown-brew.docx\nUntitled2.docx\nUntitled03.docx\nUntitled04.docx\nreference-keys.txt\nmkdocs.yml\ndeforges.pdf\nIntroductory R example chapters.pdf\nIntroductory R example chapters.pdf rmarkdown-2.0.pdf\nrmarkdown-2.0.pdf\nrmarkdown-cheatsheet.pdf\nrmarkdown-cheatsheet.pdf\nteachR.pdf\nteachR.pdf\nUntitled.pdf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVS code\n\n\nRstudio\n\n\n\n\n\n\n\n\ncode\nmd\nRmd\nqmd\nmd\nRmd\nRmd visual\nqmd\nqmd visual\n\n\nr\no\no\no\n\n\no\n\no\n\n\n.r\n\n\n\n\n\n\n\no\n\n\n{r}\n\n\no\no\no\n\no\n\n\n\n{.r}\n\n\no\no\n\no\n\no\n\n\nrev r\n\n\n\n\n\no\n\no\n\n\n\nhttps://tableconvert.com/\n\n\n\n\n\n\n\n\n\n\n\n\n\nVS code\n****\n****\nRstudio\n****\n****\n****\n****\n\n\n\n\ncode\nmd\nRmd\nqmd\nmd\nRmd\nRmd visual\nqmd\n\n\nr\no\no\no\n\n\no\n\n\n\n.r\n\n\n\n\n\n\n\n\n\n{r}\n\n\no\no\no\n\no\n\n\n{.r}\n\n\no\no\n\no\n\n\n\nrev r\n\n\n\n\n\no\n\n\n\n\n\nlibrary(readxl)\nhighlight_long <- read_excel(\"~/Box Sync/Niigata Uni Box/Books-Notes/Notes/quarto_All.xlsx\", \n    sheet = \"Sheet2\")\nView(quarto_All)\n\nlibrary(tidyr)\nhighlight_wide <- spread(highlight_long, Soft, file, chunk, color)\n\n\nlibrary(tidyverse)\n\n# Create a data frame with the long-form table\ndf <- data.frame(\n  Soft = c(\"VS code\", \"VS code\", \"VS code\", \"VS code\", \"VS code\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\"),\n  file = c(\"md\", \"md\", \"md\", \"md\", \"md\", \"md\", \"md\", \"md\", \"md\", \"md\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\"),\n  chunk = c(\"r\", \".r\", \"{r}\", \"{.r}\", \"rev r\", \"r\", \".r\", \"{r}\", \"{.r}\", \"rev r\", \"r\", \".r\", \"{r}\", \"{.r}\", \"rev r\", \"r\", \".r\", \"{r}\", \"{.r}\", \"rev r\", \"r\", \".r\", \"{r}\", \"{.r}\", \"rev r\", \"r\", \".r\", \"{r}\", \"{.r}\", \"rev r\"),\n  color = c(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1)\n)\n\n# Convert the table to wide form\ndf_wide <- df %>%\n  pivot_wider(names_from = chunk, values_from = color)\n\n# Print the resulting wide-form table\nprint(df_wide)\n\n\n\nThe function knitr::kable() Other packages for creating tables\n\n\n/Users/marcelorosales/Documents/GitHub/Quarto/quarto-trials/quarto_website/xls2wb.htm\n\n\n\n\n\n\nDesigning tables in R with “knitr” and “kableExtra” | R Tutorial (2021)\n\n\n\ndata <- read.csv(\"/Users/marcelorosales/Documents/GitHub/Quarto/quarto-trials/quarto_website/qt01.csv\")\n\ndata\n\n  Programm VS_code VS_code.1 VS_code.2 Rstudio Rstudio.1  Rstudio.2 Rstudio.3\n1     type      md       Rmd       qmd      md       Rmd Rmd visual       qmd\n2        r       o         o         o                            o          \n3       .r                                                                   \n4      {r}                           o       o         o                    o\n5     {.r}                           o       o                    o          \n6   rev  r                                                        o          \n   Rstudio.4\n1 qmd visual\n2          o\n3          o\n4           \n5          o\n6          o\n\nstr(data)\n\n'data.frame':   6 obs. of  9 variables:\n $ Programm : chr  \"type\" \"r\" \" .r\" \" {r}\" ...\n $ VS_code  : chr  \"md\" \"o\" \"\" \"\" ...\n $ VS_code.1: chr  \"Rmd\" \"o\" \"\" \"\" ...\n $ VS_code.2: chr  \"qmd\" \"o\" \"\" \"o\" ...\n $ Rstudio  : chr  \"md\" \"\" \"\" \"o\" ...\n $ Rstudio.1: chr  \"Rmd\" \"\" \"\" \"o\" ...\n $ Rstudio.2: chr  \"Rmd visual\" \"o\" \"\" \"\" ...\n $ Rstudio.3: chr  \"qmd\" \"\" \"\" \"o\" ...\n $ Rstudio.4: chr  \"qmd visual\" \"o\" \"o\" \"\" ...\n\ndf <- knitr::kable(data, \"pipe\", align = \"c\")\nknitr::kable(data, \"pipe\", align = \"c\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProgramm\nVS_code\nVS_code.1\nVS_code.2\nRstudio\nRstudio.1\nRstudio.2\nRstudio.3\nRstudio.4\n\n\n\n\ntype\nmd\nRmd\nqmd\nmd\nRmd\nRmd visual\nqmd\nqmd visual\n\n\nr\no\no\no\n\n\no\n\no\n\n\n.r\n\n\n\n\n\n\n\no\n\n\n{r}\n\n\no\no\no\n\no\n\n\n\n{.r}\n\n\no\no\n\no\n\no\n\n\nrev r\n\n\n\n\n\no\n\no\n\n\n\n\nknitr::kable(data, \"simple\", align = \"c\")\n\n\n\n\nProgramm\nVS_code\nVS_code.1\nVS_code.2\nRstudio\nRstudio.1\nRstudio.2\nRstudio.3\nRstudio.4\n\n\n\n\ntype\nmd\nRmd\nqmd\nmd\nRmd\nRmd visual\nqmd\nqmd visual\n\n\nr\no\no\no\n\n\no\n\no\n\n\n.r\n\n\n\n\n\n\n\no\n\n\n{r}\n\n\no\no\no\n\no\n\n\n\n{.r}\n\n\no\no\n\no\n\no\n\n\nrev r\n\n\n\n\n\no\n\no\n\n\n\n\nknitr::kable(data, \"html\", align = \"c\")\n\n\n\n \n  \n    Programm \n    VS_code \n    VS_code.1 \n    VS_code.2 \n    Rstudio \n    Rstudio.1 \n    Rstudio.2 \n    Rstudio.3 \n    Rstudio.4 \n  \n \n\n  \n    type \n    md \n    Rmd \n    qmd \n    md \n    Rmd \n    Rmd visual \n    qmd \n    qmd visual \n  \n  \n    r \n    o \n    o \n    o \n     \n     \n    o \n     \n    o \n  \n  \n    .r \n     \n     \n     \n     \n     \n     \n     \n    o \n  \n  \n    {r} \n     \n     \n    o \n    o \n    o \n     \n    o \n     \n  \n  \n    {.r} \n     \n     \n    o \n    o \n     \n    o \n     \n    o \n  \n  \n    rev  r \n     \n     \n     \n     \n     \n    o \n     \n    o \n  \n\n\n\n\nknitr::kable(data, \"latex\", align = \"c\")\n\n\n\nknitr::kable(data, \"rst\", align = \"c\")\n\n======== ======= ========= ========= ======= ========= ========== ========= ========== Programm VS_code VS_code.1 VS_code.2 Rstudio Rstudio.1 Rstudio.2 Rstudio.3 Rstudio.4 ======== ======= ========= ========= ======= ========= ========== ========= ========== type md Rmd qmd md Rmd Rmd visual qmd qmd visual r o o o o o\n.r o\n{r} o o o o\n{.r} o o o o\nrev r o o\n======== ======= ========= ========= ======= ========= ========== ========= ==========\n\n\n\n\n\n[ ] Check also: Making tables in the rstats package kableExtra for Oregon by the Numbers\n[ ] Create Awesome HTML Table with knitr::kable and kableExtra\nExample:\nInstall and Load Packages if required\n\n# install.packages(\"kableExtra\")\n# install.packages(\"AER\")\n# install.packages(\"tinytex\")\nlibrary(kableExtra)\nlibrary(magrittr)\nlibrary(shiny)\nlibrary(knitr)\nlibrary(tinytex)\nlibrary(AER)\n\nLoading required package: car\n\n\nLoading required package: carData\n\n\nLoading required package: lmtest\n\n\nLoading required package: zoo\n\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\nLoading required package: sandwich\n\n\nLoading required package: survival\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ tidyr::extract()    masks magrittr::extract()\n✖ dplyr::filter()     masks stats::filter()\n✖ dplyr::group_rows() masks kableExtra::group_rows()\n✖ dplyr::lag()        masks stats::lag()\n✖ dplyr::recode()     masks car::recode()\n✖ purrr::set_names()  masks magrittr::set_names()\n✖ purrr::some()       masks car::some()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nhelp(\"kableExtra\")\nhelp(\"kable\")\n\nHelp on topic 'kable' was found in the following packages:\n\n  Package               Library\n  kableExtra            /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library\n  knitr                 /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library\n\n\nUsing the first match ...\n\n\nExample with mtcars frame\n\n# HTML table\ndt2 <- mtcars[1:5, 1:4]\ndt <- head(mtcars)\n# rm(dt)\n# rm(dt2)\n\n\nkbl(dt, caption = \"Demo Table\")\n\n\n\nDemo Table\n \n  \n      \n    mpg \n    cyl \n    disp \n    hp \n    drat \n    wt \n    qsec \n    vs \n    am \n    gear \n    carb \n  \n \n\n  \n    Mazda RX4 \n    21.0 \n    6 \n    160 \n    110 \n    3.90 \n    2.620 \n    16.46 \n    0 \n    1 \n    4 \n    4 \n  \n  \n    Mazda RX4 Wag \n    21.0 \n    6 \n    160 \n    110 \n    3.90 \n    2.875 \n    17.02 \n    0 \n    1 \n    4 \n    4 \n  \n  \n    Datsun 710 \n    22.8 \n    4 \n    108 \n    93 \n    3.85 \n    2.320 \n    18.61 \n    1 \n    1 \n    4 \n    1 \n  \n  \n    Hornet 4 Drive \n    21.4 \n    6 \n    258 \n    110 \n    3.08 \n    3.215 \n    19.44 \n    1 \n    0 \n    3 \n    1 \n  \n  \n    Hornet Sportabout \n    18.7 \n    8 \n    360 \n    175 \n    3.15 \n    3.440 \n    17.02 \n    0 \n    0 \n    3 \n    2 \n  \n  \n    Valiant \n    18.1 \n    6 \n    225 \n    105 \n    2.76 \n    3.460 \n    20.22 \n    1 \n    0 \n    3 \n    1 \n  \n\n\n\n\nkbl(dt, caption = \"Demo Table\") %>%\n  kable_styling(bootstrap_options = \"striped\",\n                full_width = F) %>%\n  add_header_above(c(\" \", \"Group 1\" = 2, \"Group 2[note]\" = 2, \"group 3\" = 7)) %>%\n  footnote(c(\"table footnote\"))\n\n\n\nDemo Table\n \n\n\nGroup 1\nGroup 2[note]\ngroup 3\n\n  \n      \n    mpg \n    cyl \n    disp \n    hp \n    drat \n    wt \n    qsec \n    vs \n    am \n    gear \n    carb \n  \n \n\n  \n    Mazda RX4 \n    21.0 \n    6 \n    160 \n    110 \n    3.90 \n    2.620 \n    16.46 \n    0 \n    1 \n    4 \n    4 \n  \n  \n    Mazda RX4 Wag \n    21.0 \n    6 \n    160 \n    110 \n    3.90 \n    2.875 \n    17.02 \n    0 \n    1 \n    4 \n    4 \n  \n  \n    Datsun 710 \n    22.8 \n    4 \n    108 \n    93 \n    3.85 \n    2.320 \n    18.61 \n    1 \n    1 \n    4 \n    1 \n  \n  \n    Hornet 4 Drive \n    21.4 \n    6 \n    258 \n    110 \n    3.08 \n    3.215 \n    19.44 \n    1 \n    0 \n    3 \n    1 \n  \n  \n    Hornet Sportabout \n    18.7 \n    8 \n    360 \n    175 \n    3.15 \n    3.440 \n    17.02 \n    0 \n    0 \n    3 \n    2 \n  \n  \n    Valiant \n    18.1 \n    6 \n    225 \n    105 \n    2.76 \n    3.460 \n    20.22 \n    1 \n    0 \n    3 \n    1 \n  \n\n\nNote: \n\n table footnote\n\n\n\n\n# LaTeX Table\nkbl(dt2, booktabs = T, caption = \"Demo Table\") %>%\n  kable_styling(latex_options = c(\"striped\", \"hold_position\"),\n                full_width = F) %>%\n  add_header_above(c(\" \", \"Group 1\" = 2, \"Group 2[note]\" = 2)) %>%\n  footnote(c(\"table footnote\"))\n\n\n\nDemo Table\n \n\n\nGroup 1\nGroup 2[note]\n\n  \n      \n    mpg \n    cyl \n    disp \n    hp \n  \n \n\n  \n    Mazda RX4 \n    21.0 \n    6 \n    160 \n    110 \n  \n  \n    Mazda RX4 Wag \n    21.0 \n    6 \n    160 \n    110 \n  \n  \n    Datsun 710 \n    22.8 \n    4 \n    108 \n    93 \n  \n  \n    Hornet 4 Drive \n    21.4 \n    6 \n    258 \n    110 \n  \n  \n    Hornet Sportabout \n    18.7 \n    8 \n    360 \n    175 \n  \n\n\nNote: \n\n table footnote\n\n\n\n\n\nWith Kable\n\nhelp(\"kable\")\n\n## Not running \n\nx <- knitr::kable(head(mtcars), \"pipe\")\nx  # works fine up to here\n\n\n# Add a row of header with 3 columns on the top of the table. The column\n# span for the 2nd and 3rd one are 5 & 6.\nadd_header_above(x, c(\" \", \"Group1\" = 5, \"Group2\" = 6))\n\ny <- add_header_above(x, c(\" \", \"Group 1\" = 5, \"Group 2\" = 6))\ny\n\nz <- head(mtcars) \n\n\nz <- as.data.frame(head(mtcars)) %>% \n  kbl() %>% \n  add_header_above(z, c(\" \", \"Group1\" = 5, \"Group2\" = 6))\n\n\n\n\n\nExample:\n\nlibrary(tidyverse)\n\n# Example wide data frame\nwide_df <- data.frame(\n  id = c(1, 2, 3),\n  var1 = c(10, 20, 30),\n  var2 = c(40, 50, 60),\n  var3 = c(70, 80, 90)\n)\n\n\nwide_df\n\n  id var1 var2 var3\n1  1   10   40   70\n2  2   20   50   80\n3  3   30   60   90\n\n# Convert wide data frame to long\nlong_df <- wide_df %>%\n  pivot_longer(\n    cols = starts_with(\"var\"),  # Specify the columns to pivot\n    names_to = \"variable\",      # Name of the new variable column\n    values_to = \"value\"         # Name of the new value column\n  )\n\n# View the resulting long data frame\nprint(long_df)\n\n# A tibble: 9 × 3\n     id variable value\n  <dbl> <chr>    <dbl>\n1     1 var1        10\n2     1 var2        40\n3     1 var3        70\n4     2 var1        20\n5     2 var2        50\n6     2 var3        80\n7     3 var1        30\n8     3 var2        60\n9     3 var3        90\n\nknitr::kable(wide_df, \"pipe\", align = \"c\")\n\n\n\n\nid\nvar1\nvar2\nvar3\n\n\n\n\n1\n10\n40\n70\n\n\n2\n20\n50\n80\n\n\n3\n30\n60\n90\n\n\n\n\nknitr::kable(long_df, \"pipe\", align = \"c\")\n\n\n\n\nid\nvariable\nvalue\n\n\n\n\n1\nvar1\n10\n\n\n1\nvar2\n40\n\n\n1\nvar3\n70\n\n\n2\nvar1\n20\n\n\n2\nvar2\n50\n\n\n2\nvar3\n80\n\n\n3\nvar1\n30\n\n\n3\nvar2\n60\n\n\n3\nvar3\n90\n\n\n\n\n\n\n# Error: Values are not numeric. \n# ! Can't subset columns with `data`.\n# ✖ `data` must be numeric or character, not a <data.frame> object.\n# ! Arguments in `...` must be used.\n\n\nlibrary(tidyverse)\ndata_long <- data %>%\n  pivot_longer(\n    data,\n    2:9,\n    names_to = \"Programm\",\n    values_to = \"values\"\n  )\n\n\n\n\n\n\nRequires re-start app.\n\n\n# Set r environment to english\n\nSys.setenv(LANG = \"en\")\n\n\ndefaults write org.R-project.R force.LANG en_US.UTF-8  # 英語表示"
  },
  {
    "objectID": "All_notes.html#files-related-to-markdown.",
    "href": "All_notes.html#files-related-to-markdown.",
    "title": "All notes",
    "section": "Files related to markdown. :",
    "text": "Files related to markdown. :\nSpotlight search: Markdow\nPackages installed in R?.\ninstalled_previously.csv\ninstalled_Rpackages20201004.csv.\ninstalled_Rpackages20201004.csv.\ninstalled_Rpackages20210108.csv.\ninstalled_Rpackages20210108.csv.\noldRpks.csv.\noldRpks.csv.\nNotes\ndocx2md_test.docx\nDoes Decalcification speed.docx\nGeneExpression analysis.docx\nR Graph Notes.docx\nR Graph Notes.docx\nR Markdown notes.docx\nR Markdown notes.docx\nrmarkdown-brew.docx\nrmarkdown-brew.docx\nUntitled2.docx\nUntitled03.docx\nUntitled04.docx\nreference-keys.txt\nmkdocs.yml\ndeforges.pdf\nIntroductory R example chapters.pdf\nIntroductory R example chapters.pdf rmarkdown-2.0.pdf\nrmarkdown-2.0.pdf\nrmarkdown-cheatsheet.pdf\nrmarkdown-cheatsheet.pdf\nteachR.pdf\nteachR.pdf\nUntitled.pdf\ntop\n#| eval: false\n\nMarkdown02 <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/Markdown02.docx\"  \n\nResearch_map <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/Research_map and guide.docx\"  \n\nMarkdown01 <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/Markdown01.docx\"\n\nNotes <- \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/\"\n\n#open in mac OS\nsystem(paste(\"open\", shQuote(Markdown02)))\nsystem(paste(\"open\", shQuote(Research_map)))\nsystem(paste(\"open\", shQuote(Notes)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVS code\n\n\nRstudio\n\n\n\n\n\n\n\n\ncode\nmd\nRmd\nqmd\nmd\nRmd\nRmd visual\nqmd\nqmd visual\n\n\nr\no\no\no\n\n\no\n\no\n\n\n.r\n\n\n\n\n\n\n\no\n\n\n{r}\n\n\no\no\no\n\no\n\n\n\n{.r}\n\n\no\no\n\no\n\no\n\n\nrev r\n\n\n\n\n\no\n\no\n\n\n\nhttps://tableconvert.com/\n\n\n\n\n\n\n\n\n\n\n\n\n\nVS code\n****\n****\nRstudio\n****\n****\n****\n****\n\n\n\n\ncode\nmd\nRmd\nqmd\nmd\nRmd\nRmd visual\nqmd\n\n\nr\no\no\no\n\n\no\n\n\n\n.r\n\n\n\n\n\n\n\n\n\n{r}\n\n\no\no\no\n\no\n\n\n{.r}\n\n\no\no\n\no\n\n\n\nrev r\n\n\n\n\n\no\n\n\n\n\nVS code         Rstudio             \ncode md Rmd qmd md Rmd Rmd visual qmd qmd visual r o o o o o .r o {r} o o o o\n{.r} o o o o rev r o o\nVS code VS code VS code Rstudio             \ncode md Rmd qmd md Rmd Rmd visual qmd qmd visual r o o o o o .r o {r} o o o o\n{.r} o o o o rev r o o\nVS code         Rstudio             \ncode md Rmd qmd md Rmd Rmd visual qmd qmd visual r o o o o o .r o {r} o o o o\n{.r} o o o o rev r o o\n\nlibrary(readxl)\nhighlight_long <- read_excel(\"~/Box Sync/Niigata Uni Box/Books-Notes/Notes/quarto_All.xlsx\", \n    sheet = \"Sheet2\")\nView(quarto_All)\n\nlibrary(tidyr)\nhighlight_wide <- spread(highlight_long, Soft, file, chunk, color)\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n# Create a data frame with the long-form table\ndf <- data.frame(\n  Soft = c(\"VS code\", \"VS code\", \"VS code\", \"VS code\", \"VS code\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\", \"Rstudio\"),\n  file = c(\"md\", \"md\", \"md\", \"md\", \"md\", \"md\", \"md\", \"md\", \"md\", \"md\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\", \"Rmd\"),\n  chunk = c(\"r\", \".r\", \"{r}\", \"{.r}\", \"rev r\", \"r\", \".r\", \"{r}\", \"{.r}\", \"rev r\", \"r\", \".r\", \"{r}\", \"{.r}\", \"rev r\", \"r\", \".r\", \"{r}\", \"{.r}\", \"rev r\", \"r\", \".r\", \"{r}\", \"{.r}\", \"rev r\", \"r\", \".r\", \"{r}\", \"{.r}\", \"rev r\"),\n  color = c(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1)\n)\n\n# Convert the table to wide form\ndf_wide <- df %>%\n  pivot_wider(names_from = chunk, values_from = color)\n\nWarning: Values from `color` are not uniquely identified; output will contain list-cols.\n• Use `values_fn = list` to suppress this warning.\n• Use `values_fn = {summary_fun}` to summarise duplicates.\n• Use the following dplyr code to identify duplicates.\n  {data} %>%\n  dplyr::group_by(Soft, file, chunk) %>%\n  dplyr::summarise(n = dplyr::n(), .groups = \"drop\") %>%\n  dplyr::filter(n > 1L)\n\n# Print the resulting wide-form table\nprint(df_wide)\n\n# A tibble: 3 × 7\n  Soft    file  r         .r        `{r}`     `{.r}`    `rev r`  \n  <chr>   <chr> <list>    <list>    <list>    <list>    <list>   \n1 VS code md    <dbl [1]> <dbl [1]> <dbl [1]> <dbl [1]> <dbl [1]>\n2 Rstudio md    <dbl [1]> <dbl [1]> <dbl [1]> <dbl [1]> <dbl [1]>\n3 Rstudio Rmd   <dbl [4]> <dbl [4]> <dbl [4]> <dbl [4]> <dbl [4]>"
  },
  {
    "objectID": "posts/RStudio_install.html#stack-overflow-2",
    "href": "posts/RStudio_install.html#stack-overflow-2",
    "title": "R and Rstudio Install, setup and Package Management",
    "section": "Stack Overflow 2",
    "text": "Stack Overflow 2\nEvery time I upgrade R using homebrew I need to install most packages again\n\nBefore install:\n\n1. Update all R packages\nRef: https://www.neonscience.org/resources/learning-hub/tutorials/packages-r\n\n# list all packages where an update is available\nold.packages()\n\n# update all available packages\nupdate.packages()\n\n# update, without prompts for permission/clarification\nupdate.packages(ask = FALSE)\n\n# update only a specific package use install.packages()\ninstall.packages(\"plotly\")\n\n\n\n2. Backup current package list.\n\ntmp <- installed.packages()\ninstalledpkgs <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1])\nsave(installedpkgs, file=\"installed_old.rda\")\n\n\n\n3. Backup your preferences file\n\n# Copy a file\nsource_path <- \"/Users/marcelorosales/.config/rstudio/rstudio-prefs.json\"\ndestination_path <- \"/Users/marcelorosales/Box Sync/Github/RStudio_shared/RS_preferences/\"\n\nfile.copy(source_path, destination_path, overwrite = FALSE)\n\n# If: [1] TRUE, file was copied\n# If: [1] FALSE, file was not copied, error might be that the file already exists (change overwrite = TRUE, or paths not correct.)\n\n# Check if the copy was successful. This does not really work. \nif (file.exists(destination_path)) {\n  print(\"File copied successfully!\")\n} else {\n  print(\"File copy failed.\")\n}\n\n\n\nAnother way to do it:\n\n# identify the folders\nsource_path <- \"/Users/marcelorosales/.config/rstudio/\"\ndestination_path <- \"/Users/marcelorosales/Box Sync/Github/RStudio_shared/RS_preferences/\"\nfile <- \"rstudio-prefs.json\"\n\n# find the files that you want\n\nlist.files(source_path)\n\nlist.of.files <- list.files(source_path, file)\nlist.of.files\n\n# copy the files to the new folder\nfile.copy(list.of.files, destination_path)\n\nRef:\n- https://fs.r-lib.org/reference/copy.html\n- https://www.r-bloggers.com/2014/11/copying-files-with-r/\n- https://r-lang.com/how-to-copy-a-file-in-r/***\n- https://stat.ethz.ch/R-manual/R-devel/library/base/html/files.html\n\n\n\nInstall new version of R\n\nbrew upgrade r\nbrew upgrade rstudio\n\n\n\nReload packages from CRAN\n\nload(\"installed_old.rda\")\ntmp <- installed.packages()\ninstalledpkgs.new <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1])\nmissing <- setdiff(installedpkgs, installedpkgs.new)\ninstall.packages(missing)\nupdate.packages()\n\n\n\n\n\n\nReload packages from BioConductor\n\n# Update2022: 'biocLite' is not available for new versions of R\n\nchooseBioCmirror()\nbiocLite()\nload(\"installed_old.rda\")\ntmp <- installed.packages()\ninstalledpkgs.new <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1])\nmissing <- setdiff(installedpkgs, installedpkgs.new)\nfor (i in 1:length(missing)) biocLite(missing[i])"
  },
  {
    "objectID": "posts/RStudio_install.html#other-relevant-files",
    "href": "posts/RStudio_install.html#other-relevant-files",
    "title": "R and Rstudio Install, setup and Package Management",
    "section": "Other relevant files",
    "text": "Other relevant files\n\n\n\n\nhow to find out R library location in Mac OSX?\nWith .Library you get your default library location With .libPaths(“your/path”) you can also get/set you library trees (see ?.libPaths) and with getwd() resp. setwd(“your/path”) you get/set your working-directory\n\n.Library  \n.libPaths()  \n\nLoading packages: the difference between R’s library() and require() functions{target= “_blank”}"
  },
  {
    "objectID": "posts/RStudio_install.html#shell",
    "href": "posts/RStudio_install.html#shell",
    "title": "R and Rstudio Install, setup and Package Management",
    "section": "Shell",
    "text": "Shell\n\n# Run in the old version of \n\n# ===== Before upgrade =====\n\n# ------1. Update all old packages ----------\n\n# Check R version or session info.\nR.Version()  \nsessionInfo()\n\n# A. Update current packages.\nupdate.packages(checkBuilt=TRUE, ask=FALSE)  #check spelling of arguments\n## 20230608: The downloaded binary packages are in:  /var/folders/1v/nbx_5tgn553dq8s639lyln5c0000gn/T//Rtmpt7WwKz/downloaded_packages\n\n# B. Upgrade packages of Bioconductor\n# Install packages from a newer version of Bioconductor https://www.bioconductor.org/install/ \nif (!require(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\n# BiocManager::install(version = \"3.17\") # Or the newest version\nBiocManager::install(\"Biobase\")\nBiocManager::install(\"BiocGenerics\")\n\n# if error,  re-install: 'Biobase'Old packages: 'learnr'\ninstall.packages(\"learnr\")\n\n# ------ 2. Save backup of old packages and preferences ----\n# 2. Before you upgrade: 1. build and save a file with all current packages (old packages) and 2. Backup your rstudio preferences files.  \n\n# ---- 2.1 Variables / info ----\n# Run paths and pc`s info\n# ~/path/to/folder \"~\" doesn't work?\n\npdir <- \"/Box Sync/Github/RStudio_shared/R_packages/\" # Path to directory\npth15 <- \"/Users/Marcelo-Rosales\" # MBP15\npth20 <- \"/Users/marcelorosales\"  # MBP20\npc15 <- \"MBP15\"\npc20 <- \"MBP20\"\n\np15 <- paste0(pth15,pdir)  # MBP15 destination folder\np20 <- paste0(pth20,pdir)  # MBP20 destination folder\n\nrpref <- \"/.config/rstudio/rstudio-prefs.json\" # ~ Location of preferences.json\n# rprefd <- \"/Box Sync/Github/RStudio_shared/RS_preferences/\" # destination folder\npref15 <- paste0(pth15,rpref)\npref20 <- paste0(pth20,rpref)\n\n# Run paths and pc`s info\n#--- 2.2 Variables manual imput ----\nlibrary(stringr)\nSys.Date()\nSys.time()\ngsub(\"-\",\"\",Sys.Date())\nstr_sub(gsub(\"-\",\"\",Sys.Date()), 3, -1) # https://youtu.be/343VCX3ynOA\n\ndate <- \"230608\"   # <--------------------- change date (file name) here (manual).\ndate <- str_sub(gsub(\"-\",\"\",Sys.Date()), 3, -1)   # date auto.\nfolder <- p20      # <--------------------- change destination folder (path) here.\npc <- pc20         # <--------------------- change PC (device name) here.\nrs_pref <- pref20  # <--------------------- change r prefs location here.\n\nnew_folder <- paste0(\"Rpkgs\",date,\"/\")   \nfile_name <- paste0(\"Rpkgs_\",pc,\"_\",date)   \nrda <- \".rda\"\ncsv <- \".csv\"\ndf <- \"_df\"\nxlsx <- \".xlsx\"\n\nrpref.json <- paste0(\"rstudio-prefs_\", pc,\"_\", date, \".json\") # .json file name\nsource_path <- paste0(rs_pref)\ndestination_path <- paste0(folder,new_folder,rpref.json)  # Place after the creation of the folder var.\n\n\nsystem(paste(\"open\", shQuote(folder)))\n\n\n## Check Destination folder\ndate\nfolder\nnew_folder\nfile_name\npc\nrs_pref\n\n## Create a new folder for packages files... use paste0(), paste() inserts a space between obj.\ndir.create(paste0(folder,new_folder)) \n\n## Create file names (only), extensions and path to folder. \nfile1 <- paste0(folder,new_folder,file_name) \nfile.rda <- paste0(folder,new_folder,file_name,rda)\nfile.csv <- paste0(folder,new_folder,file_name,csv)\nfile.csv2 <- paste0(folder,new_folder,file_name,df,csv)\nfile.xlsx <- paste0(folder,new_folder,file_name,xlsx)\n\nfile1\nfile.rda\nfile.csv\nfile.csv2\nfile.xlsx\n\n#--------- 2.3 Create files ----------\n\n# Ways to create and save Packages (old Rpkgs)\ntmp <- installed.packages()                         # <--- Matrix\ntemp2 <- installed.packages()[,\"Package\"]           # <--- Vector\ntemp3 <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1]) # <--- Vector\ntemp4 <- as.data.frame(installed.packages())        # <--- Dataframe\ntemp5 <- as.data.frame(installed.packages()[,\"Package\"])\n\n# Which script to use?...\n# 1.  \nas.vector(tmp[is.na(tmp[,\"Priority\"]), 1]) # Is currently the most common script.\n# a) is.na(tmp[,\"Priority\"]) checks for missing or NA (Not Available) values in the \"Priority\" column. Returns a logical \"vector\" where TRUE = NA values and FALSE = non-NA values.\n# b) It will return only NA rows. \n# b) Non-NA rows are the default installed packages at clean/new start of program. \n# c) Is NOT very good for comparing files good.\n\n# 2. \nas.data.frame(installed.packages()[,\"Package\"]) # Vector of only the packages column\n# a) It will return a df of only the packages column, but will include all packages\n# b) DF can be saved as csv files, very easy to compare with VS code \"File: Compare...\"\n\n\n#=====2.3.1 PASTE FILE NAME!!! to each file type.====\nprint(file_name)\n# [1] \"Rpkgs_MBP15_230612\" <-----------------------------Copy/Paste from console.\n\n## No extension\nRpkgs_MBP20_230612 <- installed.packages()[,\"Package\"] # This is a temp file. \nsave(Rpkgs_MBP20_230612, file= file1) \n\n## As .rda file\ntmp <- installed.packages() # save in environment as data (dataframe?)\nRpkgs_MBP20_230612_rda<- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1]) # save as vector package names.\nsave(Rpkgs_MBP20_230612_rda, file= file.rda)\n\ntmp2 <- as.vector(installed.packages()[,\"Package\"])\ntmp3 <- as.data.frame(installed.packages()[,\"Package\"])\n\n\n## As .csv file requires a dataframe.  \n### 1. Only the Package column variable (as vector?), or 2. as full csv data frame.  \nRpkgs_MBP20_230612_csv <- installed.packages()[,\"Package\"] \nRpkgs_MBP20_230612_df <- as.data.frame(installed.packages()) \nwrite.csv(Rpkgs_MBP20_230612_csv, file= file.csv)\nwrite.csv(Rpkgs_MBP20_230612_df, file= file.csv2)\n\n## As as excel files also requires a dataframe (df)\n### install.packages(\"writexl\")\nlibrary(\"writexl\")\nRpkgs_MBP20_230612_df <- as.data.frame(installed.packages()) # same as in df_csv\nwrite_xlsx(Rpkgs_MBP20_230612_df, file.xlsx)\n\n# Copy/Paste Rstudio global settings and preferences (~/.config/rstudio/rstudio-prefs.json)\n\n## Open folder \nfolder\nnew_folder\nsystem(paste(\"open\", shQuote(folder))) # seems like \"~/path\" does not work on rstudio. \nsystem(paste(\"open\", shQuote(paste0(folder, new_folder))))\n\n## Copy a file (direct).\n\nfile.copy(source_path, destination_path, overwrite = FALSE) # overwrites old file.\n\n# If: [1] TRUE, file was copied\n# If: [1] FALSE, file was not copied, error might be that the file already exists (change overwrite = TRUE, or paths not correct.)\n# Another way to do it, see Stack overflow 2 section. \n\n# ------ 3. Install the new version of R (use homebrew).------\n\n# Close R and Rstudio!! RUN in terminal better.\n\n# {bash filename=\"Terminal\"}\n#| eval: false \n\n# Upgrade R and rstudio\nbrew update\nbrew upgrade --cask r\nbrew reinstall --cask r  \n\nsystem(\"brew update\")\nsystem(\"brew update\", intern = TRUE) # Setting intern = TRUE captures the output of the command and returns it as a character vector in R. \n# password\n#`brew cleanup` has not been run in the last 30 days, running now...\n\n# Upgrade RStudio\nbrew upgrade --cask rstudio\n\n# ------ After upgrade -----\n\n# 4. Once the new version up and running, reload the saved packages and re-install them from CRAN\n\n# run in the new version/device\n\n#--- 4. Reload Variables and files ------\n\npdir <- \"/Box Sync/Github/RStudio_shared/R_packages/\" # Path to directory\npth15 <- \"/Users/Marcelo-Rosales\" # MBP15\npth20 <- \"/Users/marcelorosales\"  # MBP20\npc15 <- \"MBP15\"\npc20 <- \"MBP20\"\n\np15 <- paste0(pth15,pdir)  # MBP15 destination folder\np20 <- paste0(pth20,pdir)  # MBP20 destination folder\n\nrpref <- \"/.config/rstudio/rstudio-prefs.json\" # ~ Location of preferences.json\n# rprefd <- \"/Box Sync/Github/RStudio_shared/RS_preferences/\" # destination folder\npref15 <- paste0(pth15,rpref)\npref20 <- paste0(pth20,rpref)\n\n# Run paths and pc`s info\n## Variables:\ndate <- \"230609\"   # <--------------------- change date (file name) here.\ndate <- str_sub(gsub(\"-\",\"\",Sys.Date()), 3, -1)   # date auto.\nfolder <- p20      # <--------------------- change destination folder (path) here.\npc <- pc20         # <--------------------- change PC (device name) here.\nrs_pref <- pref20  # <--------------------- change r prefs location here.\n\nnew_folder <- paste0(\"Rpkgs\",date,\"/\")   \nfile_name <- paste0(\"Rpkgs_\",pc,\"_\",date)   \nrda <- \".rda\"\ncsv <- \".csv\"\ndf <- \"_df\"\nxlsx <- \".xlsx\"\n\nrpref.json <- paste0(\"rstudio-prefs_\", pc,\"_\", date, \".json\") # .json file name\nsource_path <- paste0(rs_pref)\ndestination_path <- paste0(folder,new_folder,rpref.json)  # Place after the creation of the folder var.\n\n# file1 <- paste0(folder,new_folder,file_name) \nfile.rda <- paste0(folder,new_folder,file_name,rda)\n# file.csv <- paste0(folder,new_folder,file_name,csv)\n# file.csv2 <- paste0(folder,new_folder,file_name,df,csv)\n# file.xlsx <- paste0(folder,new_folder,file_name,xlsx)\n\n# file1\nfile.rda\n# file.csv\n# file.csv2\n# file.xlsx\n\n#---- 5. Load old packages list ------\n\nsystem(paste(\"open\", shQuote(folder)))\n\n#---- 5.1 \"new\" (base) vs \"old\" (backup) pkgs differences installation----\n\n#load(installedpkgs_old)\n\nfile.rda\nfile_name_rda <- paste0(file_name,\"_rda\")\nfile_name_rda\n\nload(file.rda) # will load as Rpkgs_MBP20_230612_rda\n\ninstalledpkgs_old <- Rpkgs_MBP20_230612_rda # .rda\n\ntmp <- installed.packages()\ninstalledpkgs_new <- as.vector(tmp[is.na(tmp[,\"Priority\"]), 1])\nmissing <- setdiff(installedpkgs_old, installedpkgs_new)\nmissing\ninstall.packages(missing)\nupdate.packages()\n\n\n#------ 5.2 \"pc1\" vs \"pc2\" pkgs differences install ----\n\nfile.rda　# pc1.\nload(file.rda) # will load as Rpkgs_MBP20_230612_rda\n\npc2 <- \"/Users/marcelorosales/Box Sync/Github/RStudio_shared/R_packages/Rpkgs230612/Rpkgs_MBP15_230612.rda\"\nload(pc2) # will load as Rpkgs_MBP15_230612_rda\n\nmissing2 <- setdiff(Rpkgs_MBP20_230612_rda, Rpkgs_MBP15_230612_rda)\nmissing2\n# [1] \"Biobase\"      \"BiocGenerics\"\n\nrm(Rpkgs_MBP15_230612_rda)\nrm(Rpkgs_MBP20_230612_rda)\n\n\n#----- 5.3 Install \"Bioconductor\" packages -----\n\n## Packages from Bioconductor (before or after Rpackages install?)\n## Install packages from a newer version of Bioconductor https://www.bioconductor.org/install/\nif (!require(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\n# BiocManager::install(version = \"3.17\") # Or the newest version\nBiocManager::install(\"Biobase\")\nBiocManager::install(\"BiocGenerics\")\n\n# if error,  re-install: 'Biobase'Old packages: 'learnr'\ninstall.packages(\"learnr\")\n\n\n#----- 5.4 Install packages short code\n\n# for (p in setdiff(installedpkgs_old, installed.packages()[,\"Package\"]))\n#   install.packages(p)\n\n\n\n\n#-----6. Compare csv files -----\n\n# 6.1 Open csv files in VS code\npath_csv <- paste0(p20, new_folder)\nsystem(paste(\"open\", shQuote(path_csv)))\n\n# Select csv for pc1 and pc2 > drag to VS code icon > ....[]... will open in VS code\n# In VS code: Select pc1 > cmd + p ...[]... > File: Compare Active File With...\n\n\n# ------ 7. copy paste preferences. -------"
  },
  {
    "objectID": "All_notes_a.html",
    "href": "All_notes_a.html",
    "title": "MySite",
    "section": "",
    "text": "bookmark88�\u0003\u0004\u0010\u0001I\u000f�\u001b \u0013�Ap�\u0002\u0004\u0003\u0003\u0004\u0005\u0001\u0001Users\u000e\u0001\u0001marcelorosales\b\u0001\u0001Box Sync\u000f\u0001\u0001Niigata Uni Box\u000b\u0001\u0001Books-Notes\u0005\u0001\u0001Notes\u0001\u0001All_notes.qmd\u001c\u0001\u0006\u0010 8H`t�\b\u0004\u0003Td\b\u0004\u0003��\b\u0004\u0003c\u0012�\u0002\b\u0004\u0003�\u001e�\u0002\b\u0004\u0003�\u001e�\u0002\b\u0004\u0003��\u0004\b\u0004\u0003.�h\u0007\u001c\u0001\u0006����\u0001\u0010\u0001 \u0001\b\u0004A�\u0012�7q�B\u0018\u0001\u0002\u0001\u001f\u0002\u001f\u0002\u0001\u0005\u0004\u0003\u0003\u0001\b\u0004\u0003\u0005\u0004\u0003\u0003�\u0001\b\u0001 file:///\f\u0001\u0001Macintosh HD\b\u0004\u0003p���\u0001\b\u0004A��K�\\(\u0001\u0001E63B6DDF-3D23-48D4-A8D7-07669DAA51D3\u0018\u0001\u0002�\u0001�\u0013\u0001�\u0013\u0001\u0001\u0001\u0001/3\u0001\u0002dnib\u0001\u0003qmd????\u0014\u0001����\u0001\u0016\u0004\u0010�\u0005\u00100\u0001\u0010\u0010d\u0001@\u0010T\u0001T\u0010�\u0001U\u0010�\u0001V\u0010�\u0001\u0002 D\u0002\u0005 �\u0001\u0010 �\u0001\u0011 �\u0001\u0012 �\u0001\u0013 �\u0001 \\)\u00020 �\u0001\u0001��\u0001\u0011� \u0012��\u0001\u0001��\u0001\u0010�\u0004\u0017��“�P\u0002"
  },
  {
    "objectID": "All_notes.html#images",
    "href": "All_notes.html#images",
    "title": "All_notes",
    "section": "Images:",
    "text": "Images:\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur placerat arcu, sed feugiat ex ultrices vitae.\n![My Image](path/to/image.jpg){.float-left}\nDuis sed fringilla purus. Mauris pellentesque ullamcorper justo id ullamcorper. Vestibulum finibus, mauris ac eleifend accumsan, tortor enim finibus nulla, sit amet rutrum ipsum nisl eu nunc.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus et posuere mi. Sed euismod nunc ut turpis fermentum bibendum.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur placerat arcu, sed feugiat ex ultrices vitae.\n\ntop"
  },
  {
    "objectID": "All_notes.html#terminal-coding-rd",
    "href": "All_notes.html#terminal-coding-rd",
    "title": "All_notes",
    "section": "Terminal, coding R&D",
    "text": "Terminal, coding R&D\n\nThe Bash_profile customization is obsolete now!!.\n\n\n\nwarning\n\n\nThe Bash_profile customization is obsolete now!!.\n\n\nPowerlevel9k/powerlevel9kPublic archive\nNow Using the Powerlevel10k\nhttps://youtu.be/zNg9Y1gentY\nhttps://youtu.be/XVSZAwTXtAs\nhttps://youtu.be/WoMiRHXzCfE"
  },
  {
    "objectID": "All_notes.html#set-up-for-coding-and-development",
    "href": "All_notes.html#set-up-for-coding-and-development",
    "title": "All_notes",
    "section": "Set up for coding and development",
    "text": "Set up for coding and development\n(macOS 2022 edition)\ntop\nOriginal post here > Customise zSH with Powerlevel10K, I was inspired by this guide here but have reconfigured my set up significantly with Powerlevel10k. In the previous version of my writeup, I had used Powerlevel9k theme.\ntop\n\nHow to install Powerlevel10k theme for >_ & iTerm2 Updated version\nInstall for >_ & iTerm2 Updated version\n\n\n2022 explanation video\n\n\n>_ Powerlevel10k theme.\n\nrequires git and Xcode.\n\n\nSave a copy of original .zshrc!! Each machine has a different zshrc file ∵ user path is different in each manchine, just in case\nMBP20: /Users/marcelorosales/Box Sync/Github/DotFiles/MBP20/Conda_shells/zshrc\nMBP15:\nInstall iTerm2\nbrew install –cask iterm2\necho $0 #(if >_ != -zsh {brew install zsh}, else {})\nbrew install zsh\nInstall Oh My Zsh:\nsh -c “$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)”\nIcons/font not displaying correctly? https://github.com/romkatv/powerlevel10k/issues/671\nDownload these four ttf files: MesloLGS NF Regular.ttf > ~/Box/Github/DotFiles/iTerm2/Fonts\nDouble-click on each file and click “Install” (Fonts will be added to Font Book). Then…\n\n\nTerminal fix.:\n//Preferences > Profile > Text > Change > …[]… > Collection:© All fonts > Family: © > MesloLGF Regular\niTerm fix:\n//Preferences > Profile > Text > Font > MesloLGF Regular\nVisual Studio Code config Fonts\n//settings (Cmd + ,) > find (Cmd +F): {Terminal font | Terminal integrated font family} > { MesloLGS NF }\n\nChange .zshrc theme to Agnoster (iterm default)\ncode ~/.zshrc || open ~/.zshrc\nChange: ZSH_THEME=“~/.oh-my-zsh” => ZSH_THEME=“agnoster” > save > exit (>_ and iterm2)\nCostum iterm2 color scheme: download flat-colors: https://github.com/QuentinWatt/dark-flat-iterm-colors/blob/master/flat-colors.itermcolors -> ~/Box Sync/Github/DotFiles/iTerm2/flat-colors.intermcolors\niterm > Preferences > Profiles > Colors > Color pressets > import : lat-colors.intermcolors\nInstall Powerlevel9k / Powerlevel10k: (auto to: ~/oh-my-zsh/custom/themes/powerlevel10k)\ngit clone https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k\nChange .zshrc theme to Powerlevel10k (iterm default)\ncode ~/.zshrc || open ~/.zshrc Change: ZSH_THEME=“agnoster” => ZSH_THEME=“powerlevel10k/powerlevel10k” > save > exit (>_ and iterm2)\nStart a new terminal session/re-configure prompt:\n\np10k configure # 1st time = auto run\ny > y > y > Rainbow > unicode > 24-hour format > Angled > sharp > Flat > one line > compact > Many icons > Concise > Transient Prompt: No > Verbose > ! Overwrite ~/.p10k.zsh (only if powerlevel10k is already installed) > Apply changes to ~/.zshrc? Yes (close open ~/.zshrc) > end.\n\nNew config: ~/.p10k.zsh.  \nBackup of ~/.zshrc: $TMPDIR/.zshrc.EM433MEB1C.  \nSee ~/.zshrc changes:  \n  diff $TMPDIR/.zshrc.EM433MEB1C ~/.zshrc  \nFor even more customization go to the .p10k.zsh file:\n\ncode ~/.p10k.zsh.\n\nAuto suggestions (for Oh my zsh)\n\nJust follow these steps: https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md#oh-my-zsh\n\n\nSyntax highlighting\nbrew install zsh-syntax-highlighting\nActivate the plugin in ~/.zshrc file:\ncode ~/.zshrc > copy/paste: source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\nIf the message “highligthers directory not found” is displayed: code ~/.zshenv > copy/paste:\nexport ZSH_HIGHLIGHT_HIGHLIGHTERS_DIR=/usr/local/share/zsh-syntax-highlighting/highlighters\nif >_ or/and iTerm2 console output is produced during zsh initialization (see: instant prompt error) in terminal type:\ncompaudit | xargs chmod g-w,o-w\n\n2022 explanation video\n\nInstall iTerm2\nbrew install –cask iterm2\nInstall zsh\necho $0 #(if >_ != -zsh {brew install zsh}, else {})\nInstall Oh My Zsh:\nsh -c “$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)”\nInstall Powerlevel9k / Powerlevel10k: (!! + x code tools)\ngit clone https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k\nChange: ZSH_THEME\ncode ~/.zshrc # open ~/.zshrc\nChange: ZSH_THEME=“~/.oh-my-zsh” |“agnoster” => ZSH_THEME=“powerlevel10k/powerlevel10k” > save > exit (>_ and iterm2)\np10k configure #auto run\n\nSummary: from kevin-smets/iterm2-solarized.md\n\nInstall iterm2\nInstall Oh My Zsh\nInstall Powerlevel9k / Powerlevel10k\nInstall a patched font\nFurther tweaking\n\nauto suggestions\nword jumping with arrow keys / natural text editing\nsyntax highlighting\nvisual studio code config\n\nPaste Conda Initialize code at the head/End of .zshrc\n\n1. Install iterm2\n\nbrew install --cask iterm2  \n\niTerm2 has better color fidelity than the built in Terminal, so your themes will look better.\nGet the iTerm color settings\n\nSolarized Dark theme (patched version to fix the bright black value)\nSolarized Light theme\nMore themes @ iterm2colorschemes\nJust save it somewhere and open the file(s). The color settings will be imported into iTerm2. Apply them in iTerm through iTerm → preferences → profiles → colors → load presets. You can create a different profile other than Default if you wish to do so.\n\nApply the color scheme in iTerm2\niTerm → Preferences → Profiles → Colors → Color presets → ImportThen again, Color presets → you-color-scheme-name\n2. Install Oh My Zsh\nInstall with curl\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"  \nWhen the installation is done, edit ~/.zshrc and set ZSH_THEME=“agnoster” for the default look. Or better yet, go for Powerlevel10k.\n3. Install Powerlevel9k / Powerlevel10k\nWhy Powerlevel10k? faster to render your prompt.\nPowerlevel10k look with added info such as exit codes and timestamps:\ngit clone https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k  \nCloning into ‘/Users/Marcelo-Rosales/.oh-my-zsh/custom/themes/powerlevel10k’…\nThen edit your ~/.zshrc and set ZSH_THEME=\"powerlevel10k/powerlevel10k\".\n-> Terminal// code ~/.zshrc > find: { ZSH_THEME} > ZSH_THEME=“powerlevel10k/powerlevel10k”\nStart a new terminal session, Powerlevel10 configure wizard will be launched to set your prompt, beware, there are many many options! check its project page.\nTo re-configure prompt:\nTo trigger the configuration wizard immediately, runp10k configure options are plentiful.\nTo customize even more edit your ~/.zshrc > open in vs code ~/.zshrc > go to bottom section: # To customize prompt, run p10k configure or edit ~/.p10k.zsh. code ~/.p10k.zsh.\n4. Install a patched FONTS\nThe patched font is the font used by iTerm2 to display characters, and you’ll need a special one for special characters like arrows and git icons.\nYou’ll get this result at the end, keep calm and follow this doc\nDownload and install the font\n\nMeslo (recommanded, ie the one in the screenshot). Click “view raw” to download the font (usually .ttf file double click file in finder to install).\nSource Code Pro has better alignment for the glyphs @14px.\n\nOthers powerline fonts\n-> Open the downloaded font and press “Install Font” on your computer.\n\nIf you did not go with Powerlevel10k or you want another font, read on:\n\nSource Code Pro\n\nSource Code Pro + Font Awesome, this one is needed if you want the icons from Font Awesome as shown in the screenshot for Powerlevel10k.\n\nOthers @ powerline fonts\nOpen the downloaded font and press “Install Font”.\nSet this font in iTerm2 (iTerm → Preferences → Profiles → Text → Font), in the dropdown select the desired Font. You will see it change on the fly.\nRestart iTerm2 for all changes to take effect.\n\n5. Further tweaking\nThings like\n\nauto suggestions\n\nword jumping with arrow keys / natural text editing\n\nsyntax highlighting\n\nvisual studio code config  can be found in the section below.\n\na. Auto suggestions (for Oh My Zsh)\nJust follow these steps: https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md#oh-my-zsh\n\nClone this repository into $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins)\n\ngit clone <https://github.com/zsh-users/zsh-autosuggestions> ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\nAdd the plugin to the list of plugins for Oh My Zsh to load (inside ~/.zshrc):\n\nplugins=( \n    # other plugins...\n    zsh-autosuggestions\n)\nIf the auto suggestions do not appear to show, it could be a problem with your color scheme.\nUnder “iTerm → Preferences → Profiles → Colors tab”, check the value of Black Bright, that is the color your auto suggestions will have. It will be displayed on top of the Background color. If there is not enough contrast between the two, you won’t see the suggestions even if they’re actually there.\nb. Enable word jumps and word deletion, aka natural text selection\nBy default, word jumps (option + → or ←) and word deletions (option + backspace) do not work. To enable these, go to “iTerm → Preferences → Profiles → Keys → Key mappings → Presets… → Natural Text Editing → Boom! Head explodes”\nc. Syntax highlighting\nClone the repository:\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting  \nActivate the plugin in ~/.zshrc:\nplugins=( [plugins...] zsh-syntax-highlighting)  \nOr brewinstall:\nbrew install zsh-syntax-highlighting  \nWhen finish installing, read message. It will tell you to “add the following to the .zshrc”:\nsource /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\nIf the message “highligthers directory not found message”, you may need to add the following to the .zshenv file:\nexport ZSH_HIGHLIGHT_HIGHLIGHTERS_DIR=/usr/local/share/zsh-syntax-highlighting/highlighters\nRestart iTerm2 for all changes to take effect.\nTerminal and VS code Terminal prompt issues\nIcons and font not displaying correctly?\nIf icons don’t display in Terminal or VS code integrated terminal after setting terminal.integrated.fontFamily see : https://github.com/romkatv/powerlevel10k/issues/671\n\nTerminal fix: //Preferences > Profile > Font > Change > …[]… > Collection:© All fonts > Family: © > MesloLGF Regular\niTerm fix: //Preferences > Profile > Text > Font > MesloLGF Regular\nVisual Studio Code config Fonts Installing a patched font will mess up the integrated terminal in VS Code unless you use the proper settings. You’ll need to go to settings (CMD + ,) and add or edit the following values: see 4. Install a patched font\nfor Source Code Pro + Font Awesome: “terminal.integrated.fontFamily”: “‘SourceCodePro+Powerline+Awesome Regular’”. The single quotes are important!\n\nRestart VS Code after the config change.\n\nfor Source Code Pro: “terminal.integrated.fontFamily”: “Source Code Pro for Powerline”\n\nfor Meslo: “terminal.integrated.fontFamily”: “Meslo LG M for Powerline”\n\n-> settings (Cmd + ,) > find (Cmd +F): {Terminal font | Terminal integrated font family} > { MesloLGS NF }\n\nfor other fonts you’ll need to check the font name in Font Book. You can right click on them on select “Show in Finder” to get the exact name.\nYou can also set the fontsize e.g.: “terminal.integrated.fontSize”: 14\n\n6. Paste Conda Initialize code at the head of .zshrc\nFor MBP15:\n\n# >>> conda initialize >>>\n# !! Contents within this block are managed by 'conda init' !!\n__conda_setup=\"$('/Users/Marcelo-Rosales/opt/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)\"\nif [ $? -eq 0 ]; then\n    eval \"$__conda_setup\"\nelse\n    if [ -f \"/Users/Marcelo-Rosales/opt/anaconda3/etc/profile.d/conda.sh\" ]; then\n        . \"/Users/Marcelo-Rosales/opt/anaconda3/etc/profile.d/conda.sh\"\n    else\n        export PATH=\"/Users/Marcelo-Rosales/opt/anaconda3/bin:$PATH\"\n    fi\nfi\nunset __conda_setup\n# <<< conda initialize <<<\n# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.\n# Initialization code that may require console input (password prompts, [y/n]\n# confirmations, etc.) must go above this block; everything else may go below.\nif [[ -r \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\" ]]; then\n  source \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\"\nfi\n\n# If you come from bash you might have to change your $PATH.\n# export PATH=$HOME/bin:/usr/local/bin:$PATH\n\nFor MBP20\n\n# >>> conda initialize >>>\n# !! Contents within this block are managed by 'conda init' !!\n__conda_setup=\"$('/usr/local/Caskroom/miniconda/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)\"\nif [ $? -eq 0 ]; then\n    eval \"$__conda_setup\"\nelse\n    if [ -f \"/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh\" ]; then\n        . \"/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh\"\n    else\n        export PATH=\"/usr/local/Caskroom/miniconda/base/bin:$PATH\"\n    fi\nfi\nunset __conda_setup\n# <<< conda initialize <<<\n\nInstant Prompt Message error.\nLast login: Tue Jul 12 23:09:32 on ttys000\nWhen using Powerlevel10k with instant prompt, console output during zsh initialization may indicate issues.\nYou can:\n\nRecommended: Change ~/.zshrc so that it does not perform console I/O after the instant prompt preamble. See the link below for details.\n\nYou will not see this error message again.\nZsh will start quickly and prompt will update smoothly.\n\nSuppress this warning either by running p10k configure or by manually defining the following parameter:\ntypeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet\n\nYou will not see this error message again.\nZsh will start quickly but prompt will jump down after initialization.\n\nDisable instant prompt either by running p10k configure or by manually defining the following parameter:\ntypeset -g POWERLEVEL9K_INSTANT_PROMPT=off\n\nYou will not see this error message again.\nZsh will start slowly.\n\nDo nothing.\n\nYou will see this error message every time you start zsh.\nZsh will start quickly but prompt will jump down after initialization.\n\n\nFor details, see: https://github.com/romkatv/powerlevel10k/blob/master/README.md#instant-prompt\n– console output produced during zsh initialization follows –\n[oh-my-zsh] Insecure completion-dependent directories detected: (This directories were found to be insecure.) drwxrwxr-x 3 marcelorosales admin 96 May 9 2021 /usr/local/share/zsh drwxrwxr-x 6 marcelorosales admin 192 Jun 26 16:05 /usr/local/share/zsh/site-functions\n[oh-my-zsh] For safety, we will not load completions from these directories until [oh-my-zsh] you fix their permissions and ownership and restart zsh. [oh-my-zsh] See the above list for directories with group or other writability.\n[oh-my-zsh] To fix your permissions you can do so by disabling [oh-my-zsh] the write permission of “group” and “others” and making sure that the [oh-my-zsh] owner of these directories is either root or your current user. [oh-my-zsh] The following command may help: [oh-my-zsh] compaudit | xargs chmod g-w,o-w\n[oh-my-zsh] If the above didn’t help or you want to skip the verification of [oh-my-zsh] insecure directories you can set the variable ZSH_DISABLE_COMPFIX to [oh-my-zsh] “true” before oh-my-zsh is sourced in your zshrc file.\nSolution: type\ncompaudit | xargs chmod g-w,o-w\nAll messages will disappear with this.\nOld version 1: https://youtu.be/pTW02GMeI74\nConfiguration of a beautiful (efficient) terminal and prompt on OSX in 7minutes\nSumary: 0. Install Hombrew\n\nInstall and configure iTerm2\nInstall a patched font\nInstall Zsh and Oh my Zsh\nAdd Powerlevel9k Zsh Theme\nFinal tweaking\n\n\nshorter prompt\nenable text editor navigation\nauto suggestions\nsyntax highlighting\nnew line after each prompt\nchange color of warning git status\nchange Iterm2 tabs color\n\n1. Install and configure iTerm2\nbrew cask install iterm2\nChoose your Iterm2 color scheme\n\nyou can use Clovis’ iTerm2 color scheme file 🎁 (the one in the screenshot)\nor scroll many opensource iTerm2 color schemes here\n… and download your desired preset’s file here\n\n2. Install a patched font\nThe patched font is the font used by iTerm2 to display characters, and you’ll need a special one for special characters like arrows and git icons.\nYou’ll get this result at the end, keep calm and follow this doc\nDownload and install the font\n\nMeslo (recommanded, ie the one in the screenshot). Click “view raw” to download the font.\nSource Code Pro has better alignment for the glyphs @14px.\nOthers powerline fonts\nOpen the downloaded font and press “Install Font” on your computer.\nAdd the font in iTerm2\n(font size of 12pt is our personal preference)\niTerm2 → Preferences → Profiles → Text → Change Font\n\n3. Install Zsh and Oh my Zsh\nZsh is a shell that provides many features, like better files and folders navigation. To install it :\nbrew install zsh zsh-completions  \nOh my Zsh is a Zsh configuration framework, you can read more here: github.com/robbyrussell/oh-my-zsh.\nTo install it :\nsh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"  \n💡In the next steps you’ll need to edit the ~/.zshrc configuration file which is run when the terminal starts. At any time you can compare it with Clovis .zshrc configuration file 🎁\n4. Add Powerlevel9k Zsh Theme\nThe Powerlevel9k zsh theme adds many other features like a right promp with infos such as exit codes and timestamps. To install it run :\ngit clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k  \nThen edit ~/.zshrc configuration file and set\nZSH_THEME=\"powerlevel9k/powerlevel9k\"  \nBoom. Powerlevel9k offers a whole lot more, best is to follow the next steps or check out these user made configs.\n5. Final tweaking\n\nshorter prompt\nenable text editor navigation\nauto suggestions\nsyntax highlighting\nnew line after each prompt\nchange color of warning git status\nchange Iterm2 tabs color\n\n\n\nObsolete section!!.\n\ntop\n\n\nBash_profile Setup\nTip for this section:\nThe first and easiest method is using Mac Finder to show hidden files (like .bash_profile or .bashrc file):.\n\nOpen the folder where you want to search hidden files.\nPress the “Command + Shift + .”…\nThe hidden files will show up as translucent/shadow in the folder.\nIf you want to obscure the files again, press the same “Command + Shift + .”\n\ntop\nCustomizing Your Terminal:\n\nHow to: Install and use homebrew (why?: To automate program installation and programs settings. Install all programs in one go. Using dot files.\n\nCustomize Terminal. Taken from the Linux/Mac Tutorials collection @ Corey Schafer\n\n8 Customizing Your Terminal: .bash_profile and .bashrc files\n9 Customizing Your Terminal: Adding Color and Information to Your Prompt\n10 Customizing Your Terminal: How To Use and Modify Dotfiles\n11 How I Setup a New Development Machine - Using Scripts to Automate Installs and Save Time\n\n\n\n8 .bash_profile and .bashrc files.\n\n\nvideo\nhttps://youtu.be/vDOVEDl2z84?list=PL-osiE80TeTvGhHkpvfmKWOiIPF8UVy6c\nTo customize our terminal, we are going to create several .bash files (whether with R or VS). If you have other customized bash file move them to another folder (ex. DotFile) and restart terminal (al customization will disappear).\n\nBash_profile: This is a login shell. Usually mac uses longing shell when opening terminal. So normally open terminal and it will echo FROM BASH_PROFILE.\nBashrc: Is a file for none login shells. For linux?. In “terminal” run bash to create a subshell. After running this line, mac terminal will echo FROM BASHRC. Having 2 files for logging and non-login shells is cumbersome since we will have to modify both each time when customizing.\nA way around this problem is to a simple trick which will allow us to modify just a single file and it will be applied to all our shells.\n\nTo do this, call your bashrc file from the bash_profile\n\nCreate bash files in terminal: touch .bash_profile, touch .bashrc (mind the containing folder). Or create the files in Editor (Visual studio).\nwarning: shellscript language (.sh files) is the language for .bash files, but when saved, it saves as .sh, therefore is better to create them with terminal.\nOpen the files in a text editor (VS, atom, R, etc).\nin the bash_profile file and type:\n\n\n#To see from which file is teminal running the code, echo the file name.  \necho \"FROM BASH_PROFILE\"  \n\nand in the bashrc file:\n\necho \"FROM BASHRC  \"  \n\nNext in the profile_bash file, we call the .bashrc. as the “code source” into the bash_profile. So.. if a .bashrc exist, then run the code from that file (.bashrc) instead of this file (.bash_profile).\n\n#to modify just a single file for all our shells, call your bashrc file from with in the bash_profile file.  \nif [ -f ~/.bashrc]; then  \n    source ~/.bashrc  \nfi  \n#Now we can write all our code in the bashrc file and not really have to worry about modifying our bash_profile file anymore.  \n\nNow we can do all our customizations on the bashrc file.\n\n#Code for the bashrc file:\n#To change the promt name for example:\nPS1=\"custom-> \";\n\nIf we reopen terminal it will show “FROM BASHRC” in the login shell. Type and run: bash to reopen as a none login shell and it will show again “FROM BASHRC” confirming that in both shells, the code from the bashrc file is been used and the promp name will also change.\nSo.. from now on will be modifying only the bashrc file….\n\n9 Adding Color and Information to Your Prompt.\n\n\nCustomizing Your Terminal: Adding Color and Information to Your Prompt\nNow, let’s customize our prompt name\n\n#Code for the bashrc file:\n#To change the promt name for example to just an arrow:\nPS1=\"-> \";\nexport PS1;\n\nSave the file. To see the changes in the terminal, you can\n\nClose terminal and reopen. Or\nrun the new code with source .bashrc in Terminal.\n\nNow let’s add some dynamic information using special characters:\nEx 1. To show the user name…. “username ->”\n> (In mac word the ¥ is the backslash) in Terminal it displays correctly).\n\n#Code for the bashrc file:\n#To change the promt name for example + dinamic information (user) \"\"\nPS1=\"\\u-> \";\nexport PS1;\n\nThen the prompt will show your username.\nList of special characters:\nser name.\nhe hostname up to the first .\nthe name of the shell.\nhe current time in 24hr format.\nhe username of the current user.\nthe current working directory.\nthe basename of the current working directory.\nEx 2. If we would like a prompt like:\nusername@hostname directory ->“.\n\n#Code for the bashrc file:\n#To change the promt name for example + dinamic information (user) \"\"\nPS1=\"\\u@\\h \\W -> \";\nexport PS1;\n# In terminal reload using: source .bashrc\n\nTo add color to the text depending on the dynamic info:\n\nRemember: in “my word” the ¥ is backslash in VS\n\n\n#Code for the bashrc file:  \n#To change the promt name for example + dinamic information (user)   \nPS1=\"\\u@\\h \\W -> \";  \nexport PS1;  \n\n#To change the promt name + dinamic information + color based on dinamic info.   \n# 1. Assing colors to tput and command substitution.  \n    # $()  # Command substitution ex.: echo \"Your current directory is $(pwd)\".  \n    # setaf # Sets color of background. 166 is the color orange in the 256 color chart.   \n    # Ex.: \"$(tput setaf 166)This is orange\".  \n\nPS1=\"$(tput setaf 166)\\u@\\h \\W -> \";  \nexport PS1;  # This will change the color of prompt but also all the text diplayed in Terminal.   \n\n# 2. We need to specify whe color begins and ends.   \n    # $(tput sgr0) # Resets the formating.  \nPS1=\"$(tput setaf 166)\\u@\\h \\W -> $(tput sgr0)\";  \nexport PS1;  # Change color of prompt and reset color at the end of prompt.  \n\n# 3. To add more colors, place a tput before each dinamic info.  \nPS1=\"$(tput setaf 166)\\u$(tput setaf 228)@\\h$(tput setaf 71)\\W -> $(tput sgr0)\";  \nexport PS1;  # Change color of for each dinamic info and reset color at the end of prompt.  \n    # This way of coding makes lines long an difficult to see. \n    # To organize, add \"PS1+=\" at the beginning of each line and write the command.\n\nPS1=\"$(tput setaf 166)\\u\"; # Orange user.  \nPS1+=\"$(tput setaf 228)@\\h\"; # yellow Host.  \nPS1+=\"$(tput setaf 71)\\W\"; # green working directory.  \nPS1+=\"$(tput sgr0)\"; # reset color.  \nexport PS1;  # Save and reload. For some reason ? the promp and cursor position is miss placed. \n\n# 4. To correct the prompt missplacement problem.  \n    # Use the special escape? characters commad in every tput command: \\[ \\]\nPS1=\"\\[$(tput setaf 166)\\]\\u\"; # Orange user.  \nPS1+=\"\\[$(tput setaf 228)\\]@\\h\"; # yellow Host.  \nPS1+=\"\\[$(tput setaf 71)\\]\\W\"; # green working directory.  \nPS1+=\"\\[$(tput sgr0)\\]\"; # reset color.  \nexport PS1;  # Save and reload. promp and cursor position is corrected. \n\n# 5. To make it more easy to code, we can specify each tput command as a variable.\norange= $(tput setaf 166);  \nyellow= $(tput setaf 228);  \ngreen= $(tput setaf 71);  \nwhite= $(tput setaf 15);   \nbold= $(tput setaf bold);   \nreset= $(tput sgr0);  \n      \nPS1=\"\\[${bold}\\]\\n\";  \nPS1+=\"\\[${orange}]\\u\"; # Orange user.  \nPS1+=\"\\[${white}\\] at\";  \nPS1+=\"\\[${yellow}\\]\\h\"; # yellow Host.  \nPS1+=\"\\[${white}\\] in\";  \nPS1+=\"\\[${green}\\]\\W\"; # green working directory.  \nPS1+=\"\\n\";  # \\n is a new line  \nPS1+=\"\\[${white}\\]$ \\[${reset}\\]\"; # $ white and reset color.  \nexport PS1;  \n\n# To reload in terminal: source .bashrc\n\n10 How To Use and Modify Dotfiles\n\n\nCustomizing Your Terminal: How To Use and Modify Dotfiles\nCustomizing Terminal takes a lot of time and effort. A better and reliable way to do it is by using files already done by other more capable developers that share their customization with the community. In this case we can use the GitHub does dotfiles page. In particular the Mathias Bynens’s dotfiles(MBs dotfiles), I download the repository zipfile to this folder unzip and open the .bashrc and the .bash_profile.\nPreviously we use the “.bashrc” file as the main file for modifying shell profile, but in this repository, they do the opposite and use the “.bash_profile” as main file and call-in the “.bashrc” file.\nIn the .bash_profile from MBs,\nTo understand the code commands and checks, in terminal use:\n\nman test\n\nNow you can check all the files. Open at\nWe can also the CoreyMSchafer/dotfiles (CMSs dotfiles)\n11 How I Setup a New Development Machine - Using Scripts to Automate Installs and Save Time.\n\n\nHow I Setup a New Development Machine - Using Scripts to Automate Installs and Save Time\nTo make a file executable in Terminal, whether is a .bash file or a .sh file. In Terminal type:\n\nchmod +x scriptname.sh\n\n\n\n\nHow to install dotfiles. Outdated\nDotfiles are outdated, bash files no longer used\n\nAll these procedures are for bash shell, obsolete for the new zsh shell. Use to customize RStudio Termina only ‼\n\nSummary of the procedure.\n\nFind dotfile repo, check and modify code for custom prompt and brew installation files. Files:\n\n\ninstall.sh: Executable, where I modify installation procedures.\nbash_profile: Gather all custom .bash scripts and source them.\nbashrc.\nbash_server_prompt.\nbash_prompt: Custom prompt color.\nbrew.sh or brewfile: May is better to use the dump command for auto brewfile.\n\nFrom Github:\n\nGit clone dotfiles repo into home directory.\nRun install.sh\n.bashfiles symlinks will be created in home dir and auto source.\nRestart †Terminal (bash shell) or RStudio terminal.\nCustom prompt will be displayed.\n∵ changes and modifications are made on git > commit and pushed, will apply to all devices at once.\n\nFrom Folder:\n\nCopy the dotfile directory to homedir.\nRun install.sh\n.bashfiles symlinks will be created in homedir and auto sourced.\nRestart †Terminal (bash shell) or RStudio terminal.\nCustom prompt will be displayed.\n∵ changes and modifications will have to be made manually for each device every time. It is NOT an ideal way to it.\n\nFrom Cloud Sync Service (Box Sync):\n\nCopy the dotfile directory to Box Sync directory.\nRun install.sh\n.bashfiles symlinks will be created in homedir and auto source.\nRestart †Terminal (bash shell) or RStudio terminal.\nError in the installing.\n\n\nSymlinks path DO NOT point/target to Box Sync dir.\nIdea: Create folder in homedir. Create symlinks to Box Sync.\nError: Too many levels of symbolic links.\nAs of this posting, Box can’t handle symlinks.\nPath with spaces are problematic as string variable.\n∵ installation was unsuccessful.\n\n> Try on other Sync Services like Google or iCloud or OneDrive.\n\nDotfiledir in iCloud > install.sh with symlinks to icloud folder (mod install.sh, !.bashfile to .bashfile slink)>\nCreate alias dir of Dotfiledir (slink) > move alias dir to homedir > install.sh (carefull if .bashfile or !.bashfile).\n\n\ntop\n\n\nBash dotfiles install\nDetail installation procedure of bash dotfiles:\nRequirements: (See brew and git sections for detail information).\n\nHomebrew; download from https://brew.sh/\n\nGit must be installed.\n\n\n\nTo make sure it is type in terminal:\n\ngit (git manual should display, if not install) or\n`git –version’ (the version number will be display).\nIf not installed install from https://git-scm.com/book/en/v2/Getting-Started-Installing-Git.\n\n\n\nDownload the “dotfile” directory from the git hub repository (if you have one. In general it is recommended).\n\nThis will create a folder in the home directory called ‘dotfiles’ with all the files required.\n\n\nIf not: Create or copy/paste a directory ’dotfiles` containing all the files.\n\n\nGo to terminal. > Go to dotfiles folder.\n\n\ncd path/to/dotfile/folder/\n\n\nRun the install file: through terminal. (you need to be in the same folder as the install.sh file).\n\n\n./install.sh path/to/home/directory\n\nThis will create the files (symlinks) into the home directory.\nIf the error:\n\n-bash: ./file.name: Permission denied\n\nIs ∵ you are trying to execute a file which you do not have permission to run.\nTo fix this issue, use the chmod u+x command to give yourself permissions. more info here\n\nchmod u+x example.sh\n\nThen, run installation again\n\n./install.sh path/to/home/directory\n\nIt will create the symlinks and run and install the brew file programs. (may take a while).\nHowever, If executing install.sh form other directory than ‘dotfiles’ created by git, the symlinks will do not directed to the right folder.\nTo check symlink path:\n> //Finder > R© > Get Info > …[]… Original: /path/to/original/file <- if path is incorrect, change manually in terminal.\nHow to change where a symlink points [duplicate]\nCan you change what a symlink points to after it is created?\n\nln -sfn source/file/or/directory/name softlink/name  \nEg.  \nln -sfn path/to/original/file/.bash_profile .bash_profile (∵ we are in home directory) or  \nln -sfn path/to/original/file/MRR-bash_prompt  .bash_prompt  (target file is not a .bash file)   \n\n*Ø source file, original file, targeted file are all synonyms in this case.\n\n# create symlinks (will overwrite old dotfiles)\n# Careful!! bash: /Users/marcelorosales/.bash_profile: Too many levels of symbolic links!!!! As of this posting, Box can’t handle symlinks.\nfor file in ${files}; do\n    echo \"Creating symlink to $file in home directory.\"\n    # ln -sf ${dotfiledir}/.${file} ${homedir}/.${file}  # Original Links will be created in the ${homedir}\n    ln -sf ${dotfiledir}/.${file} ${homedir}/.${file}  # Original -> target\ndone\n\n\n\nSymbolic Links\n(aka Symlinks) on a Mac\nRef\nTo create a symbolic link on a Mac, you’ll need to use the Terminal app. Run the ln command in the following form. You can specify either a path to a directory or file:\n\nln -s /path/to/original /path/to/link\nln -s /path/of/original/file /path/to/target/dir\nln -s \"/path/of/original/file\" \"/path/to/target/dir/{filename}\"\n\nThe -s here tells the ln command to create a symbolic link. If you want to create a hard link, you’d omit the -s. Most of the time symbolic links are the better choice, so don’t create a hard link unless you have a specific reason for doing so.\nHere’s an example. Let’s say you wanted to create a symbolic link in your Desktop folder that points to your Downloads folder. You’d run the following command:\n\nln -s /Users/name/Downloads /Users/name/Desktop\n\nAfter creating the link, you’d see your Downloads folder appear on your desktop. It’s actually the symbolic link you created, but it will look like the real thing. This folder will appear to contain all the same files as your Downloads folder. That’s because it does—they’re just different views pointing to the same underlying directory on the file system.\nIf your file path contains spaces or other special characters, you’ll need to enclose it in quotation marks. So, if you wanted to create a link on your desktop to a folder named “My Files” inside your user directory, you’d need something like the following command:\n\nln -s \"/Users/name/My Files\" \"/Users/name/Desktop/My Link\"\n\nTo ease typing file and directory paths into the Terminal, you can drag-and-drop a folder from the Finder window into the Terminal and the Terminal will automatically fill in the path to that folder. It will enclose the path in quotation marks if necessary, too.\nIf you need to create a symbolic link in a system location your user account doesn’t have access to, you’ll need to prefix the ln command with the sudo command, like so:\n\nsudo ln -s /path/to/original /path/to/link  \n\n!!! note\nBear in mind that, on modern versions of macOS, you won’t be allowed to write to certain system locations without changing a low-level firmware option due to the System Integrity Protection feature. You can disable that feature, but we recommend that you don’t.\nRELATED: How to Disable System Integrity Protection on a Mac (and Why You Shouldn’t)\n\nUpdate a symlink\n\n\nHow to update an existing symlink\n\n\nAliases vs. Symbolic links\nMac OS X has two types of aliases. The traditional aliases, and symbolic links (derived from UNIX).\nAliases are linked to the file or folder they point to. This means that if you move the original file to a new location, the alias follows it and is still linked to it.\nSymbolic links refer to a specific pathway. Thus, a symbolic link to a file called Testing in your Documents folder will only work if the file remains in that folder location. Move it and the link is broken. On top of that, if you move the file and create a different one with the same name in the original location, the symbolic link will now point to that file (since it has the same pathway). Both methods have their advantages and disadvantages.\nAliases and symbolic links are both used to create shortcuts or references to files or folders, but they function differently and have different characteristics:\n\nAliases:\n\nAliases are specific to the macOS operating system.\nThey are created using the Finder interface by right-clicking on a file or folder and selecting “Make Alias.”\nAliases are small files that contain references to the original file or folder.\nAliases can be moved, renamed, or deleted without affecting the original file or folder.\nAliases retain their functionality even if the original file or folder is moved or renamed.\nAliases are resolved by the operating system and can be accessed by any application.\nAliases can be recognized by their distinctive arrow icon.\n\n\n\nSymbolic Links:\n\nSymbolic links (symlinks) are available on various operating systems, including macOS, Linux, and Windows (with limitations).\nThey are created using the command-line interface or the file manager interface.\nSymlinks are special files that contain the path to the original file or folder.\nSymlinks can be moved, renamed, or deleted without affecting the original file or folder.\nIf the original file or folder is moved or renamed, the symlink may break and become invalid.\nSymlinks are transparent to applications and appear as if they were the original file or folder.\nSymlinks can be recognized by the “shortcut arrow” icon on Windows or a “symlink” badge on macOS.\n\nIn summary, aliases are specific to macOS and are created using the Finder, while symbolic links are available on multiple operating systems and are typically created using the command-line interface. Aliases are small files that retain their functionality regardless of the original file or folder’s location, while symlinks are special files that may break if the original file or folder is moved or renamed.\n\n\n\nhow to crate symlinks in Box sync\nCreating symbolic links (symlinks) within Box Sync is not directly supported by the Box Sync application. Box Sync is designed to synchronize files and folders between your local computer and your Box account, but it does not provide native functionality for creating symlinks.\nHowever, you can manually create symlinks outside of the Box Sync folder and then place the symlinked files or folders inside the Box Sync folder. Here’s how you can do it:\n\nIdentify the file or folder you want to symlink.\nCreate the symlink using the appropriate method for your operating system:\n\nWindows: You can create symlinks using the mklink command in Command Prompt or PowerShell.\nmacOS/Linux: You can create symlinks using the ln command in the terminal.\n\nOnce the symlink is created, you can move it into the Box Sync folder.\nBox Sync will recognize the symlinked file or folder and synchronize it with your Box account as if it were a regular file or folder.\n\nKeep in mind that the behavior of symlinks within Box Sync may vary depending on the operating system and Box Sync version. It’s recommended to test the setup and ensure that the symlinks are working as expected.\nNote: Creating symlinks requires appropriate permissions on your system. Make sure you have the necessary privileges to create symlinks and manage files and folders in your operating system.\n\nln -s \"/Users/marcelorosales/Box Sync/Niigata Uni Box/Books-Notes/Notes/All_notes.qmd\" \"/Users/marcelorosales/Documents/GitHub/Quarto/quarto-trials/quarto_website/All_notes_smlk.qmd\"\n\n\n\nSymlinks and synology\nOn a Synology NAS, you can create symbolic links (symlinks) using the command-line interface (CLI) or through the DSM (DiskStation Manager) web interface. Here’s how you can create symlinks on a Synology NAS:\n\nUsing the CLI:\n\nConnect to your Synology NAS via SSH or use the built-in Terminal in the DSM web interface.\nNavigate to the location where you want to create the symlink.\nUse the ln command to create the symlink. For example, to create a symlink named “symlink_name” pointing to “target_path”, use the following command:\nln -s target_path symlink_name\nThe symlink will be created in the specified location.\n\nUsing the DSM web interface:\n\nOpen the File Station app in the DSM web interface.\nNavigate to the folder where you want to create the symlink.\nRight-click on an empty area and select “Create” > “Symbolic Link”.\nEnter the path to the target folder/file in the “Link to” field.\nProvide a name for the symlink in the “Link name” field.\nClick “Create” to create the symlink.\n\n\nPlease note that creating symlinks may require administrative privileges on the Synology NAS. Also, keep in mind that the behavior and support for symlinks may vary depending on the specific model and version of the Synology NAS and the DSM software you are using. It’s recommended to consult the Synology documentation or support resources for more specific information related to your NAS model.\n\n\nSymlinks Results\nAs mention in From Cloud Sync Service (Box Sync):\n\nSymlinks path DO NOT point/target to Box Sync dir.\nError: Too many levels of symbolic links.\nAs of this posting, Box can’t handle symlinks.\nPath with spaces are problematic as string variable.\nIdea: Create folder in homedir. Create symlinks to Box Sync.\n∵ installation was unsuccessful.\n\n\n\n\nSync files\nHow to Use the rsync Command | Linux Essentials Tutorial\nSyntax: rsync -[options] source destination\nrsync -av source destination rsync -av –dry-run source destination #Sync simulation, not actual syncing\nrsync -av var/log root@139.177.195.158:/mnt/backup # sync data for local server to another server. (you need rsync installed in the destination server) root@139.177.195.158’s password: #will ask the password for the server.\nLinux/Mac Terminal Tutorial: How To Use The rsync Command - Sync Files Locally and Remotely\nrsync Original/* Backup/ # does not sync sub folders rsync -r Original/ Backup/ # sync all data including sub dir into destination. rsync -r Original Backup/ # sync the folder including sub dir into destination. rsync -av –dry-run Original/ Backup/ # simulation of the file and folders to be sync.\nIf you add more files to the Original folder and re-run command, it will copy only the new/modify files/folders. If you add more files to the Backup folder and re-run command, it will copy only the new/modify data and add files in destination.\nrsync -av –delete –dry-run Original/ Backup/ # Will delete added files in destination. rsync -zaP ~/path/to/source name@192.168.56.100:~/path/to/destination # sync data to a server (will ask for password)\n\nSync two files in mac OS\nOn macOS, you can sync two files using various methods, depending on your specific needs and preferences. Here are a few common approaches:\n\nUsing the Finder:\n\nOpen a Finder window and locate the source file you want to sync.\nSelect the source file and press Command+C to copy it.\nNavigate to the destination location where you want to sync the file.\nPress Command+V to paste the file. If the file already exists at the destination, you will be prompted to replace it or merge the contents.\n\nUsing the Terminal and rsync:\n\nOpen Terminal (Applications -> Utilities -> Terminal).\nUse the rsync command to sync files. For example, to sync file1.txt from the source folder to the destination folder, use the following command:\n\n\n\nrsync -avh --progress /path/to/source/file1.txt /path/to/destination/\n\n\nThe -avh options preserve file attributes and enable verbose mode, while --progress displays the progress of the sync process.\n\n\nUsing third-party synchronization software:\n\nThere are various third-party applications available for file synchronization on macOS, such as Dropbox, Google Drive, or Resilio Sync. These tools provide more advanced syncing capabilities and often include features like automatic syncing, real-time collaboration, and cloud storage integration.\n\n\nChoose the method that suits your specific requirements, whether you prefer a manual approach through the Finder, utilizing the command-line power of rsync, or using dedicated syncing software.\n\n\nhow to schedule rsync on mac\nTo schedule an rsync command to run at specific times or intervals on macOS, you can use the built-in cron or launchd utilities. Here’s a step-by-step guide on how to set up a scheduled rsync task:\nUsing cron:\n\nOpen Terminal on your macOS (Applications -> Utilities -> Terminal).\nType crontab -e to open the cron file for editing.\nIf prompted to select an editor, choose your preferred text editor (e.g., nano, vim).\nIn the cron file, add a new line specifying the schedule and the rsync command. For example, to run rsync every day at 10:00 AM:\n0 10 * * * rsync -avh --progress /path/to/source/ /path/to/destination/\nAdjust the rsync options, source path, and destination path as needed.\nSave the file and exit the editor.\ncron will now execute the rsync command at the scheduled time.\n\nUsing launchd:\n1. Open a text editor (e.g., TextEdit) on your macOS.\n2. Create a new XML file with the following content, replacing the placeholders with your specific information:\n{<?xml version=\"1.0\" encoding=\"UTF-8\"?>}\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>Label</key>\n    <string>com.example.rsyncsync</string>\n    <key>ProgramArguments</key>\n    <array>\n        <string>rsync</string>\n        <string>-avh</string>\n        <string>--progress</string>\n        <string>/path/to/source/</string>\n        <string>/path/to/destination/</string>\n    </array>\n    <key>RunAtLoad</key>\n    <true/>\n    <key>StartCalendarInterval</key>\n    <dict>\n        <key>Hour</key>\n        <integer>10</integer>\n        <key>Minute</key>\n        <integer>0</integer>\n    </dict>\n</dict>\n</plist>\nAdjust the rsync options, source path, destination path, and the Hour and Minute values in <StartCalendarInterval> as needed.\n\nSave the file with a .plist extension, such as rsyncsync.plist.\nOpen Terminal on your macOS (Applications -> Utilities -> Terminal).\nType sudo mv /path/to/rsyncsync.plist /Library/LaunchDaemons/ to move the .plist file to the appropriate directory.\nType sudo chown root:wheel /Library/LaunchDaemons/rsyncsync.plist to set the correct ownership and permissions for the file.\nType sudo launchctl load /Library/LaunchDaemons/rsyncsync.plist to load the launchd job.\nlaunchd will now execute the rsync command at the scheduled time.\n\nNote: When using cron or launchd, ensure that the paths to the rsync executable and the source/destination files/folders are correctly specified. Also, make sure you have the necessary permissions to access the files/folders and run the rsync command.\nPlease exercise caution when scheduling tasks and ensure that the rsync command is tested and functioning correctly before setting it up for automatic execution.\n\n\nhow to trigger sync with rsync as soon as original file is modify?\nTo trigger a sync with rsync as soon as the original file is modified, you can use the --update option along with the --delete option to keep the destination in sync with the source. Here’s an example command:\nrsync -avh --progress --update --delete /path/to/source/ /path/to/destination/\nExplanation of options:\n\n-avh: Enables archive mode (preserves file attributes), displays verbose output, and shows the progress of the sync.\n--update: Skips files that are newer in the destination, effectively syncing only modified or new files.\n--delete: Deletes files in the destination that don’t exist in the source, ensuring an exact match between the source and destination.\n\nWhen you run this command, rsync will compare the timestamps of the files in the source and destination. It will only transfer files that have been modified or are new since the last sync. The --delete option ensures that any files in the destination that no longer exist in the source will be removed.\nYou can include this command in a script or a scheduled task (such as using cron or launchd) to run it periodically or at specific intervals. This way, the sync will be triggered automatically whenever there are modifications to the original file.\n\n\n\nSchedule commands with crontabs\nLinux/Mac Tutorial: Cron Jobs - How to Schedule Commands with crontab\n\n220830\n\n\nHow to Create Files and Directories in R\nHow to Create Files and Directories in R - R-Lang\nHow to Create a directory in R To create a directory in R, use the dir.create() method. The dir.create() method accepts a folder generated in the current working directory or specifies a path. Before working with files, it’s a better idea to know what directory you’re working in. In R, you can figure out which directory you are working on the getwd() function.\nSyntax\n\ndir.create(path, showWarnings = TRUE, recursive = FALSE, mode = \"0777\")\n\nArguments path: It is a character vector containing a single path name. paths: They are character vectors containing file or directory paths. showWarnings: It is a logical argument; should the warnings on failure be shown? recursive: It is a logical argument. Should elements of the path other than the last be created? If true, like the Unix command mkdir -p. mode: It will be used on Unix-alikes: it will be coerced by as.octmode. For Sys.chmod, it is recycled along paths.\nReturn Value The dir.create() function returns an invisibly logical vector indicating if the operation succeeded for each of the files attempted.\nExample Before creating a folder in R, you need to check if the same-named folder exists. To check if the folder exists, use the file.exists() method. Then if it does not exist, you can create a folder.\n\nfolder <- \"mortalkombat\"\nif (file.exists(folder)) {\n cat(\"The folder already exists\")\n} else {\n dir.create(folder)\n}\n\nIf the folder does not exist, then it will create a new directory for you.\nTrailing path separators are discarded. On Windows, drives are allowed in the path specification, and unless the path is rooted, it will be interpreted relative to the current directory on that drive. The mode is ignored on Windows.\nHow to Create a file in R To create a file in R programmatically, use the file.create() method. The file.create() function creates files with the given names if they do not already exist and truncates them if they do.\nSyntax\n\nfile.create(x, showWarnings = TRUE)\n\nParameters …, file1, file2: They are character vectors containing file names or paths.\nExample\n\nfile <- \"dataframe.R\"\nif (file.exists(file)) {\n cat(\"The file already exists\")\n} else {\n file.create(file)\n}\n\nOutput [1] TRUE\n\ninstall.packages(\"rChoiceDialogs\")\ninstall.packages(\"rJava\")\n\nlibrary(rChoiceDialogs)\ntk_choose.dir()\n\nworks only on linux/mac not windows.\ntk_choose.dir {tcltk}\nfunction to make symlinks.\n\nln -s /path/to/original /path/to/link \n\n# upadate:\n\nln -s \"/Users/name/My Files\" \"/Users/name/Desktop/My Link\"\n\n\nChoose a file\n\nchoose a folder\n\ncreate symlink <In r there is a command already.>\n\n\npaste name of original file\n\n\nIn >_?\n\n\npwd\ncd /Users/rosalesrocabadomarcelo/Documents/GitHub/tests\npwd\ntouch test.txt\nls\n#rm test.txt\n#ls\n\nSelect file from command-line\n\ntheSelectedFile=\"$(osascript -l JavaScript -e 'a=Application.currentApplication();a.includeStandardAdditions=true;a.chooseFile({withPrompt:\"Please select a file to process:\"}).toString()')\"\n\necho \"Selected file: $theSelectedFile\"\n\n\nWith in R and Rstudio.\n\n\nfile.choose()\n\nfile.choose() is a {base} function, it works by itself, does not need a package to work.\nHowever, for choosing directories:\nThe choose.dir, from the utils package Choose a Folder Interactively on MS Windows only. Not mac.\nFor mac an Unix, use tk_choose.dir() form {tcltk} package.\n\nlibrary(tcltk)\ntk_choose.dir()\n\nFor multiplataform usage, create a custom function in the global environment\n\nchoose_directory = function(caption = 'Select data directory') {\n  if (exists('utils::choose.dir')) {\n    choose.dir(caption = caption) \n  } else {\n    tk_choose.dir(caption = caption)\n  }\n}\n\nThen use it as a function:\n\nchoose_directory()\n\nHow to Create Files and Directories in R - R-Lang\nWindows\n\ngetwd()\nsetwd(choose.dir)\nfolder <- \"test\"\nif (file.exists(folder)) {\n cat(\"The folder already exists\")\n} else {\n dir.create(folder)\n}\n\nMac\n\ngetwd()\nsetwd(tk_choose.dir())\nfolder <- \"test\"\nif (file.exists(folder)) {\n cat(\"The folder already exists\")\n} else {\n dir.create(folder)\n}\n\nMac&Windows\n\ngetwd()\nsetwd(choose_directory())\nfolder <- \"test\"\nif (file.exists(folder)) {\n cat(\"The folder already exists\")\n} else {\n dir.create(folder)\n}\n\nInteractively, choose a folder.\n\nif (interactive()) tk_choose.dir(getwd(), \"Choose a suitable folder\")\n\n\nCreate symlink\n\n\nfile.symlink(tk_choose.files(), tk_choose.dir())\n\nSee files {base}\nR Documentation File Manipulation\ntop\n\n\nTerminal Commands\nUsefull terminal commands\n\n\n\nComand »\nAction\n\n\n\n\nls »\nlist of all files in a folder\n\n\nls -al »\nlist of files + all attributes (.files) + long form\n\n\ntouch »\nCreates new file.\n\n\nchmod -x »\nMakes a file executable eg. .bash_profile, install.sh.\n\n\n./ »\nExecute a file. Eg. ./ install.sh\n\n\nmkdir »\nMake directory.\n\n\ncd\nChange directory.\n\n\nq »\nTo quit man commands\n\n\ncont+c »\nTo stop running commands.\n\n\n\n\nHtml table\nNote: § Make Sure that content text is in the correct indentation. $ Must be not spaces between the html code, otherwise it will break code continuity and html will be not be display correctly.\n\n\n\n\n\n\nDanger\n\n\n\nhtml code can be written (copy/paste) directly into the code sheet without the need of code block, this is because md file can read html natively, however, in quarto there are still many conflicts and bugs that disrupt correct display. In the following section, tabe goes over the margin constraing set in quarto and over expands in webpage. Therefore, the html code will be confined to a code block so it wont be display as table but as code only.\n\n\n<table>\n  <caption>Author Details</caption>\n    <col width=50%>\n    <col width=50%>\n  <tr> <!-- table row 1 Start-->\n    <th>Col 1</th>  <!-- table head 1 -->\n    <th>Col2</th> <!-- table head 2 -->\n  </tr><!-- table row 1 End -->\n  <tr>\n    <td> <!-- Data cell element -->\n      <pre> <!-- The Preformatted Text element Start (Makes text appear exactly as written in html, eg. shape or drawing with letters)-->\n        **Shortcuts for Terminal/Unix**  \n        Tab » Auto-complete file and folder names.  \n        Ctrl + A » Go to the beginning of the line you're currently typing on.  \n        Ctrl + E » Go to the end of the line you're currently typing on.  \n        Ctrl + U » Clear the line before the cursor.  \n        Ctrl + K » Clear the line after the cursor.  \n        Ctrl + W » Delete the word before the cursor.  \n        Ctrl + T » Swap the last two characters before the cursor.  \n        Esc + T » Swap the last two words before the cursor.  \n        Ctrl + L » Clear the screen.  \n        Ctrl + C » Kill whatever you're running.  \n        Ctrl + D » Exit the current shell.  \n        Option + → » Move cursor one word forward.  \n        Option + ← » Move cursor one word backward.  \n        Ctrl + F » Move cursor one character forward.  \n        Ctrl + B » Move cursor one character backward\n        Ctrl + Y » Paste whatever was cut by the last command\n        Ctrl + Z » Puts whatever you're running into a suspended background process\n        Ctrl + _ » Undo the last command\n        Option + Shift + Cmd + C » Copy plain text\n        Shift + Cmd + V » Paste the selection\n        exit » End a shell session    \n      </pre>\n    </td>\n    <td>\n      <pre> <!-- The Preformatted Text element Start (Makes text appear exactly as written in html, eg. shape or drawing with letters)-->\n        **Basics**  \n        / (Forward Slash) » Top level directory   \n        . (Single Period) » Current directory   \n        .. (Double Period) »    Parent directory   \n        ~ (Tilde) » Home directory   \n        sudo [command] »    Run command with the security privileges of the super user   \n        nano [file] »   Opens the Terminal editor\n        open [file] »   Opens a file   \n        [command] -h »  Get help about a command   \n        man [command] » Show the help manual of the command   \n        **Change Directory**   \n        cd »    Home directory   \n        cd [folder] »   Change directory, e.g. cd Documents   \n        cd ~ »  Home directory   \n        cd/ »   Root of the drive   \n        cd - »  Previous directory or folder you last browsed   \n        pwd »   Show your working directory   \n        cd.. »  Move up to the parent directory   \n        cd../.. »   Move up two levels   \n      </pre>\n    </td>\n  </tr>\n</table>\n\nIn case it can not be displayed in html\n\nShortcuts for Terminal/Unix\nTab » Auto-complete file and folder names.\nCtrl + A » Go to the beginning of the line you’re currently typing on.\nCtrl + E » Go to the end of the line you’re currently typing on.\nCtrl + U » Clear the line before the cursor.\nCtrl + K » Clear the line after the cursor.\nCtrl + W » Delete the word before the cursor.\nCtrl + T » Swap the last two characters before the cursor.\nEsc + T » Swap the last two words before the cursor.\nCtrl + L » Clear the screen.\nCtrl + C » Kill whatever you’re running.\nCtrl + D » Exit the current shell.\nOption + → » Move cursor one word forward.\nOption + ← » Move cursor one word backward.\nCtrl + F » Move cursor one character forward.\nCtrl + B » Move cursor one character backward Ctrl + Y » Paste whatever was cut by the last command Ctrl + Z » Puts whatever you’re running into a suspended background process Ctrl + _ » Undo the last command Option + Shift + Cmd + C » Copy plain text Shift + Cmd + V » Paste the selection exit » End a shell session\nBasics\n/ (Forward Slash) » Top level directory\n. (Single Period) » Current directory\n.. (Double Period) » Parent directory\n~ (Tilde) » Home directory\nsudo [command] » Run command with the security privileges of the super user\nnano [file] » Opens the Terminal editor open [file] » Opens a file\n[command] -h » Get help about a command\nman [command] » Show the help manual of the command\nChange Directory\ncd » Home directory\ncd [folder] » Change directory, e.g. cd Documents\ncd ~ » Home directory\ncd/ » Root of the drive\ncd - » Previous directory or folder you last browsed\npwd » Show your working directory\ncd.. » Move up to the parent directory\ncd../.. » Move up two levels\ntop\n\n\nCommands Cheat sheet\nTerminal/Unix Commands Cheat Sheet. Plain List\nShortcuts\nTab » Auto-complete file and folder names.\nCtrl + A » Go to the beginning of the line you’re currently typing on.\nCtrl + E » Go to the end of the line you’re currently typing on.\nCtrl + U » Clear the line before the cursor.\nCtrl + K » Clear the line after the cursor.\nCtrl + W » Delete the word before the cursor.\nCtrl + T » Swap the last two characters before the cursor.\nEsc + T » Swap the last two words before the cursor.\nCtrl + L » Clear the screen.\nCtrl + C » Kill whatever you’re running.\nCtrl + D » Exit the current shell.\nOption + → » Move cursor one word forward.\nOption + ← » Move cursor one word backward.\nCtrl + F » Move cursor one character forward.\nCtrl + B » Move cursor one character backward Ctrl + Y » Paste whatever was cut by the last command Ctrl + Z » Puts whatever you’re running into a suspended background process Ctrl + _ » Undo the last command Option + Shift + Cmd + C » Copy plain text Shift + Cmd + V » Paste the selection exit » End a shell session Basics\n/ (Forward Slash) » Top level directory . (Single Period) » Current directory .. (Double Period) » Parent directory ~ (Tilde) » Home directory sudo [command] » Run command with the security privileges of the super user nano [file] » Opens the Terminal editor open [file] » Opens a file [command] -h » Get help about a command man [command] » Show the help manual of the command\nChange Directory\ncd » Home directory\ncd [folder] » Change directory, e.g. cd Documents\ncd ~ » Home directory\ncd/ » Root of the drive\ncd - » Previous directory or folder you last browsed\npwd » Show your working directory\ncd.. » Move up to the parent directory\ncd../.. » Move up two levels\nList Directory Contents\nls » Display the name of files and subdirectories in the directory\nls -C » Force multi-column output of the listing\nls -a » List all entries including those with .(period) and ..(double period)\nls -1 » Output the list of files in one entry per line format\nls -F » Display a / (slash) immediately after each path that is a directory, * (asterisk) after executable programs or scripts, and @ after a symbolic link\nls -S » Sort files or entries by size\nls -l » List in a long format. Includes file mode, owner and group name, date and time file was modified, pathname, and more\nls -l / » List of the file system from root with symbolic links\nls -lt » List the files sorted by time modified (most recent first)\nls -lh » Long listing with human readable file sizes in KB, MB, or GB\nls -lo » List the file names with size, owner, and flags\nls -la » List detailed directory contents, including hidden files\nFile Size and Disk Space\ndu » List usage for each subdirectory and its contents\ndu -sh [folder] » Human readable output of all files in a directory\ndu -s » Display an entry for each specified file\ndu -sk* | sort -nr » List files and folders, totaling the size including the subfolders. Replace sk* with sm* to list directories in MB\ndf -h » Calculate your system’s free disk space\ndf -H » Calculate free disk space in powers of 1,000 (as opposed to 1,024).\nFile and Directory Management\nmkdir  » Create new folder named \nmkdir -p / » Create nested folders\nmkdir    » Create several folders at once\nmkdir “” » Create a folder with a space in the filename\nrmdir  » Delete a folder (only works on empty folders)\nrm -R  » Delete a folder and its contents\ntouch  » Create a new file without any extension\ncp   » Copy a file to the folder\ncp   » Copy a file to the current folder\ncp ~// » Copy a file to the folder and rename the copied file\ncp -R  <“new dir”> » Copy a folder to a new folder with spaces in the filename\ncp -i  » Prompts you before copying a file with a warning overwrite message\ncp   /Users/ » Copy multiple files to a folder\nditto -V [folder path][new folder] » Copy the contents of a folder to new folder. In here “-V” print a line of status for every file copied\nrm  » Delete a file (This deletes the file permanently; use with caution.)\nrm -i  » Delete a file only when you give confirmation\nrm -f  » Force removal without confirmation\nrm    » Delete multiple files without any confirmation\nmv   » Move/rename\nmv   » Move a file to the folder, possibly by overwriting an existing file\nmv -i   » Optional -i flag to warn you before overwriting the file\nmv *.png ~/ » Move all PNG files from current folder to a different folder\nCommand History\nCtrl + R » Search through previously used commands\nhistory n » Shows the previous commands you’ve typed. Add a number to limit to the last n items\n[value] » Execute the last command typed that starts with a value\n!! » Execute the last command typed\nPermissions\nls -ld » Display the default permission for a home directory\nls -ld/ » Display the read, write, and access permission of a particular folder\nchmod 755  » Change the permission of a file to 755\nchmod -R 600  » Change the permission of a folder (and its contents) to 600\nchown :  » Change the ownership of a file to user and group. Add -R to include folder contents\nProcesses\nps -ax » Output currently running processes. Here, a shows processes from all users and x shows processes that are not connected with the Terminal\nps -aux » Shows all the processes with %cpu, %mem, page in, PID, and command\ntop » Display live information about currently running processes\ntop -ocpu -s 5 » Display processes sorted by CPU usage, updating every 5 seconds\ntop -o rsize » Sort top by memory usage\nkill PID » Quit process with ID . You’ll see PID as a column in the Activity Monitor\nps -ax | grep  » Find a process by name or PID.\nNetwork\nping  » Ping host and display status\nwhois  » Output whois info for a domain\ncurl -O  » Download file via HTTP, HTTPS, or FTP\nssh @ » Establish SSH connection to  with user \nscp @:/remote/path » Copy  to a remote \narp -a » View a list of all devices on your local network. It will show you the IP and MAC address of all the devices\nifconfig en0 » View your device IP and MAC address\ntraceroute [hostname] » Identify the path and the hops traversed by the packets from your device to the destination address\nHomebrew\nbrew doctor » Check brew for potential problems\nbrew help » List of useful homebrew formula and cask commands\nbrew install | » Install a formula or cask\nbrew uninstall |cask> » Uninstall a formula or cask\nbrew list –formula » List only installed formulas\nbrew list –cask » List only installed cask\nbrew deps | » List all the dependencies of a formula or cask\nbrew search text|/regex/ » Search formula or cask through regex\nbrew upgrade | » Upgrade the formula or cask\nbrew outdated | » Search for outdated formula or cask\nbrew outdated –formula » Search for outdated formula\nbrew outdated –cask » Search for outdated cask\nbrew pin [installed_formula] » Pin a formula from getting upgraded\nbrew unpin [installed_formula] » Unpin to upgrade a package\nbrew cleanup » Remove stale lock files and outdated packages for all formula and casks.\nEnvironment Variable or Path\nprintenv » Display a list of currently set environment variables. Also tells you which shell you’re using\n$echo » Tells the terminal to print something and show it to you\necho $PATH » Check the value of the PATH variable which storea a list of directories with executable files\necho $PATH >path.txt » Export the path directory to a text file\nexport PATH=$PATH:absolute/path to/program/ » Execute a program via terminal only in your current session. If you use a program regularly, add the path to shell configuration file.\nSearch\nfind  -name <“file”> » Find all files named  inside . Use wildcards (*) to search for parts of filenames\ngrep “”  » Output all occurrences of  inside  (add -i for case insensitivity)\ngrep -rl “”  » Search for all files containing  inside \nOutput\ncat  » Output the content of \nless  » Output the contents of  using the less command that supports pagination and more\nhead  » Output the first 10 lines of \n > >  » Appends the output of  to \n >  » Direct the output of  into \n |  » Direct the output of  to \nCommand Line Help in the Mac OS X Terminal.\nman (command) » Manual page for (command). eg: man ls whatis (command) »One line brief summary of specified command. eg: whatis ls\n(command) –help » Display command usage information including available flags and proper syntax. eg: ls –help\napropos (string) » Searches the whatis database for (string), helpful in finding commands. eg: apropos ssh\n(command)+tab key » Autocomplete, or to list available commands that start with the typed prefix.\nq » exit help.\nList2.\nHandy word keyboard shortcuts for windows and Mac\n\n\n\nBash scripting\nVideo1\n\n\n\nShell Programming Guide\nBash key commands:\nAll code in terminal. cd, ls, clear or cnt+L, cat,\n\nTo show all shells available in system:\n\n\ncat /etc/shells \n\n\nTo Tell What Shell Your Mac is Using: (2 ways)\n\n\necho $0 \nwhich bash\n\nMBP20:\n/bin/bash; /bin/csh; /bin/dash; /bin/ksh; /bin/sh; /bin/tcsh; /bin/zsh.\n\nHow to switch between shells in macOS? : Simply type the shell name on the prompt. Ex.\n\n\n(username@~ % bash)  \n\nThe default interactive shell is now zsh. If not….\n\nTo update your account to use zsh, run\n\n\nchsh -s /bin/zsh \n\nFor more details, on how to change via system preferences see here.\n\nTo create a file. Use the command touch and the name of the file. Ex.\n\n\ntouch scriptname.sh\ntouch .bash_profile\n\n\nTo make a file executable (-x)\n\n\nchmod +x filename.~\n\n\nTo execute file “./” file name and enter.\n\n\n./ filename.~  \n\nRedirect to file.\n\nTo make an executable file create a new file.\n\n\n# In the -x file (filename.~).  \necho \"Hello bash in terminal\" > newfilename.~\n# echo prints the mensage\n# > creates a file (filename.~) with the message echoed. \n\nExecute filename.~ and a new file will be created in the pwd (present/print working directory).\n\nCreate file from -x file and use terminal as editor.\n\n\ncat > newfilename.~ # Use terminal as editor. * over writes old newfilename.~\ncat > newfilename.~ # Use terminal as editor. * This appends (adds to the end) into newfilename.~\n\nComments.\n\nTo add comments.\n\n# Single line comment.\n:'\nMulti\nline\ncomment'\n\nTo show comments in the output. Use the heredoc delimiter. Any text can be used as delimiter.\n\ncat << AnyTextDelimiter \nText to be display,\neven if it is \nmulty line.\nAnyTextDelimiter \n\nComplete this later…\nTable 1: Built-in shell variables.\nVariable Use.\n$# Stores the number of command-line arguments that were passed to the shell program.  \n$? Stores the exit value of the last command that was executed.  \n$0 Stores the first word of the entered command (the name of the shell program).  \n$* Stores all the arguments that were entered on the command line ($1 $2 ...).  \n\"$@\" Stores all the arguments that were entered on the command line, individually quoted (\"$1\" \"$2\" ...).  \ntop\n\n\nBatch Cask Installer\nHow to Create A Batch Cask Installer for Homebrew (Using a Simple Bash Script).\n\n\n\n# Create bash file in the Home directory.  \npwd  \nls  \n\n#Create the file \"caskinstall.sh\" or just \"caskinstall\".     \ntouch caskinstall.sh \n\n# Open the new file created with a text editor. vim, nano, atom, VS, etc.  \n# At the top type a \"shebang\": \"#!/usr/bin/env bash\" or \"#!/bin/env bash\"  \n\n#!/usr/bin/env bash  \necho \"Updating Casks...\"   \n\n# Save the file.  \n# Make the file executable with chmod in Terminal (not in text editor).\n# In Terminal     \nchmod +x caskinstall.sh \n\n# Execute/Run the file, if run correctly prompt will display \"updating Cask...\"  \n./ caskinstall.sh   \n\n# In Editor (file) create a variable.\n# Create a variable   \"CASK=()\" \n\nBasically all the code is as follows Note: the #!/usr/bin/env bash is called a shrap bang (or shebang?), is not a comment, it is a declaration of the language we are using.\nTo se where is the bash type in terminal:\nwhich bash\nusually the answer is /bin/bash.\nFull code.\n#!/usr/bin/env bash  \necho \"Updating Casks...\"   \n\nCASK=(  \nappName1  \nappName2  \netc  \n)  \n\nbrew cask install ${CASK[@]}  \n\necho \"Updating Complete!\"  \n\n# Place the name of all the app to be install, run the file and all the programs will be automatically install or updated.  \n# In terminal.  \nbrew cask list  \n\n# List will be displayed. copy/paste the list into the variable brackets in editor.  \n\n# Run the file. It will install the apps.  \n./ caskinstall.sh   \n\nTo make the created file (caskinstall.sh) executable.\n\nDelete the extension: caskistall.sh > caskinstall.\n\nmake the file executable with the chmod.\n\n\nChmod +x caskinstall \n\n\nTo run file. 2x© caskinstall in finder or ./caskinstall in terminal.\n\nTable 1: Built-in shell variables.\nlink.\nVariable Use\n$# Stores the number of command-line arguments that were passed to the shell program.\n$? Stores the exit value of the last command that was executed.\n$0 Stores the first word of the entered command (the name of the shell program).\n$* Stores all the arguments that were entered on the command line ($1 $2 ...).  \n\"$@\" Stores all the arguments that were entered on the command line, individually quoted (\"$1\" \"$2\" ...).\ntop\n\n\nResize Multiple Images (Mac >_ )\n\n\nEasily Resize Multiple Images Using the Mac Terminal\n\n# Search for the folder/dir containing the images\nls  \ncd ~/ImageDir/OrigSizeDir/  \n# The following command will erase/modify the original images, and save them in the same folder. \nsips -Z 640 *.jpg  \n# -Z Manteins the aspect ratio, 640 pixel is the size of pics wanted, *.jpg= all jpg files,   \n\n# The following command will copy, modify and paste the resulting images in a new folder. \nsips -Z 300 *.jpg  --out ~/path/to/new/folder\n\n# To rename the new img created.  \n# 1. Got to the dir where the images are located. \n# 2. type the followin command. \nfind . -type f -exec bash -x 'mv \"$0\" \"${0%\\.jpg}-300.jpg\"' {} \\; \n# Find all the files, .= in this folder, ${0%\\.jpg}= disregard the extension of the file, -300.jpg= add 300.jpg to the file name. \n\n\n\nResize multiple images (resize img batch) in >_:\n\nCreate new folder, copy/paste all img to be changed.\n\nIn >_ use the sis¥ps command\n\n\nsips -Z 600 *.jpg\n\n!!! danger\nOriginal files will be changed, NO undo option available.\nsips: sips command is used to query or modify raster image files (JPG/GIF/PNG) and ColorSync ICC profiles. Image processing options include flip, rotate, change image format/width/height. Its functionality can also be used through the “Image Events” AppleScript suite.\n-Z: Maintain aspect ratio.\n600: output width? size in pixels.\n*.jpg: files to modify, in this case, all .jpg files in the current directory.\n\nsips -Z 600 *.jpg --out ~/new/dir/path/and/name\n\nThis will create a new directory, make a copy of the files, modify size and save in the new directory.\nRename all the files (rename batch) in >_: 1. Go to the directory containing files. 2. run command:\n\nfind . -type f -exec bash -c `mv “$0” “${0%\\.jpg}-300.jpg”` {} \\;\n\nfind all the files in the current directory of this type of files\nthen, execute this command ? ? disregard the extension .jpg and add the suffix: -300.jpg\nSmall Script to auto resize\n\n#!/bin/bash\n# Change format, and change max size. 20181231 DM\n\noldFormat=HEIC\nnewFormat=png\nnewSize=800\n\nfor i in *.$oldFormat\ndo\n    sips --setProperty format $newFormat --resampleHeightWidthMax $newSize \"$i\" --out \"${i%$oldFormat}\"$newFormat\ndone\nexit 0\n\n\n\nRename batch files.\nStep By Step: Using The Mac Batch Rename Tool\n\n\n\nSelect all files you want to rename.\n\nFinder// File> Rename..Items > …[]… Rename Finder items: Find= text_to_find Replace with= Text_to_replace\n\n**Rename all the files (rename batch) in >_: (not working, permission error)**\n\nGo to the directory containing files.\n\nrun command:\n\n\nfind . -type f -exec bash -c `mv “$0” “${0%\\.jpg}-300.jpg”` {} \\;\n\nfind all the files in the current directory of this type of files\nthen, execute this command ? ? disregard the extension .jpg and add the suffix: -300.jpg\n!!! failure bash: ./03-Molar-1000x684.jpg: Permission denied\n\n//[Layout] > ˇMargins > Custom margins >..[].. > Grid >\nLinux/Mac Tutorials\n\ntop\n\n\n\nBrew (Terminal)\n\n\nHomebrew Tutorial: Simplify Software Installation on Mac Using This Package Manager\n * 1st install command line tools. (Do this through Xcode).\n\nxcode-select --install\n\nIf already installed an error message will be displayed.\n\nxcode-select: error: command line tools are already installed, use \"Software Update\" to install updates\n\n\nInstall home brew.\n\n\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n\nTest if brew install correctly by displaying the help menu.\n\n\nBrew help\n\n\nTo see all the packages we can install:\n\n\nbrew search  # This does no longer show all the programs, needs to add name of the program. \nbrew search | -l  # Retired/Discontinued.  \nbrew search >programmname> \n# Now use.  \nbrew list  # To see all packages already intalled. (see `brew help’)   \nbrew info >programname<  # Gives all the info of program.  \n\n * To search a program in brew\n\nbrew search >programname< # This does no longer show all the programs, needs to add name of the program. \n\n * To display the pathway to a program in brew\nwhich >programname< # Path to programs folder.  \n/usr/local/bin/tree. # Answer. But it is only a symlink to the real folder   \nls -la /usr/local/bin/tree  # Display long attributes of folder and the real location of the folder.  /usr/local/bin/tree -> ../cellar/tree/1.8.0/bin/tree   \nbrew update brew outdated brew upgrade brew cleanup brew doctor\nbrew update –auto-update : Use this to see outdated formulas and casks installed. After running this message will appear.\nYou have 32 outdated formulae and 12 outdated casks installed.  \nYou can “upgrade them” with **brew upgrade**  \nor “list them” with **brew outdated**.  \n\nWARNING!: brew upgrade will reinstall all brew applications/programs, resetting all of them to factory settings. For R and RStudio, perform a package file backup BEFORE upgrade. Visual code does not require? ∵ Sync is on with github?.\n\nInstall the command “brew bundle”: With this package you can dump all the programs and applications that you installed with brew over time in a “brew file.” https://twit.tv/shows/hands-on-mac/episodes/9.\n\n\n\nbrew bundle\n\nIf bundle already downloaded or saved. Output will display:\nRunning `brew update --auto-update`...\n==> Auto-updated Homebrew!\nUpdated 1 tap (homebrew/core).\n\nYou have 32 outdated formulae and 11 outdated casks installed.\nYou can upgrade them with brew upgrade\nor list them with brew outdated.\n\nError: No Brewfile found  # This means that the Brewfile has not been yet created.  \nor\n\nbrew bundle install   \n\nTo check all programs installed with brew.\n\nbrew list mas\n\nTerminal will show this:\n(base) marcelorosales@MR-MBP20 ~ % brew list mas  \n/usr/local/Cellar/mas/1.8.6/bin/mas  \n/usr/local/Cellar/mas/1.8.6/etc/bash_completion.d/mas  \n/usr/local/Cellar/mas/1.8.6/share/fish/vendor_completions.d/mas.fish  \nIf other reply, then… check list mas if not present install mas command:\nbrew list mas || brew install mas  \ntop\n\nCreating a brewfile\n\nIn terminal: brew bundle dump --describe (Brew bundle install required).\n\nTo check the “packages installed” with brew in the brewfile created: cat brewfile.\nThis file will be created in the home directory. (Home directory » Cmd+shift+H; Macintosh HD > Users > (user name)).\n\n\n# To create brewfile\nbrew update\nclear \nbrew bundle dump --describe  \nclear \nbrew list mas  \nbrew list \nclear \ncat brewfile  \n\n\nTo install the brewfile in a new mac or new installation:\n\n\nsudo softwareupdate -ia --verbose; # Updates MacOs (mac command)\nbrew bundle -v; # Install the brewfile created\nbrew cleanup; # To delete unused brew libraries.\nbrew doctor --verbose # To check if there are any other issues in system.\n\nMake a command script or command shell if your using “fish”, it’s easy to make a fish function that runs these lines with just one word ex. “update”, and then saving a lot of time.\nSetting permisions.\nFun With Mac Terminal Commands - Hands-On Mac 5. .\n\nchmod u-x >file/folder~< » u – x user cant execute file/folder.  \nchmod u+x >file/folder~< » u + x user was added access to execute file/folder. \nchmod 777 >file/folder~< » 777 user has been granted full access (hexadecimal 1 bit 2 bits 4 bits -> 4+2+1=7 for each level). 12:40 min.  \nman >cmdname< » Manual.  \nbrew install tldr »  install tldr\ntldr >cmdname< » Like manual, too long didn’t read? Summary of command functions.  \nsudo >cmdname< » sudo= super user do, gives you admin privileges (will ask for password).  \nsudo softwareupdate -i -a »  Update apple computer command.  \nrm -rf * »  delete all HDD. DANGER!!  \nsudo nvram StartupMute=%00 »  Mutes Mac’s startup chime.  \nsudo nvram StartupMute=%01 »  Turns on Mac’s startup chime.  \n\npwd cd ~ cd » home ls » list ls -l ls -a\nEg.\ntop"
  }
]